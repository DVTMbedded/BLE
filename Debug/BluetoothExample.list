
BluetoothExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a84  08009a84  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a8c  08009a8c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  2000008c  08009b20  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  08009b20  00020a34  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030ff7  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005112  00000000  00000000  000510b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001eb8  00000000  00000000  000561d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cd8  00000000  00000000  00058088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034f25  00000000  00000000  00059d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d7e0  00000000  00000000  0008ec85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00140349  00000000  00000000  000ac465  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ec7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083ac  00000000  00000000  001ec82c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000008c 	.word	0x2000008c
 8000210:	00000000 	.word	0x00000000
 8000214:	080099c8 	.word	0x080099c8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000090 	.word	0x20000090
 8000230:	080099c8 	.word	0x080099c8

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000382:	f1a4 0401 	sub.w	r4, r4, #1
 8000386:	d1e9      	bne.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_d2f>:
 80005bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005c4:	bf24      	itt	cs
 80005c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ce:	d90d      	bls.n	80005ec <__aeabi_d2f+0x30>
 80005d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005e4:	bf08      	it	eq
 80005e6:	f020 0001 	biceq.w	r0, r0, #1
 80005ea:	4770      	bx	lr
 80005ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005f0:	d121      	bne.n	8000636 <__aeabi_d2f+0x7a>
 80005f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005f6:	bfbc      	itt	lt
 80005f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005fc:	4770      	bxlt	lr
 80005fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000602:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000606:	f1c2 0218 	rsb	r2, r2, #24
 800060a:	f1c2 0c20 	rsb	ip, r2, #32
 800060e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	bf18      	it	ne
 8000618:	f040 0001 	orrne.w	r0, r0, #1
 800061c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000620:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000624:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000628:	ea40 000c 	orr.w	r0, r0, ip
 800062c:	fa23 f302 	lsr.w	r3, r3, r2
 8000630:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000634:	e7cc      	b.n	80005d0 <__aeabi_d2f+0x14>
 8000636:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800063a:	d107      	bne.n	800064c <__aeabi_d2f+0x90>
 800063c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000640:	bf1e      	ittt	ne
 8000642:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000646:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800064a:	4770      	bxne	lr
 800064c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000650:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000654:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <__aeabi_uldivmod>:
 800065c:	b953      	cbnz	r3, 8000674 <__aeabi_uldivmod+0x18>
 800065e:	b94a      	cbnz	r2, 8000674 <__aeabi_uldivmod+0x18>
 8000660:	2900      	cmp	r1, #0
 8000662:	bf08      	it	eq
 8000664:	2800      	cmpeq	r0, #0
 8000666:	bf1c      	itt	ne
 8000668:	f04f 31ff 	movne.w	r1, #4294967295
 800066c:	f04f 30ff 	movne.w	r0, #4294967295
 8000670:	f000 b97c 	b.w	800096c <__aeabi_idiv0>
 8000674:	f1ad 0c08 	sub.w	ip, sp, #8
 8000678:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800067c:	f000 f806 	bl	800068c <__udivmoddi4>
 8000680:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000688:	b004      	add	sp, #16
 800068a:	4770      	bx	lr

0800068c <__udivmoddi4>:
 800068c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000690:	468c      	mov	ip, r1
 8000692:	9d08      	ldr	r5, [sp, #32]
 8000694:	4604      	mov	r4, r0
 8000696:	468a      	mov	sl, r1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d14a      	bne.n	8000732 <__udivmoddi4+0xa6>
 800069c:	428a      	cmp	r2, r1
 800069e:	4617      	mov	r7, r2
 80006a0:	d962      	bls.n	8000768 <__udivmoddi4+0xdc>
 80006a2:	fab2 f682 	clz	r6, r2
 80006a6:	b14e      	cbz	r6, 80006bc <__udivmoddi4+0x30>
 80006a8:	f1c6 0e20 	rsb	lr, r6, #32
 80006ac:	fa01 f306 	lsl.w	r3, r1, r6
 80006b0:	40b7      	lsls	r7, r6
 80006b2:	40b4      	lsls	r4, r6
 80006b4:	fa20 fe0e 	lsr.w	lr, r0, lr
 80006b8:	ea4e 0a03 	orr.w	sl, lr, r3
 80006bc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006c0:	0c23      	lsrs	r3, r4, #16
 80006c2:	fa1f f987 	uxth.w	r9, r7
 80006c6:	fbba fef8 	udiv	lr, sl, r8
 80006ca:	fb08 aa1e 	mls	sl, r8, lr, sl
 80006ce:	fb0e f209 	mul.w	r2, lr, r9
 80006d2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d90b      	bls.n	80006f2 <__udivmoddi4+0x66>
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80006e0:	bf2c      	ite	cs
 80006e2:	2001      	movcs	r0, #1
 80006e4:	2000      	movcc	r0, #0
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d902      	bls.n	80006f0 <__udivmoddi4+0x64>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	f000 812a 	beq.w	8000944 <__udivmoddi4+0x2b8>
 80006f0:	468e      	mov	lr, r1
 80006f2:	1a9a      	subs	r2, r3, r2
 80006f4:	b2a3      	uxth	r3, r4
 80006f6:	fbb2 f0f8 	udiv	r0, r2, r8
 80006fa:	fb08 2210 	mls	r2, r8, r0, r2
 80006fe:	fb00 f909 	mul.w	r9, r0, r9
 8000702:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 8000706:	45a1      	cmp	r9, r4
 8000708:	d907      	bls.n	800071a <__udivmoddi4+0x8e>
 800070a:	193c      	adds	r4, r7, r4
 800070c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000710:	d202      	bcs.n	8000718 <__udivmoddi4+0x8c>
 8000712:	45a1      	cmp	r9, r4
 8000714:	f200 8110 	bhi.w	8000938 <__udivmoddi4+0x2ac>
 8000718:	4618      	mov	r0, r3
 800071a:	eba4 0409 	sub.w	r4, r4, r9
 800071e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000722:	2100      	movs	r1, #0
 8000724:	b11d      	cbz	r5, 800072e <__udivmoddi4+0xa2>
 8000726:	40f4      	lsrs	r4, r6
 8000728:	2300      	movs	r3, #0
 800072a:	e9c5 4300 	strd	r4, r3, [r5]
 800072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000732:	428b      	cmp	r3, r1
 8000734:	d908      	bls.n	8000748 <__udivmoddi4+0xbc>
 8000736:	2d00      	cmp	r5, #0
 8000738:	f000 80f2 	beq.w	8000920 <__udivmoddi4+0x294>
 800073c:	2100      	movs	r1, #0
 800073e:	e9c5 0c00 	strd	r0, ip, [r5]
 8000742:	4608      	mov	r0, r1
 8000744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000748:	fab3 f183 	clz	r1, r3
 800074c:	2900      	cmp	r1, #0
 800074e:	d14e      	bne.n	80007ee <__udivmoddi4+0x162>
 8000750:	4563      	cmp	r3, ip
 8000752:	f0c0 80e8 	bcc.w	8000926 <__udivmoddi4+0x29a>
 8000756:	4282      	cmp	r2, r0
 8000758:	f240 80e5 	bls.w	8000926 <__udivmoddi4+0x29a>
 800075c:	4608      	mov	r0, r1
 800075e:	2d00      	cmp	r5, #0
 8000760:	d0e5      	beq.n	800072e <__udivmoddi4+0xa2>
 8000762:	e9c5 4a00 	strd	r4, sl, [r5]
 8000766:	e7e2      	b.n	800072e <__udivmoddi4+0xa2>
 8000768:	b902      	cbnz	r2, 800076c <__udivmoddi4+0xe0>
 800076a:	deff      	udf	#255	; 0xff
 800076c:	fab2 f682 	clz	r6, r2
 8000770:	2e00      	cmp	r6, #0
 8000772:	f040 8099 	bne.w	80008a8 <__udivmoddi4+0x21c>
 8000776:	1a8b      	subs	r3, r1, r2
 8000778:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800077c:	fa1f f882 	uxth.w	r8, r2
 8000780:	2101      	movs	r1, #1
 8000782:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000786:	fbb3 f2fe 	udiv	r2, r3, lr
 800078a:	fb0e 3012 	mls	r0, lr, r2, r3
 800078e:	fb08 f902 	mul.w	r9, r8, r2
 8000792:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8000796:	45e1      	cmp	r9, ip
 8000798:	d908      	bls.n	80007ac <__udivmoddi4+0x120>
 800079a:	eb17 0c0c 	adds.w	ip, r7, ip
 800079e:	f102 33ff 	add.w	r3, r2, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x11e>
 80007a4:	45e1      	cmp	r9, ip
 80007a6:	f200 80ca 	bhi.w	800093e <__udivmoddi4+0x2b2>
 80007aa:	461a      	mov	r2, r3
 80007ac:	ebac 0c09 	sub.w	ip, ip, r9
 80007b0:	b2a3      	uxth	r3, r4
 80007b2:	fbbc f0fe 	udiv	r0, ip, lr
 80007b6:	fb0e cc10 	mls	ip, lr, r0, ip
 80007ba:	fb08 f800 	mul.w	r8, r8, r0
 80007be:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 80007c2:	45a0      	cmp	r8, r4
 80007c4:	d90e      	bls.n	80007e4 <__udivmoddi4+0x158>
 80007c6:	193c      	adds	r4, r7, r4
 80007c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007cc:	bf2c      	ite	cs
 80007ce:	f04f 0c01 	movcs.w	ip, #1
 80007d2:	f04f 0c00 	movcc.w	ip, #0
 80007d6:	45a0      	cmp	r8, r4
 80007d8:	d903      	bls.n	80007e2 <__udivmoddi4+0x156>
 80007da:	f1bc 0f00 	cmp.w	ip, #0
 80007de:	f000 80a8 	beq.w	8000932 <__udivmoddi4+0x2a6>
 80007e2:	4618      	mov	r0, r3
 80007e4:	eba4 0408 	sub.w	r4, r4, r8
 80007e8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80007ec:	e79a      	b.n	8000724 <__udivmoddi4+0x98>
 80007ee:	f1c1 0420 	rsb	r4, r1, #32
 80007f2:	408b      	lsls	r3, r1
 80007f4:	fa02 fe01 	lsl.w	lr, r2, r1
 80007f8:	fa0c f601 	lsl.w	r6, ip, r1
 80007fc:	40e2      	lsrs	r2, r4
 80007fe:	fa20 f704 	lsr.w	r7, r0, r4
 8000802:	fa2c fc04 	lsr.w	ip, ip, r4
 8000806:	fa00 f801 	lsl.w	r8, r0, r1
 800080a:	4313      	orrs	r3, r2
 800080c:	433e      	orrs	r6, r7
 800080e:	0c1f      	lsrs	r7, r3, #16
 8000810:	0c32      	lsrs	r2, r6, #16
 8000812:	fa1f f983 	uxth.w	r9, r3
 8000816:	fbbc f0f7 	udiv	r0, ip, r7
 800081a:	fb07 cc10 	mls	ip, r7, r0, ip
 800081e:	fb00 fa09 	mul.w	sl, r0, r9
 8000822:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000826:	45e2      	cmp	sl, ip
 8000828:	d908      	bls.n	800083c <__udivmoddi4+0x1b0>
 800082a:	eb13 0c0c 	adds.w	ip, r3, ip
 800082e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000832:	d202      	bcs.n	800083a <__udivmoddi4+0x1ae>
 8000834:	45e2      	cmp	sl, ip
 8000836:	f200 8089 	bhi.w	800094c <__udivmoddi4+0x2c0>
 800083a:	4610      	mov	r0, r2
 800083c:	ebac 0c0a 	sub.w	ip, ip, sl
 8000840:	b2b6      	uxth	r6, r6
 8000842:	fbbc faf7 	udiv	sl, ip, r7
 8000846:	fb07 cc1a 	mls	ip, r7, sl, ip
 800084a:	fb0a f909 	mul.w	r9, sl, r9
 800084e:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 8000852:	4591      	cmp	r9, r2
 8000854:	d906      	bls.n	8000864 <__udivmoddi4+0x1d8>
 8000856:	189a      	adds	r2, r3, r2
 8000858:	f10a 36ff 	add.w	r6, sl, #4294967295
 800085c:	d201      	bcs.n	8000862 <__udivmoddi4+0x1d6>
 800085e:	4591      	cmp	r9, r2
 8000860:	d87a      	bhi.n	8000958 <__udivmoddi4+0x2cc>
 8000862:	46b2      	mov	sl, r6
 8000864:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8000868:	eba2 0209 	sub.w	r2, r2, r9
 800086c:	fba0 670e 	umull	r6, r7, r0, lr
 8000870:	42ba      	cmp	r2, r7
 8000872:	46b4      	mov	ip, r6
 8000874:	46b9      	mov	r9, r7
 8000876:	d302      	bcc.n	800087e <__udivmoddi4+0x1f2>
 8000878:	d107      	bne.n	800088a <__udivmoddi4+0x1fe>
 800087a:	45b0      	cmp	r8, r6
 800087c:	d205      	bcs.n	800088a <__udivmoddi4+0x1fe>
 800087e:	ebb6 0c0e 	subs.w	ip, r6, lr
 8000882:	eb67 0303 	sbc.w	r3, r7, r3
 8000886:	3801      	subs	r0, #1
 8000888:	4699      	mov	r9, r3
 800088a:	2d00      	cmp	r5, #0
 800088c:	d06b      	beq.n	8000966 <__udivmoddi4+0x2da>
 800088e:	ebb8 030c 	subs.w	r3, r8, ip
 8000892:	eb62 0209 	sbc.w	r2, r2, r9
 8000896:	fa02 f404 	lsl.w	r4, r2, r4
 800089a:	40cb      	lsrs	r3, r1
 800089c:	40ca      	lsrs	r2, r1
 800089e:	2100      	movs	r1, #0
 80008a0:	431c      	orrs	r4, r3
 80008a2:	e9c5 4200 	strd	r4, r2, [r5]
 80008a6:	e742      	b.n	800072e <__udivmoddi4+0xa2>
 80008a8:	40b7      	lsls	r7, r6
 80008aa:	f1c6 0220 	rsb	r2, r6, #32
 80008ae:	fa01 f306 	lsl.w	r3, r1, r6
 80008b2:	40b4      	lsls	r4, r6
 80008b4:	fa21 fc02 	lsr.w	ip, r1, r2
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	fa20 f202 	lsr.w	r2, r0, r2
 80008c0:	fa1f f887 	uxth.w	r8, r7
 80008c4:	fbbc f1fe 	udiv	r1, ip, lr
 80008c8:	431a      	orrs	r2, r3
 80008ca:	fb0e cc11 	mls	ip, lr, r1, ip
 80008ce:	fb01 f008 	mul.w	r0, r1, r8
 80008d2:	0c13      	lsrs	r3, r2, #16
 80008d4:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80008d8:	4560      	cmp	r0, ip
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x260>
 80008dc:	eb17 0c0c 	adds.w	ip, r7, ip
 80008e0:	f101 33ff 	add.w	r3, r1, #4294967295
 80008e4:	d201      	bcs.n	80008ea <__udivmoddi4+0x25e>
 80008e6:	4560      	cmp	r0, ip
 80008e8:	d833      	bhi.n	8000952 <__udivmoddi4+0x2c6>
 80008ea:	4619      	mov	r1, r3
 80008ec:	ebac 0c00 	sub.w	ip, ip, r0
 80008f0:	b292      	uxth	r2, r2
 80008f2:	fbbc f0fe 	udiv	r0, ip, lr
 80008f6:	fb0e cc10 	mls	ip, lr, r0, ip
 80008fa:	fb00 f308 	mul.w	r3, r0, r8
 80008fe:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000902:	4563      	cmp	r3, ip
 8000904:	d907      	bls.n	8000916 <__udivmoddi4+0x28a>
 8000906:	eb17 0c0c 	adds.w	ip, r7, ip
 800090a:	f100 32ff 	add.w	r2, r0, #4294967295
 800090e:	d201      	bcs.n	8000914 <__udivmoddi4+0x288>
 8000910:	4563      	cmp	r3, ip
 8000912:	d825      	bhi.n	8000960 <__udivmoddi4+0x2d4>
 8000914:	4610      	mov	r0, r2
 8000916:	ebac 0303 	sub.w	r3, ip, r3
 800091a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091e:	e730      	b.n	8000782 <__udivmoddi4+0xf6>
 8000920:	4629      	mov	r1, r5
 8000922:	4628      	mov	r0, r5
 8000924:	e703      	b.n	800072e <__udivmoddi4+0xa2>
 8000926:	1a84      	subs	r4, r0, r2
 8000928:	eb6c 0303 	sbc.w	r3, ip, r3
 800092c:	2001      	movs	r0, #1
 800092e:	469a      	mov	sl, r3
 8000930:	e715      	b.n	800075e <__udivmoddi4+0xd2>
 8000932:	3802      	subs	r0, #2
 8000934:	443c      	add	r4, r7
 8000936:	e755      	b.n	80007e4 <__udivmoddi4+0x158>
 8000938:	3802      	subs	r0, #2
 800093a:	443c      	add	r4, r7
 800093c:	e6ed      	b.n	800071a <__udivmoddi4+0x8e>
 800093e:	3a02      	subs	r2, #2
 8000940:	44bc      	add	ip, r7
 8000942:	e733      	b.n	80007ac <__udivmoddi4+0x120>
 8000944:	f1ae 0e02 	sub.w	lr, lr, #2
 8000948:	443b      	add	r3, r7
 800094a:	e6d2      	b.n	80006f2 <__udivmoddi4+0x66>
 800094c:	3802      	subs	r0, #2
 800094e:	449c      	add	ip, r3
 8000950:	e774      	b.n	800083c <__udivmoddi4+0x1b0>
 8000952:	3902      	subs	r1, #2
 8000954:	44bc      	add	ip, r7
 8000956:	e7c9      	b.n	80008ec <__udivmoddi4+0x260>
 8000958:	f1aa 0a02 	sub.w	sl, sl, #2
 800095c:	441a      	add	r2, r3
 800095e:	e781      	b.n	8000864 <__udivmoddi4+0x1d8>
 8000960:	3802      	subs	r0, #2
 8000962:	44bc      	add	ip, r7
 8000964:	e7d7      	b.n	8000916 <__udivmoddi4+0x28a>
 8000966:	4629      	mov	r1, r5
 8000968:	e6e1      	b.n	800072e <__udivmoddi4+0xa2>
 800096a:	bf00      	nop

0800096c <__aeabi_idiv0>:
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <MX_BlueNRG_MS_Init+0x138>)
 8000978:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 800097a:	f000 f8a9 	bl	8000ad0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800097e:	2000      	movs	r0, #0
 8000980:	f002 fd0e 	bl	80033a0 <BSP_PB_GetState>
 8000984:	4603      	mov	r3, r0
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b48      	ldr	r3, [pc, #288]	; (8000aac <MX_BlueNRG_MS_Init+0x13c>)
 800098a:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 800098c:	2100      	movs	r1, #0
 800098e:	4848      	ldr	r0, [pc, #288]	; (8000ab0 <MX_BlueNRG_MS_Init+0x140>)
 8000990:	f008 fc16 	bl	80091c0 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000994:	1dba      	adds	r2, r7, #6
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f008 fa86 	bl	8008eae <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009a2:	f008 fac8 	bl	8008f36 <hci_reset>
  HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f002 feb4 	bl	8003714 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009ac:	7a3b      	ldrb	r3, [r7, #8]
 80009ae:	2b30      	cmp	r3, #48	; 0x30
 80009b0:	d902      	bls.n	80009b8 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <MX_BlueNRG_MS_Init+0x144>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009b8:	f107 0209 	add.w	r2, r7, #9
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_BlueNRG_MS_Init+0x148>)
 80009be:	2106      	movs	r1, #6
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	f008 f9f0 	bl	8008da6 <aci_hal_read_config_data>
 80009c6:	4603      	mov	r3, r0
 80009c8:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_BlueNRG_MS_Init+0x148>)
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80009d2:	2bc0      	cmp	r3, #192	; 0xc0
 80009d4:	d000      	beq.n	80009d8 <MX_BlueNRG_MS_Init+0x68>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 80009d6:	e7fe      	b.n	80009d6 <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 80009d8:	f007 ffa4 	bl	8008924 <aci_gatt_init>
 80009dc:	4603      	mov	r3, r0
 80009de:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_BlueNRG_MS_Init+0x144>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d110      	bne.n	8000a0a <MX_BlueNRG_MS_Init+0x9a>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80009e8:	f107 020e 	add.w	r2, r7, #14
 80009ec:	f107 030a 	add.w	r3, r7, #10
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4613      	mov	r3, r2
 80009fa:	2207      	movs	r2, #7
 80009fc:	2100      	movs	r1, #0
 80009fe:	2001      	movs	r0, #1
 8000a00:	f007 fd5e 	bl	80084c0 <aci_gap_init_IDB05A1>
 8000a04:	4603      	mov	r3, r0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e00a      	b.n	8000a20 <MX_BlueNRG_MS_Init+0xb0>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a0a:	f107 030a 	add.w	r3, r7, #10
 8000a0e:	f107 020c 	add.w	r2, r7, #12
 8000a12:	f107 010e 	add.w	r1, r7, #14
 8000a16:	2001      	movs	r0, #1
 8000a18:	f007 fda2 	bl	8008560 <aci_gap_init_IDB04A1>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a20:	89fc      	ldrh	r4, [r7, #14]
 8000a22:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a24:	6978      	ldr	r0, [r7, #20]
 8000a26:	f7ff fc05 	bl	8000234 <strlen>
 8000a2a:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	4613      	mov	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	4629      	mov	r1, r5
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f008 f8f4 	bl	8008c26 <aci_gatt_update_char_value>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d000      	beq.n	8000a4a <MX_BlueNRG_MS_Init+0xda>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000a48:	e7fe      	b.n	8000a48 <MX_BlueNRG_MS_Init+0xd8>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9303      	str	r3, [sp, #12]
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_BlueNRG_MS_Init+0x14c>)
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	2310      	movs	r3, #16
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2001      	movs	r0, #1
 8000a62:	f007 feb6 	bl	80087d2 <aci_gap_set_auth_requirement>
 8000a66:	4603      	mov	r3, r0
 8000a68:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d000      	beq.n	8000a72 <MX_BlueNRG_MS_Init+0x102>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000a70:	e7fe      	b.n	8000a70 <MX_BlueNRG_MS_Init+0x100>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000a72:	f000 ff39 	bl	80018e8 <Add_HWServW2ST_Service>
 8000a76:	4603      	mov	r3, r0
 8000a78:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d000      	beq.n	8000a82 <MX_BlueNRG_MS_Init+0x112>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000a80:	e7fe      	b.n	8000a80 <MX_BlueNRG_MS_Init+0x110>
  }

  ret = Add_SWServW2ST_Service();
 8000a82:	f001 f809 	bl	8001a98 <Add_SWServW2ST_Service>
 8000a86:	4603      	mov	r3, r0
 8000a88:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d000      	beq.n	8000a92 <MX_BlueNRG_MS_Init+0x122>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000a90:	e7fe      	b.n	8000a90 <MX_BlueNRG_MS_Init+0x120>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000a92:	2104      	movs	r1, #4
 8000a94:	2001      	movs	r0, #1
 8000a96:	f008 f9d9 	bl	8008e4c <aci_hal_set_tx_power_level>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	080099e0 	.word	0x080099e0
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	08002055 	.word	0x08002055
 8000ab4:	200000a8 	.word	0x200000a8
 8000ab8:	200004d4 	.word	0x200004d4
 8000abc:	0001e240 	.word	0x0001e240

08000ac0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000ac4:	f000 f812 	bl	8000aec <User_Process>
  hci_user_evt_proc();
 8000ac8:	f008 fcf4 	bl	80094b4 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f002 fc08 	bl	80032ec <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f002 fb9f 	bl	8003220 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f002 fcca 	bl	800347c <BSP_COM_Init>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <User_Process+0xb8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d004      	beq.n	8000b06 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000afc:	f001 fa36 	bl	8001f6c <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <User_Process+0xb8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f002 fb9c 	bl	8003244 <BSP_LED_Toggle>

    if (connected)
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <User_Process+0xbc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d042      	beq.n	8000b9a <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000b14:	f002 fdf2 	bl	80036fc <HAL_GetTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f008 fe88 	bl	8009830 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000b20:	463a      	mov	r2, r7
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f84c 	bl	8000bc4 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000b2c:	edd7 7a00 	vldr	s15, [r7]
 8000b30:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000bac <User_Process+0xc0>
 8000b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b38:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b4c:	ee17 3a90 	vmov	r3, s15
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	ee16 0a90 	vmov	r0, s13
 8000b58:	f001 f9c2 	bl	8001ee0 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <User_Process+0xc4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f8a9 	bl	8000cb8 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <User_Process+0xc8>)
 8000b68:	4913      	ldr	r1, [pc, #76]	; (8000bb8 <User_Process+0xcc>)
 8000b6a:	4814      	ldr	r0, [pc, #80]	; (8000bbc <User_Process+0xd0>)
 8000b6c:	f001 f828 	bl	8001bc0 <Acc_Update>
      Quat_Update(&q_axes);
 8000b70:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <User_Process+0xd4>)
 8000b72:	f001 f8af 	bl	8001cd4 <Quat_Update>

      counter ++;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <User_Process+0xc4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <User_Process+0xc4>)
 8000b7e:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <User_Process+0xc4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b28      	cmp	r3, #40	; 0x28
 8000b86:	d104      	bne.n	8000b92 <User_Process+0xa6>
        counter = 0;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <User_Process+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000b8e:	f000 fdb1 	bl	80016f4 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b96:	f002 fdbd 	bl	8003714 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000001 	.word	0x20000001
 8000ba8:	200000b4 	.word	0x200000b4
 8000bac:	42c80000 	.word	0x42c80000
 8000bb0:	200000ac 	.word	0x200000ac
 8000bb4:	200000d0 	.word	0x200000d0
 8000bb8:	200000c4 	.word	0x200000c4
 8000bbc:	200000b8 	.word	0x200000b8
 8000bc0:	200000dc 	.word	0x200000dc

08000bc4 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000bce:	f008 fe53 	bl	8009878 <rand>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000bda:	4629      	mov	r1, r5
 8000bdc:	4632      	mov	r2, r6
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	f04f 0400 	mov.w	r4, #0
 8000be6:	0094      	lsls	r4, r2, #2
 8000be8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000bec:	008b      	lsls	r3, r1, #2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4622      	mov	r2, r4
 8000bf2:	194b      	adds	r3, r1, r5
 8000bf4:	eb42 0406 	adc.w	r4, r2, r6
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	f7ff fd2a 	bl	800065c <__aeabi_uldivmod>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	4621      	mov	r1, r4
 8000c10:	f7ff fc9e 	bl	8000550 <__aeabi_ul2d>
 8000c14:	f04f 0200 	mov.w	r2, #0
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <Set_Random_Environmental_Values+0xec>)
 8000c1a:	f7ff fb19 	bl	8000250 <__adddf3>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460c      	mov	r4, r1
 8000c22:	4618      	mov	r0, r3
 8000c24:	4621      	mov	r1, r4
 8000c26:	f7ff fcc9 	bl	80005bc <__aeabi_d2f>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000c30:	f008 fe22 	bl	8009878 <rand>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461d      	mov	r5, r3
 8000c38:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000c3c:	462b      	mov	r3, r5
 8000c3e:	4634      	mov	r4, r6
 8000c40:	f04f 0100 	mov.w	r1, #0
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	00a2      	lsls	r2, r4, #2
 8000c4a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000c4e:	0099      	lsls	r1, r3, #2
 8000c50:	460b      	mov	r3, r1
 8000c52:	4614      	mov	r4, r2
 8000c54:	195b      	adds	r3, r3, r5
 8000c56:	eb44 0406 	adc.w	r4, r4, r6
 8000c5a:	f04f 0100 	mov.w	r1, #0
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	0122      	lsls	r2, r4, #4
 8000c64:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8000c68:	0119      	lsls	r1, r3, #4
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	4621      	mov	r1, r4
 8000c72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	f7ff fcef 	bl	800065c <__aeabi_uldivmod>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460c      	mov	r4, r1
 8000c82:	4618      	mov	r0, r3
 8000c84:	4621      	mov	r1, r4
 8000c86:	f7ff fc63 	bl	8000550 <__aeabi_ul2d>
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <Set_Random_Environmental_Values+0xf0>)
 8000c90:	f7ff fade 	bl	8000250 <__adddf3>
 8000c94:	4603      	mov	r3, r0
 8000c96:	460c      	mov	r4, r1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	f7ff fc8e 	bl	80005bc <__aeabi_d2f>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	601a      	str	r2, [r3, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	403b0000 	.word	0x403b0000
 8000cb4:	408f4000 	.word	0x408f4000

08000cb8 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b13      	cmp	r3, #19
 8000cc4:	f200 827c 	bhi.w	80011c0 <Set_Random_Motion_Values+0x508>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000cc8:	f008 fdd6 	bl	8009878 <rand>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f04f 0400 	mov.w	r4, #0
 8000cda:	fb03 f502 	mul.w	r5, r3, r2
 8000cde:	fb01 f004 	mul.w	r0, r1, r4
 8000ce2:	4428      	add	r0, r5
 8000ce4:	fba1 3403 	umull	r3, r4, r1, r3
 8000ce8:	1902      	adds	r2, r0, r4
 8000cea:	4614      	mov	r4, r2
 8000cec:	461d      	mov	r5, r3
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1969      	adds	r1, r5, r5
 8000cf2:	eb46 0206 	adc.w	r2, r6, r6
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	4616      	mov	r6, r2
 8000cfa:	18e8      	adds	r0, r5, r3
 8000cfc:	eb46 0104 	adc.w	r1, r6, r4
 8000d00:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	f7ff fca8 	bl	800065c <__aeabi_uldivmod>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4619      	mov	r1, r3
 8000d12:	4622      	mov	r2, r4
 8000d14:	f111 030a 	adds.w	r3, r1, #10
 8000d18:	f142 0400 	adc.w	r4, r2, #0
 8000d1c:	4ae0      	ldr	r2, [pc, #896]	; (80010a0 <Set_Random_Motion_Values+0x3e8>)
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	461a      	mov	r2, r3
 8000d24:	4bde      	ldr	r3, [pc, #888]	; (80010a0 <Set_Random_Motion_Values+0x3e8>)
 8000d26:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000d28:	f008 fda6 	bl	8009878 <rand>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f04f 0400 	mov.w	r4, #0
 8000d3a:	fb03 f502 	mul.w	r5, r3, r2
 8000d3e:	fb01 f004 	mul.w	r0, r1, r4
 8000d42:	4428      	add	r0, r5
 8000d44:	fba1 5603 	umull	r5, r6, r1, r3
 8000d48:	1983      	adds	r3, r0, r6
 8000d4a:	461e      	mov	r6, r3
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	4632      	mov	r2, r6
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	f04f 0400 	mov.w	r4, #0
 8000d58:	0094      	lsls	r4, r2, #2
 8000d5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000d5e:	008b      	lsls	r3, r1, #2
 8000d60:	4619      	mov	r1, r3
 8000d62:	4622      	mov	r2, r4
 8000d64:	194b      	adds	r3, r1, r5
 8000d66:	eb42 0406 	adc.w	r4, r2, r6
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	f7ff fc71 	bl	800065c <__aeabi_uldivmod>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460c      	mov	r4, r1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4622      	mov	r2, r4
 8000d82:	f06f 0309 	mvn.w	r3, #9
 8000d86:	f04f 34ff 	mov.w	r4, #4294967295
 8000d8a:	1a5b      	subs	r3, r3, r1
 8000d8c:	eb64 0402 	sbc.w	r4, r4, r2
 8000d90:	461d      	mov	r5, r3
 8000d92:	4626      	mov	r6, r4
 8000d94:	4ac2      	ldr	r2, [pc, #776]	; (80010a0 <Set_Random_Motion_Values+0x3e8>)
 8000d96:	6852      	ldr	r2, [r2, #4]
 8000d98:	462b      	mov	r3, r5
 8000d9a:	4413      	add	r3, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4bc0      	ldr	r3, [pc, #768]	; (80010a0 <Set_Random_Motion_Values+0x3e8>)
 8000da0:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000da2:	f008 fd69 	bl	8009878 <rand>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f04f 0400 	mov.w	r4, #0
 8000db4:	fb03 f502 	mul.w	r5, r3, r2
 8000db8:	fb01 f004 	mul.w	r0, r1, r4
 8000dbc:	4428      	add	r0, r5
 8000dbe:	fba1 5603 	umull	r5, r6, r1, r3
 8000dc2:	1983      	adds	r3, r0, r6
 8000dc4:	461e      	mov	r6, r3
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	4632      	mov	r2, r6
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	f04f 0400 	mov.w	r4, #0
 8000dd2:	00d4      	lsls	r4, r2, #3
 8000dd4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000dd8:	00cb      	lsls	r3, r1, #3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4622      	mov	r2, r4
 8000dde:	1b49      	subs	r1, r1, r5
 8000de0:	eb62 0206 	sbc.w	r2, r2, r6
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	f7ff fc34 	bl	800065c <__aeabi_uldivmod>
 8000df4:	4603      	mov	r3, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	f111 030a 	adds.w	r3, r1, #10
 8000e00:	f142 0400 	adc.w	r4, r2, #0
 8000e04:	4aa6      	ldr	r2, [pc, #664]	; (80010a0 <Set_Random_Motion_Values+0x3e8>)
 8000e06:	6892      	ldr	r2, [r2, #8]
 8000e08:	4413      	add	r3, r2
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4ba4      	ldr	r3, [pc, #656]	; (80010a0 <Set_Random_Motion_Values+0x3e8>)
 8000e0e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000e10:	f008 fd32 	bl	8009878 <rand>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4619      	mov	r1, r3
 8000e18:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f04f 0400 	mov.w	r4, #0
 8000e22:	fb03 f502 	mul.w	r5, r3, r2
 8000e26:	fb01 f004 	mul.w	r0, r1, r4
 8000e2a:	4428      	add	r0, r5
 8000e2c:	fba1 5603 	umull	r5, r6, r1, r3
 8000e30:	1982      	adds	r2, r0, r6
 8000e32:	4616      	mov	r6, r2
 8000e34:	196b      	adds	r3, r5, r5
 8000e36:	eb46 0406 	adc.w	r4, r6, r6
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	f7ff fc09 	bl	800065c <__aeabi_uldivmod>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4622      	mov	r2, r4
 8000e52:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8000e56:	f142 0400 	adc.w	r4, r2, #0
 8000e5a:	4a92      	ldr	r2, [pc, #584]	; (80010a4 <Set_Random_Motion_Values+0x3ec>)
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b90      	ldr	r3, [pc, #576]	; (80010a4 <Set_Random_Motion_Values+0x3ec>)
 8000e64:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000e66:	f008 fd07 	bl	8009878 <rand>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f04f 0400 	mov.w	r4, #0
 8000e78:	fb03 f502 	mul.w	r5, r3, r2
 8000e7c:	fb01 f004 	mul.w	r0, r1, r4
 8000e80:	4428      	add	r0, r5
 8000e82:	fba1 3403 	umull	r3, r4, r1, r3
 8000e86:	1902      	adds	r2, r0, r4
 8000e88:	4614      	mov	r4, r2
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	f04f 0100 	mov.w	r1, #0
 8000e92:	00a1      	lsls	r1, r4, #2
 8000e94:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8000e98:	0098      	lsls	r0, r3, #2
 8000e9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	f7ff fbdb 	bl	800065c <__aeabi_uldivmod>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460c      	mov	r4, r1
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4622      	mov	r2, r4
 8000eae:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000eb2:	f04f 34ff 	mov.w	r4, #4294967295
 8000eb6:	1a5b      	subs	r3, r3, r1
 8000eb8:	eb64 0402 	sbc.w	r4, r4, r2
 8000ebc:	461d      	mov	r5, r3
 8000ebe:	4626      	mov	r6, r4
 8000ec0:	4a78      	ldr	r2, [pc, #480]	; (80010a4 <Set_Random_Motion_Values+0x3ec>)
 8000ec2:	6852      	ldr	r2, [r2, #4]
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	4413      	add	r3, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b76      	ldr	r3, [pc, #472]	; (80010a4 <Set_Random_Motion_Values+0x3ec>)
 8000ecc:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8000ece:	f008 fcd3 	bl	8009878 <rand>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f04f 0400 	mov.w	r4, #0
 8000ee0:	fb03 f502 	mul.w	r5, r3, r2
 8000ee4:	fb01 f004 	mul.w	r0, r1, r4
 8000ee8:	4428      	add	r0, r5
 8000eea:	fba1 1203 	umull	r1, r2, r1, r3
 8000eee:	1883      	adds	r3, r0, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	460d      	mov	r5, r1
 8000ef4:	4616      	mov	r6, r2
 8000ef6:	196b      	adds	r3, r5, r5
 8000ef8:	eb46 0406 	adc.w	r4, r6, r6
 8000efc:	461d      	mov	r5, r3
 8000efe:	4626      	mov	r6, r4
 8000f00:	186d      	adds	r5, r5, r1
 8000f02:	eb46 0602 	adc.w	r6, r6, r2
 8000f06:	196b      	adds	r3, r5, r5
 8000f08:	eb46 0406 	adc.w	r4, r6, r6
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	4626      	mov	r6, r4
 8000f10:	4628      	mov	r0, r5
 8000f12:	4631      	mov	r1, r6
 8000f14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f7ff fb9e 	bl	800065c <__aeabi_uldivmod>
 8000f20:	4603      	mov	r3, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	4619      	mov	r1, r3
 8000f26:	4622      	mov	r2, r4
 8000f28:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8000f2c:	f142 0400 	adc.w	r4, r2, #0
 8000f30:	4a5c      	ldr	r2, [pc, #368]	; (80010a4 <Set_Random_Motion_Values+0x3ec>)
 8000f32:	6892      	ldr	r2, [r2, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b5a      	ldr	r3, [pc, #360]	; (80010a4 <Set_Random_Motion_Values+0x3ec>)
 8000f3a:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000f3c:	f008 fc9c 	bl	8009878 <rand>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4619      	mov	r1, r3
 8000f44:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f04f 0400 	mov.w	r4, #0
 8000f4e:	fb03 f502 	mul.w	r5, r3, r2
 8000f52:	fb01 f004 	mul.w	r0, r1, r4
 8000f56:	4428      	add	r0, r5
 8000f58:	fba1 3403 	umull	r3, r4, r1, r3
 8000f5c:	1902      	adds	r2, r0, r4
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	4626      	mov	r6, r4
 8000f64:	1969      	adds	r1, r5, r5
 8000f66:	eb46 0206 	adc.w	r2, r6, r6
 8000f6a:	460d      	mov	r5, r1
 8000f6c:	4616      	mov	r6, r2
 8000f6e:	18e8      	adds	r0, r5, r3
 8000f70:	eb46 0104 	adc.w	r1, r6, r4
 8000f74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	f7ff fb6e 	bl	800065c <__aeabi_uldivmod>
 8000f80:	4603      	mov	r3, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	4619      	mov	r1, r3
 8000f86:	4622      	mov	r2, r4
 8000f88:	1ccb      	adds	r3, r1, #3
 8000f8a:	f142 0400 	adc.w	r4, r2, #0
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <Set_Random_Motion_Values+0x3f0>)
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <Set_Random_Motion_Values+0x3f0>)
 8000f98:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000f9a:	f008 fc6d 	bl	8009878 <rand>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0400 	mov.w	r4, #0
 8000fac:	fb03 f502 	mul.w	r5, r3, r2
 8000fb0:	fb01 f004 	mul.w	r0, r1, r4
 8000fb4:	4428      	add	r0, r5
 8000fb6:	fba1 3403 	umull	r3, r4, r1, r3
 8000fba:	1902      	adds	r2, r0, r4
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	f04f 0100 	mov.w	r1, #0
 8000fc6:	00a1      	lsls	r1, r4, #2
 8000fc8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8000fcc:	0098      	lsls	r0, r3, #2
 8000fce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	f7ff fb41 	bl	800065c <__aeabi_uldivmod>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4622      	mov	r2, r4
 8000fe2:	f06f 0302 	mvn.w	r3, #2
 8000fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8000fea:	1a5b      	subs	r3, r3, r1
 8000fec:	eb64 0402 	sbc.w	r4, r4, r2
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	4626      	mov	r6, r4
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <Set_Random_Motion_Values+0x3f0>)
 8000ff6:	6852      	ldr	r2, [r2, #4]
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	4413      	add	r3, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <Set_Random_Motion_Values+0x3f0>)
 8001000:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001002:	f008 fc39 	bl	8009878 <rand>
 8001006:	4603      	mov	r3, r0
 8001008:	4619      	mov	r1, r3
 800100a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f04f 0400 	mov.w	r4, #0
 8001014:	fb03 f502 	mul.w	r5, r3, r2
 8001018:	fb01 f004 	mul.w	r0, r1, r4
 800101c:	4428      	add	r0, r5
 800101e:	fba1 5603 	umull	r5, r6, r1, r3
 8001022:	1983      	adds	r3, r0, r6
 8001024:	461e      	mov	r6, r3
 8001026:	4629      	mov	r1, r5
 8001028:	4632      	mov	r2, r6
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f04f 0400 	mov.w	r4, #0
 8001032:	0094      	lsls	r4, r2, #2
 8001034:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001038:	008b      	lsls	r3, r1, #2
 800103a:	4619      	mov	r1, r3
 800103c:	4622      	mov	r2, r4
 800103e:	194b      	adds	r3, r1, r5
 8001040:	eb42 0406 	adc.w	r4, r2, r6
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	f7ff fb04 	bl	800065c <__aeabi_uldivmod>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4619      	mov	r1, r3
 800105a:	4622      	mov	r2, r4
 800105c:	1ccb      	adds	r3, r1, #3
 800105e:	f142 0400 	adc.w	r4, r2, #0
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <Set_Random_Motion_Values+0x3f0>)
 8001064:	6892      	ldr	r2, [r2, #8]
 8001066:	4413      	add	r3, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <Set_Random_Motion_Values+0x3f0>)
 800106c:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800106e:	f008 fc03 	bl	8009878 <rand>
 8001072:	4603      	mov	r3, r0
 8001074:	4619      	mov	r1, r3
 8001076:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0400 	mov.w	r4, #0
 8001080:	fb03 f502 	mul.w	r5, r3, r2
 8001084:	fb01 f004 	mul.w	r0, r1, r4
 8001088:	4428      	add	r0, r5
 800108a:	fba1 3403 	umull	r3, r4, r1, r3
 800108e:	1902      	adds	r2, r0, r4
 8001090:	4614      	mov	r4, r2
 8001092:	461d      	mov	r5, r3
 8001094:	4626      	mov	r6, r4
 8001096:	1969      	adds	r1, r5, r5
 8001098:	eb46 0206 	adc.w	r2, r6, r6
 800109c:	e006      	b.n	80010ac <Set_Random_Motion_Values+0x3f4>
 800109e:	bf00      	nop
 80010a0:	200000b8 	.word	0x200000b8
 80010a4:	200000c4 	.word	0x200000c4
 80010a8:	200000d0 	.word	0x200000d0
 80010ac:	460d      	mov	r5, r1
 80010ae:	4616      	mov	r6, r2
 80010b0:	18e8      	adds	r0, r5, r3
 80010b2:	eb46 0104 	adc.w	r1, r6, r4
 80010b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	f7ff facd 	bl	800065c <__aeabi_uldivmod>
 80010c2:	4603      	mov	r3, r0
 80010c4:	460c      	mov	r4, r1
 80010c6:	4619      	mov	r1, r3
 80010c8:	4622      	mov	r2, r4
 80010ca:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80010ce:	f142 0400 	adc.w	r4, r2, #0
 80010d2:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <Set_Random_Motion_Values+0x504>)
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <Set_Random_Motion_Values+0x504>)
 80010dc:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80010de:	f008 fbcb 	bl	8009878 <rand>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4619      	mov	r1, r3
 80010e6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f04f 0400 	mov.w	r4, #0
 80010f0:	fb03 f502 	mul.w	r5, r3, r2
 80010f4:	fb01 f004 	mul.w	r0, r1, r4
 80010f8:	4428      	add	r0, r5
 80010fa:	fba1 5603 	umull	r5, r6, r1, r3
 80010fe:	1983      	adds	r3, r0, r6
 8001100:	461e      	mov	r6, r3
 8001102:	4629      	mov	r1, r5
 8001104:	4632      	mov	r2, r6
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	f04f 0400 	mov.w	r4, #0
 800110e:	0094      	lsls	r4, r2, #2
 8001110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001114:	008b      	lsls	r3, r1, #2
 8001116:	4619      	mov	r1, r3
 8001118:	4622      	mov	r2, r4
 800111a:	194b      	adds	r3, r1, r5
 800111c:	eb42 0406 	adc.w	r4, r2, r6
 8001120:	4618      	mov	r0, r3
 8001122:	4621      	mov	r1, r4
 8001124:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f7ff fa96 	bl	800065c <__aeabi_uldivmod>
 8001130:	4603      	mov	r3, r0
 8001132:	460c      	mov	r4, r1
 8001134:	4619      	mov	r1, r3
 8001136:	4622      	mov	r2, r4
 8001138:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 800113c:	f142 0400 	adc.w	r4, r2, #0
 8001140:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <Set_Random_Motion_Values+0x504>)
 8001142:	6852      	ldr	r2, [r2, #4]
 8001144:	4413      	add	r3, r2
 8001146:	461a      	mov	r2, r3
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <Set_Random_Motion_Values+0x504>)
 800114a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800114c:	f008 fb94 	bl	8009878 <rand>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0400 	mov.w	r4, #0
 800115e:	fb03 f502 	mul.w	r5, r3, r2
 8001162:	fb01 f004 	mul.w	r0, r1, r4
 8001166:	4428      	add	r0, r5
 8001168:	fba1 5603 	umull	r5, r6, r1, r3
 800116c:	1983      	adds	r3, r0, r6
 800116e:	461e      	mov	r6, r3
 8001170:	4629      	mov	r1, r5
 8001172:	4632      	mov	r2, r6
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	f04f 0400 	mov.w	r4, #0
 800117c:	00d4      	lsls	r4, r2, #3
 800117e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001182:	00cb      	lsls	r3, r1, #3
 8001184:	4619      	mov	r1, r3
 8001186:	4622      	mov	r2, r4
 8001188:	1b49      	subs	r1, r1, r5
 800118a:	eb62 0206 	sbc.w	r2, r2, r6
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f7ff fa5f 	bl	800065c <__aeabi_uldivmod>
 800119e:	4603      	mov	r3, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	4619      	mov	r1, r3
 80011a4:	4622      	mov	r2, r4
 80011a6:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80011aa:	f142 0400 	adc.w	r4, r2, #0
 80011ae:	4a03      	ldr	r2, [pc, #12]	; (80011bc <Set_Random_Motion_Values+0x504>)
 80011b0:	6892      	ldr	r2, [r2, #8]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b01      	ldr	r3, [pc, #4]	; (80011bc <Set_Random_Motion_Values+0x504>)
 80011b8:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 80011ba:	e295      	b.n	80016e8 <Set_Random_Motion_Values+0xa30>
 80011bc:	200000dc 	.word	0x200000dc
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80011c0:	f008 fb5a 	bl	8009878 <rand>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4619      	mov	r1, r3
 80011c8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	fb03 f502 	mul.w	r5, r3, r2
 80011d6:	fb01 f004 	mul.w	r0, r1, r4
 80011da:	4428      	add	r0, r5
 80011dc:	fba1 3403 	umull	r3, r4, r1, r3
 80011e0:	1902      	adds	r2, r0, r4
 80011e2:	4614      	mov	r4, r2
 80011e4:	461d      	mov	r5, r3
 80011e6:	4626      	mov	r6, r4
 80011e8:	1969      	adds	r1, r5, r5
 80011ea:	eb46 0206 	adc.w	r2, r6, r6
 80011ee:	460d      	mov	r5, r1
 80011f0:	4616      	mov	r6, r2
 80011f2:	18e8      	adds	r0, r5, r3
 80011f4:	eb46 0104 	adc.w	r1, r6, r4
 80011f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	f7ff fa2c 	bl	800065c <__aeabi_uldivmod>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4619      	mov	r1, r3
 800120a:	4622      	mov	r2, r4
 800120c:	f06f 0309 	mvn.w	r3, #9
 8001210:	f04f 34ff 	mov.w	r4, #4294967295
 8001214:	1a5b      	subs	r3, r3, r1
 8001216:	eb64 0402 	sbc.w	r4, r4, r2
 800121a:	461d      	mov	r5, r3
 800121c:	4626      	mov	r6, r4
 800121e:	4ae0      	ldr	r2, [pc, #896]	; (80015a0 <Set_Random_Motion_Values+0x8e8>)
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	462b      	mov	r3, r5
 8001224:	4413      	add	r3, r2
 8001226:	461a      	mov	r2, r3
 8001228:	4bdd      	ldr	r3, [pc, #884]	; (80015a0 <Set_Random_Motion_Values+0x8e8>)
 800122a:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800122c:	f008 fb24 	bl	8009878 <rand>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f04f 0400 	mov.w	r4, #0
 800123e:	fb03 f502 	mul.w	r5, r3, r2
 8001242:	fb01 f004 	mul.w	r0, r1, r4
 8001246:	4428      	add	r0, r5
 8001248:	fba1 5603 	umull	r5, r6, r1, r3
 800124c:	1983      	adds	r3, r0, r6
 800124e:	461e      	mov	r6, r3
 8001250:	4629      	mov	r1, r5
 8001252:	4632      	mov	r2, r6
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	f04f 0400 	mov.w	r4, #0
 800125c:	0094      	lsls	r4, r2, #2
 800125e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001262:	008b      	lsls	r3, r1, #2
 8001264:	4619      	mov	r1, r3
 8001266:	4622      	mov	r2, r4
 8001268:	194b      	adds	r3, r1, r5
 800126a:	eb42 0406 	adc.w	r4, r2, r6
 800126e:	4618      	mov	r0, r3
 8001270:	4621      	mov	r1, r4
 8001272:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f7ff f9ef 	bl	800065c <__aeabi_uldivmod>
 800127e:	4603      	mov	r3, r0
 8001280:	460c      	mov	r4, r1
 8001282:	4619      	mov	r1, r3
 8001284:	4622      	mov	r2, r4
 8001286:	f111 030a 	adds.w	r3, r1, #10
 800128a:	f142 0400 	adc.w	r4, r2, #0
 800128e:	4ac4      	ldr	r2, [pc, #784]	; (80015a0 <Set_Random_Motion_Values+0x8e8>)
 8001290:	6852      	ldr	r2, [r2, #4]
 8001292:	4413      	add	r3, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4bc2      	ldr	r3, [pc, #776]	; (80015a0 <Set_Random_Motion_Values+0x8e8>)
 8001298:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800129a:	f008 faed 	bl	8009878 <rand>
 800129e:	4603      	mov	r3, r0
 80012a0:	4619      	mov	r1, r3
 80012a2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f04f 0400 	mov.w	r4, #0
 80012ac:	fb03 f502 	mul.w	r5, r3, r2
 80012b0:	fb01 f004 	mul.w	r0, r1, r4
 80012b4:	4428      	add	r0, r5
 80012b6:	fba1 5603 	umull	r5, r6, r1, r3
 80012ba:	1983      	adds	r3, r0, r6
 80012bc:	461e      	mov	r6, r3
 80012be:	4629      	mov	r1, r5
 80012c0:	4632      	mov	r2, r6
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	f04f 0400 	mov.w	r4, #0
 80012ca:	00d4      	lsls	r4, r2, #3
 80012cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012d0:	00cb      	lsls	r3, r1, #3
 80012d2:	4619      	mov	r1, r3
 80012d4:	4622      	mov	r2, r4
 80012d6:	1b49      	subs	r1, r1, r5
 80012d8:	eb62 0206 	sbc.w	r2, r2, r6
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	f7ff f9b8 	bl	800065c <__aeabi_uldivmod>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4619      	mov	r1, r3
 80012f2:	4622      	mov	r2, r4
 80012f4:	f06f 0309 	mvn.w	r3, #9
 80012f8:	f04f 34ff 	mov.w	r4, #4294967295
 80012fc:	1a5b      	subs	r3, r3, r1
 80012fe:	eb64 0402 	sbc.w	r4, r4, r2
 8001302:	461d      	mov	r5, r3
 8001304:	4626      	mov	r6, r4
 8001306:	4aa6      	ldr	r2, [pc, #664]	; (80015a0 <Set_Random_Motion_Values+0x8e8>)
 8001308:	6892      	ldr	r2, [r2, #8]
 800130a:	462b      	mov	r3, r5
 800130c:	4413      	add	r3, r2
 800130e:	461a      	mov	r2, r3
 8001310:	4ba3      	ldr	r3, [pc, #652]	; (80015a0 <Set_Random_Motion_Values+0x8e8>)
 8001312:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001314:	f008 fab0 	bl	8009878 <rand>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f04f 0400 	mov.w	r4, #0
 8001326:	fb03 f502 	mul.w	r5, r3, r2
 800132a:	fb01 f004 	mul.w	r0, r1, r4
 800132e:	4428      	add	r0, r5
 8001330:	fba1 5603 	umull	r5, r6, r1, r3
 8001334:	1982      	adds	r2, r0, r6
 8001336:	4616      	mov	r6, r2
 8001338:	196b      	adds	r3, r5, r5
 800133a:	eb46 0406 	adc.w	r4, r6, r6
 800133e:	4618      	mov	r0, r3
 8001340:	4621      	mov	r1, r4
 8001342:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	f7ff f987 	bl	800065c <__aeabi_uldivmod>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	4619      	mov	r1, r3
 8001354:	4622      	mov	r2, r4
 8001356:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800135a:	f04f 34ff 	mov.w	r4, #4294967295
 800135e:	1a5b      	subs	r3, r3, r1
 8001360:	eb64 0402 	sbc.w	r4, r4, r2
 8001364:	461d      	mov	r5, r3
 8001366:	4626      	mov	r6, r4
 8001368:	4a8e      	ldr	r2, [pc, #568]	; (80015a4 <Set_Random_Motion_Values+0x8ec>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	462b      	mov	r3, r5
 800136e:	4413      	add	r3, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <Set_Random_Motion_Values+0x8ec>)
 8001374:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001376:	f008 fa7f 	bl	8009878 <rand>
 800137a:	4603      	mov	r3, r0
 800137c:	4619      	mov	r1, r3
 800137e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f04f 0400 	mov.w	r4, #0
 8001388:	fb03 f502 	mul.w	r5, r3, r2
 800138c:	fb01 f004 	mul.w	r0, r1, r4
 8001390:	4428      	add	r0, r5
 8001392:	fba1 3403 	umull	r3, r4, r1, r3
 8001396:	1902      	adds	r2, r0, r4
 8001398:	4614      	mov	r4, r2
 800139a:	f04f 0000 	mov.w	r0, #0
 800139e:	f04f 0100 	mov.w	r1, #0
 80013a2:	00a1      	lsls	r1, r4, #2
 80013a4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80013a8:	0098      	lsls	r0, r3, #2
 80013aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	f7ff f953 	bl	800065c <__aeabi_uldivmod>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4619      	mov	r1, r3
 80013bc:	4622      	mov	r2, r4
 80013be:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80013c2:	f142 0400 	adc.w	r4, r2, #0
 80013c6:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <Set_Random_Motion_Values+0x8ec>)
 80013c8:	6852      	ldr	r2, [r2, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <Set_Random_Motion_Values+0x8ec>)
 80013d0:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80013d2:	f008 fa51 	bl	8009878 <rand>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0400 	mov.w	r4, #0
 80013e4:	fb03 f502 	mul.w	r5, r3, r2
 80013e8:	fb01 f004 	mul.w	r0, r1, r4
 80013ec:	4428      	add	r0, r5
 80013ee:	fba1 1203 	umull	r1, r2, r1, r3
 80013f2:	1883      	adds	r3, r0, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	460d      	mov	r5, r1
 80013f8:	4616      	mov	r6, r2
 80013fa:	196b      	adds	r3, r5, r5
 80013fc:	eb46 0406 	adc.w	r4, r6, r6
 8001400:	461d      	mov	r5, r3
 8001402:	4626      	mov	r6, r4
 8001404:	186d      	adds	r5, r5, r1
 8001406:	eb46 0602 	adc.w	r6, r6, r2
 800140a:	196b      	adds	r3, r5, r5
 800140c:	eb46 0406 	adc.w	r4, r6, r6
 8001410:	461d      	mov	r5, r3
 8001412:	4626      	mov	r6, r4
 8001414:	4628      	mov	r0, r5
 8001416:	4631      	mov	r1, r6
 8001418:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	f7ff f91c 	bl	800065c <__aeabi_uldivmod>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4619      	mov	r1, r3
 800142a:	4622      	mov	r2, r4
 800142c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001430:	f04f 34ff 	mov.w	r4, #4294967295
 8001434:	1a5b      	subs	r3, r3, r1
 8001436:	eb64 0402 	sbc.w	r4, r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	4626      	mov	r6, r4
 800143e:	4a59      	ldr	r2, [pc, #356]	; (80015a4 <Set_Random_Motion_Values+0x8ec>)
 8001440:	6892      	ldr	r2, [r2, #8]
 8001442:	462b      	mov	r3, r5
 8001444:	4413      	add	r3, r2
 8001446:	461a      	mov	r2, r3
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <Set_Random_Motion_Values+0x8ec>)
 800144a:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800144c:	f008 fa14 	bl	8009878 <rand>
 8001450:	4603      	mov	r3, r0
 8001452:	4619      	mov	r1, r3
 8001454:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f04f 0400 	mov.w	r4, #0
 800145e:	fb03 f502 	mul.w	r5, r3, r2
 8001462:	fb01 f004 	mul.w	r0, r1, r4
 8001466:	4428      	add	r0, r5
 8001468:	fba1 5603 	umull	r5, r6, r1, r3
 800146c:	1983      	adds	r3, r0, r6
 800146e:	461e      	mov	r6, r3
 8001470:	4629      	mov	r1, r5
 8001472:	4632      	mov	r2, r6
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	00d4      	lsls	r4, r2, #3
 800147e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001482:	00cb      	lsls	r3, r1, #3
 8001484:	4619      	mov	r1, r3
 8001486:	4622      	mov	r2, r4
 8001488:	1b49      	subs	r1, r1, r5
 800148a:	eb62 0206 	sbc.w	r2, r2, r6
 800148e:	4608      	mov	r0, r1
 8001490:	4611      	mov	r1, r2
 8001492:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f7ff f8df 	bl	800065c <__aeabi_uldivmod>
 800149e:	4603      	mov	r3, r0
 80014a0:	460c      	mov	r4, r1
 80014a2:	4619      	mov	r1, r3
 80014a4:	4622      	mov	r2, r4
 80014a6:	f06f 0302 	mvn.w	r3, #2
 80014aa:	f04f 34ff 	mov.w	r4, #4294967295
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	eb64 0402 	sbc.w	r4, r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	4626      	mov	r6, r4
 80014b8:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <Set_Random_Motion_Values+0x8f0>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	462b      	mov	r3, r5
 80014be:	4413      	add	r3, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <Set_Random_Motion_Values+0x8f0>)
 80014c4:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 80014c6:	f008 f9d7 	bl	8009878 <rand>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4619      	mov	r1, r3
 80014ce:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f04f 0400 	mov.w	r4, #0
 80014d8:	fb03 f502 	mul.w	r5, r3, r2
 80014dc:	fb01 f004 	mul.w	r0, r1, r4
 80014e0:	4428      	add	r0, r5
 80014e2:	fba1 5603 	umull	r5, r6, r1, r3
 80014e6:	1983      	adds	r3, r0, r6
 80014e8:	461e      	mov	r6, r3
 80014ea:	4629      	mov	r1, r5
 80014ec:	4632      	mov	r2, r6
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	00d4      	lsls	r4, r2, #3
 80014f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80014fc:	00cb      	lsls	r3, r1, #3
 80014fe:	4619      	mov	r1, r3
 8001500:	4622      	mov	r2, r4
 8001502:	194b      	adds	r3, r1, r5
 8001504:	eb42 0406 	adc.w	r4, r2, r6
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff f8a2 	bl	800065c <__aeabi_uldivmod>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4619      	mov	r1, r3
 800151e:	4622      	mov	r2, r4
 8001520:	1ccb      	adds	r3, r1, #3
 8001522:	f142 0400 	adc.w	r4, r2, #0
 8001526:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <Set_Random_Motion_Values+0x8f0>)
 8001528:	6852      	ldr	r2, [r2, #4]
 800152a:	4413      	add	r3, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <Set_Random_Motion_Values+0x8f0>)
 8001530:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001532:	f008 f9a1 	bl	8009878 <rand>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0400 	mov.w	r4, #0
 8001544:	fb03 f502 	mul.w	r5, r3, r2
 8001548:	fb01 f004 	mul.w	r0, r1, r4
 800154c:	4428      	add	r0, r5
 800154e:	fba1 3403 	umull	r3, r4, r1, r3
 8001552:	1902      	adds	r2, r0, r4
 8001554:	4614      	mov	r4, r2
 8001556:	461d      	mov	r5, r3
 8001558:	4626      	mov	r6, r4
 800155a:	1969      	adds	r1, r5, r5
 800155c:	eb46 0206 	adc.w	r2, r6, r6
 8001560:	460d      	mov	r5, r1
 8001562:	4616      	mov	r6, r2
 8001564:	18e8      	adds	r0, r5, r3
 8001566:	eb46 0104 	adc.w	r1, r6, r4
 800156a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f7ff f873 	bl	800065c <__aeabi_uldivmod>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	4619      	mov	r1, r3
 800157c:	4622      	mov	r2, r4
 800157e:	f06f 0302 	mvn.w	r3, #2
 8001582:	f04f 34ff 	mov.w	r4, #4294967295
 8001586:	1a5b      	subs	r3, r3, r1
 8001588:	eb64 0402 	sbc.w	r4, r4, r2
 800158c:	461d      	mov	r5, r3
 800158e:	4626      	mov	r6, r4
 8001590:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <Set_Random_Motion_Values+0x8f0>)
 8001592:	6892      	ldr	r2, [r2, #8]
 8001594:	462b      	mov	r3, r5
 8001596:	4413      	add	r3, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <Set_Random_Motion_Values+0x8f0>)
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	e005      	b.n	80015ac <Set_Random_Motion_Values+0x8f4>
 80015a0:	200000b8 	.word	0x200000b8
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	200000d0 	.word	0x200000d0
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80015ac:	f008 f964 	bl	8009878 <rand>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4619      	mov	r1, r3
 80015b4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0400 	mov.w	r4, #0
 80015be:	fb03 f502 	mul.w	r5, r3, r2
 80015c2:	fb01 f004 	mul.w	r0, r1, r4
 80015c6:	4428      	add	r0, r5
 80015c8:	fba1 5603 	umull	r5, r6, r1, r3
 80015cc:	1983      	adds	r3, r0, r6
 80015ce:	461e      	mov	r6, r3
 80015d0:	4629      	mov	r1, r5
 80015d2:	4632      	mov	r2, r6
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	00d4      	lsls	r4, r2, #3
 80015de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80015e2:	00cb      	lsls	r3, r1, #3
 80015e4:	4619      	mov	r1, r3
 80015e6:	4622      	mov	r2, r4
 80015e8:	1b49      	subs	r1, r1, r5
 80015ea:	eb62 0206 	sbc.w	r2, r2, r6
 80015ee:	4608      	mov	r0, r1
 80015f0:	4611      	mov	r1, r2
 80015f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f7ff f82f 	bl	800065c <__aeabi_uldivmod>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4619      	mov	r1, r3
 8001604:	4622      	mov	r2, r4
 8001606:	f111 03c8 	adds.w	r3, r1, #200	; 0xc8
 800160a:	f142 0400 	adc.w	r4, r2, #0
 800160e:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <Set_Random_Motion_Values+0xa38>)
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	4413      	add	r3, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <Set_Random_Motion_Values+0xa38>)
 8001618:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800161a:	f008 f92d 	bl	8009878 <rand>
 800161e:	4603      	mov	r3, r0
 8001620:	4619      	mov	r1, r3
 8001622:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f04f 0400 	mov.w	r4, #0
 800162c:	fb03 f502 	mul.w	r5, r3, r2
 8001630:	fb01 f004 	mul.w	r0, r1, r4
 8001634:	4428      	add	r0, r5
 8001636:	fba1 3403 	umull	r3, r4, r1, r3
 800163a:	1902      	adds	r2, r0, r4
 800163c:	4614      	mov	r4, r2
 800163e:	461d      	mov	r5, r3
 8001640:	4626      	mov	r6, r4
 8001642:	1969      	adds	r1, r5, r5
 8001644:	eb46 0206 	adc.w	r2, r6, r6
 8001648:	460d      	mov	r5, r1
 800164a:	4616      	mov	r6, r2
 800164c:	18e8      	adds	r0, r5, r3
 800164e:	eb46 0104 	adc.w	r1, r6, r4
 8001652:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f7fe ffff 	bl	800065c <__aeabi_uldivmod>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	4619      	mov	r1, r3
 8001664:	4622      	mov	r2, r4
 8001666:	f111 0396 	adds.w	r3, r1, #150	; 0x96
 800166a:	f142 0400 	adc.w	r4, r2, #0
 800166e:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <Set_Random_Motion_Values+0xa38>)
 8001670:	6852      	ldr	r2, [r2, #4]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <Set_Random_Motion_Values+0xa38>)
 8001678:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800167a:	f008 f8fd 	bl	8009878 <rand>
 800167e:	4603      	mov	r3, r0
 8001680:	4619      	mov	r1, r3
 8001682:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 0400 	mov.w	r4, #0
 800168c:	fb03 f502 	mul.w	r5, r3, r2
 8001690:	fb01 f004 	mul.w	r0, r1, r4
 8001694:	4428      	add	r0, r5
 8001696:	fba1 5603 	umull	r5, r6, r1, r3
 800169a:	1983      	adds	r3, r0, r6
 800169c:	461e      	mov	r6, r3
 800169e:	4629      	mov	r1, r5
 80016a0:	4632      	mov	r2, r6
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f04f 0400 	mov.w	r4, #0
 80016aa:	0094      	lsls	r4, r2, #2
 80016ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80016b0:	008b      	lsls	r3, r1, #2
 80016b2:	4619      	mov	r1, r3
 80016b4:	4622      	mov	r2, r4
 80016b6:	194b      	adds	r3, r1, r5
 80016b8:	eb42 0406 	adc.w	r4, r2, r6
 80016bc:	4618      	mov	r0, r3
 80016be:	4621      	mov	r1, r4
 80016c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	f7fe ffc8 	bl	800065c <__aeabi_uldivmod>
 80016cc:	4603      	mov	r3, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	4619      	mov	r1, r3
 80016d2:	4622      	mov	r2, r4
 80016d4:	f111 030a 	adds.w	r3, r1, #10
 80016d8:	f142 0400 	adc.w	r4, r2, #0
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <Set_Random_Motion_Values+0xa38>)
 80016de:	6892      	ldr	r2, [r2, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <Set_Random_Motion_Values+0xa38>)
 80016e6:	609a      	str	r2, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f0:	200000dc 	.word	0x200000dc

080016f4 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80016f8:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b6e      	ldr	r3, [pc, #440]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 80016fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001702:	11d9      	asrs	r1, r3, #7
 8001704:	17d3      	asrs	r3, r2, #31
 8001706:	1acb      	subs	r3, r1, r3
 8001708:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <Reset_Motion_Values+0x2a>
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	425b      	negs	r3, r3
 800171c:	e000      	b.n	8001720 <Reset_Motion_Values+0x2c>
 800171e:	230a      	movs	r3, #10
 8001720:	4a64      	ldr	r2, [pc, #400]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001722:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001724:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 800172a:	fb83 1302 	smull	r1, r3, r3, r2
 800172e:	11d9      	asrs	r1, r3, #7
 8001730:	17d3      	asrs	r3, r2, #31
 8001732:	1acb      	subs	r3, r1, r3
 8001734:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <Reset_Motion_Values+0x56>
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	425b      	negs	r3, r3
 8001748:	e001      	b.n	800174e <Reset_Motion_Values+0x5a>
 800174a:	f06f 0309 	mvn.w	r3, #9
 800174e:	4a59      	ldr	r2, [pc, #356]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001750:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 8001758:	fb83 1302 	smull	r1, r3, r3, r2
 800175c:	11d9      	asrs	r1, r3, #7
 800175e:	17d3      	asrs	r3, r2, #31
 8001760:	1acb      	subs	r3, r1, r3
 8001762:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <Reset_Motion_Values+0x84>
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	425b      	negs	r3, r3
 8001776:	e000      	b.n	800177a <Reset_Motion_Values+0x86>
 8001778:	230a      	movs	r3, #10
 800177a:	4a4e      	ldr	r2, [pc, #312]	; (80018b4 <Reset_Motion_Values+0x1c0>)
 800177c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800177e:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <Reset_Motion_Values+0x1c8>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 8001784:	fb83 1302 	smull	r1, r3, r3, r2
 8001788:	11d9      	asrs	r1, r3, #7
 800178a:	17d3      	asrs	r3, r2, #31
 800178c:	1acb      	subs	r3, r1, r3
 800178e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <Reset_Motion_Values+0xb0>
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <Reset_Motion_Values+0x1c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	425b      	negs	r3, r3
 80017a2:	e000      	b.n	80017a6 <Reset_Motion_Values+0xb2>
 80017a4:	2364      	movs	r3, #100	; 0x64
 80017a6:	4a45      	ldr	r2, [pc, #276]	; (80018bc <Reset_Motion_Values+0x1c8>)
 80017a8:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80017aa:	4b44      	ldr	r3, [pc, #272]	; (80018bc <Reset_Motion_Values+0x1c8>)
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 80017b0:	fb83 1302 	smull	r1, r3, r3, r2
 80017b4:	11d9      	asrs	r1, r3, #7
 80017b6:	17d3      	asrs	r3, r2, #31
 80017b8:	1acb      	subs	r3, r1, r3
 80017ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <Reset_Motion_Values+0xdc>
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <Reset_Motion_Values+0x1c8>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	425b      	negs	r3, r3
 80017ce:	e001      	b.n	80017d4 <Reset_Motion_Values+0xe0>
 80017d0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80017d4:	4a39      	ldr	r2, [pc, #228]	; (80018bc <Reset_Motion_Values+0x1c8>)
 80017d6:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <Reset_Motion_Values+0x1c8>)
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 80017de:	fb83 1302 	smull	r1, r3, r3, r2
 80017e2:	11d9      	asrs	r1, r3, #7
 80017e4:	17d3      	asrs	r3, r2, #31
 80017e6:	1acb      	subs	r3, r1, r3
 80017e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <Reset_Motion_Values+0x10a>
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <Reset_Motion_Values+0x1c8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	425b      	negs	r3, r3
 80017fc:	e000      	b.n	8001800 <Reset_Motion_Values+0x10c>
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <Reset_Motion_Values+0x1c8>)
 8001802:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <Reset_Motion_Values+0x1c8>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 800180a:	fb83 1302 	smull	r1, r3, r3, r2
 800180e:	11d9      	asrs	r1, r3, #7
 8001810:	17d3      	asrs	r3, r2, #31
 8001812:	1acb      	subs	r3, r1, r3
 8001814:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <Reset_Motion_Values+0x136>
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <Reset_Motion_Values+0x1cc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	425b      	negs	r3, r3
 8001828:	e000      	b.n	800182c <Reset_Motion_Values+0x138>
 800182a:	2303      	movs	r3, #3
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <Reset_Motion_Values+0x1cc>)
 800182e:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <Reset_Motion_Values+0x1c8>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 8001836:	fb83 1302 	smull	r1, r3, r3, r2
 800183a:	11d9      	asrs	r1, r3, #7
 800183c:	17d3      	asrs	r3, r2, #31
 800183e:	1acb      	subs	r3, r1, r3
 8001840:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <Reset_Motion_Values+0x162>
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <Reset_Motion_Values+0x1cc>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	425b      	negs	r3, r3
 8001854:	e001      	b.n	800185a <Reset_Motion_Values+0x166>
 8001856:	f06f 0302 	mvn.w	r3, #2
 800185a:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <Reset_Motion_Values+0x1cc>)
 800185c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <Reset_Motion_Values+0x1c8>)
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <Reset_Motion_Values+0x1c4>)
 8001864:	fb83 1302 	smull	r1, r3, r3, r2
 8001868:	11d9      	asrs	r1, r3, #7
 800186a:	17d3      	asrs	r3, r2, #31
 800186c:	1acb      	subs	r3, r1, r3
 800186e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d103      	bne.n	8001884 <Reset_Motion_Values+0x190>
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <Reset_Motion_Values+0x1cc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	425b      	negs	r3, r3
 8001882:	e000      	b.n	8001886 <Reset_Motion_Values+0x192>
 8001884:	2303      	movs	r3, #3
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <Reset_Motion_Values+0x1cc>)
 8001888:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <Reset_Motion_Values+0x1d0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	425b      	negs	r3, r3
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <Reset_Motion_Values+0x1d0>)
 8001892:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <Reset_Motion_Values+0x1d0>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	425b      	negs	r3, r3
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <Reset_Motion_Values+0x1d0>)
 800189c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <Reset_Motion_Values+0x1d0>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	425b      	negs	r3, r3
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <Reset_Motion_Values+0x1d0>)
 80018a6:	6093      	str	r3, [r2, #8]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200000b8 	.word	0x200000b8
 80018b8:	10624dd3 	.word	0x10624dd3
 80018bc:	200000c4 	.word	0x200000c4
 80018c0:	200000d0 	.word	0x200000d0
 80018c4:	200000dc 	.word	0x200000dc

080018c8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <BSP_PB_Callback+0x1c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	200000a9 	.word	0x200000a9

080018e8 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80018ee:	231b      	movs	r3, #27
 80018f0:	713b      	strb	r3, [r7, #4]
 80018f2:	23c5      	movs	r3, #197	; 0xc5
 80018f4:	717b      	strb	r3, [r7, #5]
 80018f6:	23d5      	movs	r3, #213	; 0xd5
 80018f8:	71bb      	strb	r3, [r7, #6]
 80018fa:	23a5      	movs	r3, #165	; 0xa5
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	2302      	movs	r3, #2
 8001900:	723b      	strb	r3, [r7, #8]
 8001902:	2300      	movs	r3, #0
 8001904:	727b      	strb	r3, [r7, #9]
 8001906:	23b4      	movs	r3, #180	; 0xb4
 8001908:	72bb      	strb	r3, [r7, #10]
 800190a:	239a      	movs	r3, #154	; 0x9a
 800190c:	72fb      	strb	r3, [r7, #11]
 800190e:	23e1      	movs	r3, #225	; 0xe1
 8001910:	733b      	strb	r3, [r7, #12]
 8001912:	2311      	movs	r3, #17
 8001914:	737b      	strb	r3, [r7, #13]
 8001916:	2301      	movs	r3, #1
 8001918:	73bb      	strb	r3, [r7, #14]
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	2300      	movs	r3, #0
 8001920:	743b      	strb	r3, [r7, #16]
 8001922:	2300      	movs	r3, #0
 8001924:	747b      	strb	r3, [r7, #17]
 8001926:	2300      	movs	r3, #0
 8001928:	74bb      	strb	r3, [r7, #18]
 800192a:	2300      	movs	r3, #0
 800192c:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800192e:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <Add_HWServW2ST_Service+0x19c>)
 8001930:	461d      	mov	r5, r3
 8001932:	1d3c      	adds	r4, r7, #4
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	6028      	str	r0, [r5, #0]
 8001938:	6069      	str	r1, [r5, #4]
 800193a:	60aa      	str	r2, [r5, #8]
 800193c:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800193e:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <Add_HWServW2ST_Service+0x1a0>)
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2310      	movs	r3, #16
 8001944:	2201      	movs	r2, #1
 8001946:	494f      	ldr	r1, [pc, #316]	; (8001a84 <Add_HWServW2ST_Service+0x19c>)
 8001948:	2002      	movs	r0, #2
 800194a:	f007 f80e 	bl	800896a <aci_gatt_add_serv>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;
 8001958:	2347      	movs	r3, #71	; 0x47
 800195a:	e08e      	b.n	8001a7a <Add_HWServW2ST_Service+0x192>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 800195c:	231b      	movs	r3, #27
 800195e:	713b      	strb	r3, [r7, #4]
 8001960:	23c5      	movs	r3, #197	; 0xc5
 8001962:	717b      	strb	r3, [r7, #5]
 8001964:	23d5      	movs	r3, #213	; 0xd5
 8001966:	71bb      	strb	r3, [r7, #6]
 8001968:	23a5      	movs	r3, #165	; 0xa5
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	2302      	movs	r3, #2
 800196e:	723b      	strb	r3, [r7, #8]
 8001970:	2300      	movs	r3, #0
 8001972:	727b      	strb	r3, [r7, #9]
 8001974:	2336      	movs	r3, #54	; 0x36
 8001976:	72bb      	strb	r3, [r7, #10]
 8001978:	23ac      	movs	r3, #172	; 0xac
 800197a:	72fb      	strb	r3, [r7, #11]
 800197c:	23e1      	movs	r3, #225	; 0xe1
 800197e:	733b      	strb	r3, [r7, #12]
 8001980:	2311      	movs	r3, #17
 8001982:	737b      	strb	r3, [r7, #13]
 8001984:	2301      	movs	r3, #1
 8001986:	73bb      	strb	r3, [r7, #14]
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	2300      	movs	r3, #0
 800198e:	743b      	strb	r3, [r7, #16]
 8001990:	2300      	movs	r3, #0
 8001992:	747b      	strb	r3, [r7, #17]
 8001994:	2300      	movs	r3, #0
 8001996:	74bb      	strb	r3, [r7, #18]
 8001998:	2300      	movs	r3, #0
 800199a:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 800199c:	7cbb      	ldrb	r3, [r7, #18]
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80019a6:	7cbb      	ldrb	r3, [r7, #18]
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <Add_HWServW2ST_Service+0x1a4>)
 80019b2:	461d      	mov	r5, r3
 80019b4:	1d3c      	adds	r4, r7, #4
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	6028      	str	r0, [r5, #0]
 80019ba:	6069      	str	r1, [r5, #4]
 80019bc:	60aa      	str	r2, [r5, #8]
 80019be:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80019c0:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <Add_HWServW2ST_Service+0x1a0>)
 80019c2:	8818      	ldrh	r0, [r3, #0]
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <Add_HWServW2ST_Service+0x1a8>)
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	2300      	movs	r3, #0
 80019ca:	9304      	str	r3, [sp, #16]
 80019cc:	2310      	movs	r3, #16
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	2304      	movs	r3, #4
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2312      	movs	r3, #18
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2308      	movs	r3, #8
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <Add_HWServW2ST_Service+0x1a4>)
 80019e0:	2102      	movs	r1, #2
 80019e2:	f007 f84e 	bl	8008a82 <aci_gatt_add_char>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 80019f0:	2347      	movs	r3, #71	; 0x47
 80019f2:	e042      	b.n	8001a7a <Add_HWServW2ST_Service+0x192>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80019f4:	231b      	movs	r3, #27
 80019f6:	713b      	strb	r3, [r7, #4]
 80019f8:	23c5      	movs	r3, #197	; 0xc5
 80019fa:	717b      	strb	r3, [r7, #5]
 80019fc:	23d5      	movs	r3, #213	; 0xd5
 80019fe:	71bb      	strb	r3, [r7, #6]
 8001a00:	23a5      	movs	r3, #165	; 0xa5
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	2302      	movs	r3, #2
 8001a06:	723b      	strb	r3, [r7, #8]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	727b      	strb	r3, [r7, #9]
 8001a0c:	2336      	movs	r3, #54	; 0x36
 8001a0e:	72bb      	strb	r3, [r7, #10]
 8001a10:	23ac      	movs	r3, #172	; 0xac
 8001a12:	72fb      	strb	r3, [r7, #11]
 8001a14:	23e1      	movs	r3, #225	; 0xe1
 8001a16:	733b      	strb	r3, [r7, #12]
 8001a18:	2311      	movs	r3, #17
 8001a1a:	737b      	strb	r3, [r7, #13]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	2300      	movs	r3, #0
 8001a26:	743b      	strb	r3, [r7, #16]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	747b      	strb	r3, [r7, #17]
 8001a2c:	23e0      	movs	r3, #224	; 0xe0
 8001a2e:	74bb      	strb	r3, [r7, #18]
 8001a30:	2300      	movs	r3, #0
 8001a32:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <Add_HWServW2ST_Service+0x1a4>)
 8001a36:	461d      	mov	r5, r3
 8001a38:	1d3c      	adds	r4, r7, #4
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	6028      	str	r0, [r5, #0]
 8001a3e:	6069      	str	r1, [r5, #4]
 8001a40:	60aa      	str	r2, [r5, #8]
 8001a42:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <Add_HWServW2ST_Service+0x1a0>)
 8001a46:	8818      	ldrh	r0, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <Add_HWServW2ST_Service+0x1ac>)
 8001a4a:	9305      	str	r3, [sp, #20]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9304      	str	r3, [sp, #16]
 8001a50:	2310      	movs	r3, #16
 8001a52:	9303      	str	r3, [sp, #12]
 8001a54:	2304      	movs	r3, #4
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2314      	movs	r3, #20
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <Add_HWServW2ST_Service+0x1a4>)
 8001a64:	2102      	movs	r1, #2
 8001a66:	f007 f80c 	bl	8008a82 <aci_gatt_add_char>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 8001a74:	2347      	movs	r3, #71	; 0x47
 8001a76:	e000      	b.n	8001a7a <Add_HWServW2ST_Service+0x192>

  return BLE_STATUS_SUCCESS;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004f8 	.word	0x200004f8
 8001a88:	200004f2 	.word	0x200004f2
 8001a8c:	200004e0 	.word	0x200004e0
 8001a90:	200004dc 	.word	0x200004dc
 8001a94:	200004f4 	.word	0x200004f4

08001a98 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8001aa2:	231b      	movs	r3, #27
 8001aa4:	703b      	strb	r3, [r7, #0]
 8001aa6:	23c5      	movs	r3, #197	; 0xc5
 8001aa8:	707b      	strb	r3, [r7, #1]
 8001aaa:	23d5      	movs	r3, #213	; 0xd5
 8001aac:	70bb      	strb	r3, [r7, #2]
 8001aae:	23a5      	movs	r3, #165	; 0xa5
 8001ab0:	70fb      	strb	r3, [r7, #3]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	713b      	strb	r3, [r7, #4]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	717b      	strb	r3, [r7, #5]
 8001aba:	23b4      	movs	r3, #180	; 0xb4
 8001abc:	71bb      	strb	r3, [r7, #6]
 8001abe:	239a      	movs	r3, #154	; 0x9a
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	23e1      	movs	r3, #225	; 0xe1
 8001ac4:	723b      	strb	r3, [r7, #8]
 8001ac6:	2311      	movs	r3, #17
 8001ac8:	727b      	strb	r3, [r7, #9]
 8001aca:	2302      	movs	r3, #2
 8001acc:	72bb      	strb	r3, [r7, #10]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	72fb      	strb	r3, [r7, #11]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	733b      	strb	r3, [r7, #12]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	737b      	strb	r3, [r7, #13]
 8001ada:	2300      	movs	r3, #0
 8001adc:	73bb      	strb	r3, [r7, #14]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <Add_SWServW2ST_Service+0x118>)
 8001ae4:	461d      	mov	r5, r3
 8001ae6:	463c      	mov	r4, r7
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	6028      	str	r0, [r5, #0]
 8001aec:	6069      	str	r1, [r5, #4]
 8001aee:	60aa      	str	r2, [r5, #8]
 8001af0:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	0052      	lsls	r2, r2, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <Add_SWServW2ST_Service+0x11c>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <Add_SWServW2ST_Service+0x118>)
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f006 ff2c 	bl	800896a <aci_gatt_add_serv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d141      	bne.n	8001ba0 <Add_SWServW2ST_Service+0x108>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001b1c:	231b      	movs	r3, #27
 8001b1e:	703b      	strb	r3, [r7, #0]
 8001b20:	23c5      	movs	r3, #197	; 0xc5
 8001b22:	707b      	strb	r3, [r7, #1]
 8001b24:	23d5      	movs	r3, #213	; 0xd5
 8001b26:	70bb      	strb	r3, [r7, #2]
 8001b28:	23a5      	movs	r3, #165	; 0xa5
 8001b2a:	70fb      	strb	r3, [r7, #3]
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	713b      	strb	r3, [r7, #4]
 8001b30:	2300      	movs	r3, #0
 8001b32:	717b      	strb	r3, [r7, #5]
 8001b34:	2336      	movs	r3, #54	; 0x36
 8001b36:	71bb      	strb	r3, [r7, #6]
 8001b38:	23ac      	movs	r3, #172	; 0xac
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	23e1      	movs	r3, #225	; 0xe1
 8001b3e:	723b      	strb	r3, [r7, #8]
 8001b40:	2311      	movs	r3, #17
 8001b42:	727b      	strb	r3, [r7, #9]
 8001b44:	2301      	movs	r3, #1
 8001b46:	72bb      	strb	r3, [r7, #10]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	72fb      	strb	r3, [r7, #11]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	733b      	strb	r3, [r7, #12]
 8001b50:	2301      	movs	r3, #1
 8001b52:	737b      	strb	r3, [r7, #13]
 8001b54:	2300      	movs	r3, #0
 8001b56:	73bb      	strb	r3, [r7, #14]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <Add_SWServW2ST_Service+0x120>)
 8001b5e:	461d      	mov	r5, r3
 8001b60:	463c      	mov	r4, r7
 8001b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b64:	6028      	str	r0, [r5, #0]
 8001b66:	6069      	str	r1, [r5, #4]
 8001b68:	60aa      	str	r2, [r5, #8]
 8001b6a:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <Add_SWServW2ST_Service+0x11c>)
 8001b6e:	8818      	ldrh	r0, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <Add_SWServW2ST_Service+0x124>)
 8001b72:	9305      	str	r3, [sp, #20]
 8001b74:	2300      	movs	r3, #0
 8001b76:	9304      	str	r3, [sp, #16]
 8001b78:	2310      	movs	r3, #16
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	9302      	str	r3, [sp, #8]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2310      	movs	r3, #16
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2308      	movs	r3, #8
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <Add_SWServW2ST_Service+0x120>)
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	f006 ff78 	bl	8008a82 <aci_gatt_add_char>
 8001b92:	4603      	mov	r3, r0
 8001b94:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001b96:	7cfb      	ldrb	r3, [r7, #19]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d103      	bne.n	8001ba4 <Add_SWServW2ST_Service+0x10c>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e003      	b.n	8001ba8 <Add_SWServW2ST_Service+0x110>
    goto fail;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <Add_SWServW2ST_Service+0x10e>
    goto fail;
 8001ba4:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8001ba6:	2347      	movs	r3, #71	; 0x47
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb0:	200004f8 	.word	0x200004f8
 8001bb4:	200004f0 	.word	0x200004f0
 8001bb8:	200004e0 	.word	0x200004e0
 8001bbc:	200004de 	.word	0x200004de

08001bc0 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001bcc:	f001 fd96 	bl	80036fc <HAL_GetTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	08db      	lsrs	r3, r3, #3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	743b      	strb	r3, [r7, #16]
 8001bd8:	f001 fd90 	bl	80036fc <HAL_GetTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	0adb      	lsrs	r3, r3, #11
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	425b      	negs	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	74bb      	strb	r3, [r7, #18]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	121b      	asrs	r3, r3, #8
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	753b      	strb	r3, [r7, #20]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	121b      	asrs	r3, r3, #8
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	425b      	negs	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	75bb      	strb	r3, [r7, #22]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	425b      	negs	r3, r3
 8001c20:	121b      	asrs	r3, r3, #8
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	763b      	strb	r3, [r7, #24]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	121b      	asrs	r3, r3, #8
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	76bb      	strb	r3, [r7, #26]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	121b      	asrs	r3, r3, #8
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	773b      	strb	r3, [r7, #28]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	121b      	asrs	r3, r3, #8
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	77bb      	strb	r3, [r7, #30]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	121b      	asrs	r3, r3, #8
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f887 3020 	strb.w	r3, [r7, #32]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	121b      	asrs	r3, r3, #8
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	121b      	asrs	r3, r3, #8
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <Acc_Update+0x10c>)
 8001c9c:	8818      	ldrh	r0, [r3, #0]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <Acc_Update+0x110>)
 8001ca0:	8819      	ldrh	r1, [r3, #0]
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2314      	movs	r3, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	f006 ffbb 	bl	8008c26 <aci_gatt_update_char_value>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001cbe:	2347      	movs	r3, #71	; 0x47
 8001cc0:	e000      	b.n	8001cc4 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200004f2 	.word	0x200004f2
 8001cd0:	200004f4 	.word	0x200004f4

08001cd4 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001cdc:	f001 fd0e 	bl	80036fc <HAL_GetTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	733b      	strb	r3, [r7, #12]
 8001ce8:	f001 fd08 	bl	80036fc <HAL_GetTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	0adb      	lsrs	r3, r3, #11
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	73bb      	strb	r3, [r7, #14]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	121b      	asrs	r3, r3, #8
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	743b      	strb	r3, [r7, #16]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	121b      	asrs	r3, r3, #8
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	74bb      	strb	r3, [r7, #18]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	121b      	asrs	r3, r3, #8
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <Quat_Update+0x84>)
 8001d2c:	8818      	ldrh	r0, [r3, #0]
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <Quat_Update+0x88>)
 8001d30:	8819      	ldrh	r1, [r3, #0]
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2308      	movs	r3, #8
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f006 ff73 	bl	8008c26 <aci_gatt_update_char_value>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001d4a:	2347      	movs	r3, #71	; 0x47
 8001d4c:	e000      	b.n	8001d50 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200004f0 	.word	0x200004f0
 8001d5c:	200004de 	.word	0x200004de

08001d60 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001d60:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <Read_Request_CB+0x15c>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d105      	bne.n	8001d84 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8001d78:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <Read_Request_CB+0x160>)
 8001d7a:	4952      	ldr	r1, [pc, #328]	; (8001ec4 <Read_Request_CB+0x164>)
 8001d7c:	4852      	ldr	r0, [pc, #328]	; (8001ec8 <Read_Request_CB+0x168>)
 8001d7e:	f7ff ff1f 	bl	8001bc0 <Acc_Update>
 8001d82:	e08b      	b.n	8001e9c <Read_Request_CB+0x13c>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001d84:	88fa      	ldrh	r2, [r7, #6]
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <Read_Request_CB+0x16c>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8085 	bne.w	8001e9c <Read_Request_CB+0x13c>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001d92:	f007 fd71 	bl	8009878 <rand>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461d      	mov	r5, r3
 8001d9a:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4632      	mov	r2, r6
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	f04f 0400 	mov.w	r4, #0
 8001daa:	0094      	lsls	r4, r2, #2
 8001dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001db0:	008b      	lsls	r3, r1, #2
 8001db2:	4619      	mov	r1, r3
 8001db4:	4622      	mov	r2, r4
 8001db6:	194b      	adds	r3, r1, r5
 8001db8:	eb42 0406 	adc.w	r4, r2, r6
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	f7fe fc48 	bl	800065c <__aeabi_uldivmod>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	f7fe fbbc 	bl	8000550 <__aeabi_ul2d>
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <Read_Request_CB+0x170>)
 8001dde:	f7fe fa37 	bl	8000250 <__adddf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	4618      	mov	r0, r3
 8001de8:	4621      	mov	r1, r4
 8001dea:	f7fe fbe7 	bl	80005bc <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	617b      	str	r3, [r7, #20]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8001df2:	f007 fd41 	bl	8009878 <rand>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461d      	mov	r5, r3
 8001dfa:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001dfe:	46ab      	mov	fp, r5
 8001e00:	46b4      	mov	ip, r6
 8001e02:	eb1b 030b 	adds.w	r3, fp, fp
 8001e06:	eb4c 040c 	adc.w	r4, ip, ip
 8001e0a:	469b      	mov	fp, r3
 8001e0c:	46a4      	mov	ip, r4
 8001e0e:	eb1b 0b05 	adds.w	fp, fp, r5
 8001e12:	eb4c 0c06 	adc.w	ip, ip, r6
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8001e22:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8001e26:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8001e2a:	eb1b 0b01 	adds.w	fp, fp, r1
 8001e2e:	eb4c 0c02 	adc.w	ip, ip, r2
 8001e32:	eb1b 0005 	adds.w	r0, fp, r5
 8001e36:	eb4c 0106 	adc.w	r1, ip, r6
 8001e3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	f7fe fc0b 	bl	800065c <__aeabi_uldivmod>
 8001e46:	4603      	mov	r3, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	f7fe fb7f 	bl	8000550 <__aeabi_ul2d>
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <Read_Request_CB+0x174>)
 8001e58:	f7fe f9fa 	bl	8000250 <__adddf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	f7fe fbaa 	bl	80005bc <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001e6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e70:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ed8 <Read_Request_CB+0x178>
 8001e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e78:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001e7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8c:	ee17 3a90 	vmov	r3, s15
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	ee16 0a90 	vmov	r0, s13
 8001e98:	f000 f822 	bl	8001ee0 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <Read_Request_CB+0x17c>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <Read_Request_CB+0x152>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <Read_Request_CB+0x17c>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 ff4f 	bl	8008d4c <aci_gatt_allow_read>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001ebc:	200004f4 	.word	0x200004f4
 8001ec0:	200000d0 	.word	0x200000d0
 8001ec4:	200000c4 	.word	0x200000c4
 8001ec8:	200000b8 	.word	0x200000b8
 8001ecc:	200004dc 	.word	0x200004dc
 8001ed0:	403b0000 	.word	0x403b0000
 8001ed4:	408f4000 	.word	0x408f4000
 8001ed8:	42c80000 	.word	0x42c80000
 8001edc:	200000b0 	.word	0x200000b0

08001ee0 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001eec:	f001 fc06 	bl	80036fc <HAL_GetTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	733b      	strb	r3, [r7, #12]
 8001ef8:	f001 fc00 	bl	80036fc <HAL_GetTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	73bb      	strb	r3, [r7, #14]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	121b      	asrs	r3, r3, #8
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	141b      	asrs	r3, r3, #16
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	743b      	strb	r3, [r7, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	161b      	asrs	r3, r3, #24
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	74bb      	strb	r3, [r7, #18]
 8001f28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f2c:	121b      	asrs	r3, r3, #8
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <BlueMS_Environmental_Update+0x84>)
 8001f36:	8818      	ldrh	r0, [r3, #0]
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <BlueMS_Environmental_Update+0x88>)
 8001f3a:	8819      	ldrh	r1, [r3, #0]
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2308      	movs	r3, #8
 8001f44:	2200      	movs	r2, #0
 8001f46:	f006 fe6e 	bl	8008c26 <aci_gatt_update_char_value>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001f54:	2347      	movs	r3, #71	; 0x47
 8001f56:	e000      	b.n	8001f5a <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200004f2 	.word	0x200004f2
 8001f68:	200004dc 	.word	0x200004dc

08001f6c <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b092      	sub	sp, #72	; 0x48
 8001f70:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8001f72:	4a36      	ldr	r2, [pc, #216]	; (800204c <Set_DeviceConnectable+0xe0>)
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f7c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8001f80:	2302      	movs	r3, #2
 8001f82:	703b      	strb	r3, [r7, #0]
 8001f84:	230a      	movs	r3, #10
 8001f86:	707b      	strb	r3, [r7, #1]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	70bb      	strb	r3, [r7, #2]
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	70fb      	strb	r3, [r7, #3]
 8001f90:	2309      	movs	r3, #9
 8001f92:	713b      	strb	r3, [r7, #4]
 8001f94:	2344      	movs	r3, #68	; 0x44
 8001f96:	717b      	strb	r3, [r7, #5]
 8001f98:	2345      	movs	r3, #69	; 0x45
 8001f9a:	71bb      	strb	r3, [r7, #6]
 8001f9c:	234e      	movs	r3, #78	; 0x4e
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	2349      	movs	r3, #73	; 0x49
 8001fa2:	723b      	strb	r3, [r7, #8]
 8001fa4:	2342      	movs	r3, #66	; 0x42
 8001fa6:	727b      	strb	r3, [r7, #9]
 8001fa8:	234c      	movs	r3, #76	; 0x4c
 8001faa:	72bb      	strb	r3, [r7, #10]
 8001fac:	2345      	movs	r3, #69	; 0x45
 8001fae:	72fb      	strb	r3, [r7, #11]
 8001fb0:	230d      	movs	r3, #13
 8001fb2:	733b      	strb	r3, [r7, #12]
 8001fb4:	23ff      	movs	r3, #255	; 0xff
 8001fb6:	737b      	strb	r3, [r7, #13]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73bb      	strb	r3, [r7, #14]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	743b      	strb	r3, [r7, #16]
 8001fc4:	23f4      	movs	r3, #244	; 0xf4
 8001fc6:	747b      	strb	r3, [r7, #17]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	74bb      	strb	r3, [r7, #18]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <Set_DeviceConnectable+0xe4>)
 8001fd2:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001fd4:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <Set_DeviceConnectable+0xe4>)
 8001fd8:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001fda:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <Set_DeviceConnectable+0xe4>)
 8001fde:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001fe0:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <Set_DeviceConnectable+0xe4>)
 8001fe4:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001fe6:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <Set_DeviceConnectable+0xe4>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001fec:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <Set_DeviceConnectable+0xe4>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001ff2:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001ff4:	7cbb      	ldrb	r3, [r7, #18]
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8001ffe:	2100      	movs	r1, #0
 8002000:	2000      	movs	r0, #0
 8002002:	f007 f804 	bl	800900e <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002006:	2300      	movs	r3, #0
 8002008:	9306      	str	r3, [sp, #24]
 800200a:	2300      	movs	r3, #0
 800200c:	9305      	str	r3, [sp, #20]
 800200e:	2300      	movs	r3, #0
 8002010:	9304      	str	r3, [sp, #16]
 8002012:	2300      	movs	r3, #0
 8002014:	9303      	str	r3, [sp, #12]
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	2308      	movs	r3, #8
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	2300      	movs	r3, #0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800202a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800202e:	2000      	movs	r0, #0
 8002030:	f006 fae0 	bl	80085f4 <aci_gap_set_discoverable>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	201a      	movs	r0, #26
 8002040:	f006 fc1e 	bl	8008880 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	080099e8 	.word	0x080099e8
 8002050:	200004d4 	.word	0x200004d4

08002054 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d139      	bne.n	80020e2 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b3e      	cmp	r3, #62	; 0x3e
 8002074:	d006      	beq.n	8002084 <user_notify+0x30>
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d01b      	beq.n	80020b2 <user_notify+0x5e>
 800207a:	2b05      	cmp	r3, #5
 800207c:	d132      	bne.n	80020e4 <user_notify+0x90>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800207e:	f000 f835 	bl	80020ec <GAP_DisconnectionComplete_CB>
    }
    break;
 8002082:	e02f      	b.n	80020e4 <user_notify+0x90>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	3302      	adds	r3, #2
 8002088:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d000      	beq.n	8002094 <user_notify+0x40>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 8002092:	e027      	b.n	80020e4 <user_notify+0x90>
          evt_le_connection_complete *cc = (void *)evt->data;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1d5a      	adds	r2, r3, #5
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f000 f835 	bl	8002118 <GAP_ConnectionComplete_CB>
        break;
 80020ae:	bf00      	nop
    break;
 80020b0:	e018      	b.n	80020e4 <user_notify+0x90>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	3302      	adds	r3, #2
 80020b6:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	f640 4314 	movw	r3, #3092	; 0xc14
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d000      	beq.n	80020ca <user_notify+0x76>
        }
        break;
      }

    }
    break;
 80020c8:	e00c      	b.n	80020e4 <user_notify+0x90>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3302      	adds	r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	885b      	ldrh	r3, [r3, #2]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fe42 	bl	8001d60 <Read_Request_CB>
        break;
 80020dc:	bf00      	nop
    break;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <user_notify+0x90>
    return;
 80020e2:	bf00      	nop
  }
}
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  connected = FALSE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <GAP_DisconnectionComplete_CB+0x20>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <GAP_DisconnectionComplete_CB+0x24>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <GAP_DisconnectionComplete_CB+0x28>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200000b4 	.word	0x200000b4
 8002110:	20000001 	.word	0x20000001
 8002114:	200000b2 	.word	0x200000b2

08002118 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <GAP_ConnectionComplete_CB+0x38>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <GAP_ConnectionComplete_CB+0x3c>)
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002130:	2305      	movs	r3, #5
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e002      	b.n	800213c <GAP_ConnectionComplete_CB+0x24>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3b01      	subs	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200000b4 	.word	0x200000b4
 8002154:	200000b0 	.word	0x200000b0

08002158 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HCI_TL_SPI_Init+0x80>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <HCI_TL_SPI_Init+0x80>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HCI_TL_SPI_Init+0x80>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002178:	2308      	movs	r3, #8
 800217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HCI_TL_SPI_Init+0x84>)
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4619      	mov	r1, r3
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <HCI_TL_SPI_Init+0x88>)
 800218c:	f002 fc16 	bl	80049bc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <HCI_TL_SPI_Init+0x8c>)
 80021aa:	f002 fc07 	bl	80049bc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80021ae:	2304      	movs	r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <HCI_TL_SPI_Init+0x88>)
 80021c6:	f002 fbf9 	bl	80049bc <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80021ca:	f000 fe0b 	bl	8002de4 <BSP_SPI1_Init>
 80021ce:	4603      	mov	r3, r0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	10110000 	.word	0x10110000
 80021e0:	42020000 	.word	0x42020000
 80021e4:	42021400 	.word	0x42021400

080021e8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80021ec:	2108      	movs	r1, #8
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <HCI_TL_SPI_DeInit+0x24>)
 80021f0:	f002 fd64 	bl	8004cbc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80021f4:	2104      	movs	r1, #4
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <HCI_TL_SPI_DeInit+0x24>)
 80021f8:	f002 fd60 	bl	8004cbc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80021fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <HCI_TL_SPI_DeInit+0x28>)
 8002202:	f002 fd5b 	bl	8004cbc <HAL_GPIO_DeInit>
  return 0;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	42020000 	.word	0x42020000
 8002210:	42021400 	.word	0x42021400

08002214 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	2104      	movs	r1, #4
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <HCI_TL_SPI_Reset+0x38>)
 800221e:	f002 fe53 	bl	8004ec8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <HCI_TL_SPI_Reset+0x3c>)
 800222a:	f002 fe4d 	bl	8004ec8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800222e:	2005      	movs	r0, #5
 8002230:	f001 fa70 	bl	8003714 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <HCI_TL_SPI_Reset+0x3c>)
 800223c:	f002 fe44 	bl	8004ec8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002240:	2005      	movs	r0, #5
 8002242:	f001 fa67 	bl	8003714 <HAL_Delay>
  return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	42020000 	.word	0x42020000
 8002250:	42021400 	.word	0x42021400

08002254 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002264:	23ff      	movs	r3, #255	; 0xff
 8002266:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002268:	230b      	movs	r3, #11
 800226a:	753b      	strb	r3, [r7, #20]
 800226c:	2300      	movs	r3, #0
 800226e:	757b      	strb	r3, [r7, #21]
 8002270:	2300      	movs	r3, #0
 8002272:	75bb      	strb	r3, [r7, #22]
 8002274:	2300      	movs	r3, #0
 8002276:	75fb      	strb	r3, [r7, #23]
 8002278:	2300      	movs	r3, #0
 800227a:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	2104      	movs	r1, #4
 8002280:	4820      	ldr	r0, [pc, #128]	; (8002304 <HCI_TL_SPI_Receive+0xb0>)
 8002282:	f002 fe21 	bl	8004ec8 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002286:	f107 010c 	add.w	r1, r7, #12
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	2205      	movs	r2, #5
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fdd7 	bl	8002e44 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8002296:	7b3b      	ldrb	r3, [r7, #12]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d129      	bne.n	80022f0 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800229c:	7c3b      	ldrb	r3, [r7, #16]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80022ac:	8bfb      	ldrh	r3, [r7, #30]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01e      	beq.n	80022f0 <HCI_TL_SPI_Receive+0x9c>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80022b2:	8bfa      	ldrh	r2, [r7, #30]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d901      	bls.n	80022be <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80022be:	2300      	movs	r3, #0
 80022c0:	777b      	strb	r3, [r7, #29]
 80022c2:	e010      	b.n	80022e6 <HCI_TL_SPI_Receive+0x92>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80022c4:	f107 011b 	add.w	r1, r7, #27
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	2201      	movs	r2, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fdb8 	bl	8002e44 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80022d4:	7f7b      	ldrb	r3, [r7, #29]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	7efa      	ldrb	r2, [r7, #27]
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80022e0:	7f7b      	ldrb	r3, [r7, #29]
 80022e2:	3301      	adds	r3, #1
 80022e4:	777b      	strb	r3, [r7, #29]
 80022e6:	7f7b      	ldrb	r3, [r7, #29]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	8bfa      	ldrh	r2, [r7, #30]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8e9      	bhi.n	80022c4 <HCI_TL_SPI_Receive+0x70>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2104      	movs	r1, #4
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <HCI_TL_SPI_Receive+0xb0>)
 80022f6:	f002 fde7 	bl	8004ec8 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80022fa:	7f7b      	ldrb	r3, [r7, #29]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	42020000 	.word	0x42020000

08002308 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002314:	230a      	movs	r3, #10
 8002316:	743b      	strb	r3, [r7, #16]
 8002318:	2300      	movs	r3, #0
 800231a:	747b      	strb	r3, [r7, #17]
 800231c:	2300      	movs	r3, #0
 800231e:	74bb      	strb	r3, [r7, #18]
 8002320:	2300      	movs	r3, #0
 8002322:	74fb      	strb	r3, [r7, #19]
 8002324:	2300      	movs	r3, #0
 8002326:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002328:	f001 f9e8 	bl	80036fc <HAL_GetTick>
 800232c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2104      	movs	r1, #4
 8002336:	481c      	ldr	r0, [pc, #112]	; (80023a8 <HCI_TL_SPI_Send+0xa0>)
 8002338:	f002 fdc6 	bl	8004ec8 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800233c:	f107 0108 	add.w	r1, r7, #8
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	2205      	movs	r2, #5
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fd7c 	bl	8002e44 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 800234c:	7a3b      	ldrb	r3, [r7, #8]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d10f      	bne.n	8002372 <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002352:	7a7b      	ldrb	r3, [r7, #9]
 8002354:	b29b      	uxth	r3, r3
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	429a      	cmp	r2, r3
 800235a:	d806      	bhi.n	800236a <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	461a      	mov	r2, r3
 8002360:	4912      	ldr	r1, [pc, #72]	; (80023ac <HCI_TL_SPI_Send+0xa4>)
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fd6e 	bl	8002e44 <BSP_SPI1_SendRecv>
 8002368:	e006      	b.n	8002378 <HCI_TL_SPI_Send+0x70>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800236a:	f06f 0301 	mvn.w	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	e002      	b.n	8002378 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	2104      	movs	r1, #4
 800237c:	480a      	ldr	r0, [pc, #40]	; (80023a8 <HCI_TL_SPI_Send+0xa0>)
 800237e:	f002 fda3 	bl	8004ec8 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002382:	f001 f9bb 	bl	80036fc <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d903      	bls.n	8002398 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8002390:	f06f 0302 	mvn.w	r3, #2
 8002394:	61fb      	str	r3, [r7, #28]
      break;
 8002396:	e002      	b.n	800239e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	dbc7      	blt.n	800232e <HCI_TL_SPI_Send+0x26>

  return result;
 800239e:	69fb      	ldr	r3, [r7, #28]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	42020000 	.word	0x42020000
 80023ac:	200000e8 	.word	0x200000e8

080023b0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80023b4:	2108      	movs	r1, #8
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <IsDataAvailable+0x1c>)
 80023b8:	f002 fd6e 	bl	8004e98 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	42020000 	.word	0x42020000

080023d0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <hci_tl_lowlevel_init+0x50>)
 80023d8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <hci_tl_lowlevel_init+0x54>)
 80023dc:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <hci_tl_lowlevel_init+0x58>)
 80023e0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <hci_tl_lowlevel_init+0x5c>)
 80023e4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <hci_tl_lowlevel_init+0x60>)
 80023e8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <hci_tl_lowlevel_init+0x64>)
 80023ec:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4618      	mov	r0, r3
 80023f2:	f006 ff27 	bl	8009244 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti3, EXTI_LINE_3);
 80023f6:	4910      	ldr	r1, [pc, #64]	; (8002438 <hci_tl_lowlevel_init+0x68>)
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <hci_tl_lowlevel_init+0x6c>)
 80023fa:	f002 fa83 	bl	8004904 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti3, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <hci_tl_lowlevel_init+0x70>)
 8002400:	2100      	movs	r1, #0
 8002402:	480e      	ldr	r0, [pc, #56]	; (800243c <hci_tl_lowlevel_init+0x6c>)
 8002404:	f002 fa55 	bl	80048b2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	200e      	movs	r0, #14
 800240e:	f002 fa1c 	bl	800484a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002412:	200e      	movs	r0, #14
 8002414:	f002 fa33 	bl	800487e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	08002159 	.word	0x08002159
 8002424:	080021e9 	.word	0x080021e9
 8002428:	08002309 	.word	0x08002309
 800242c:	08002255 	.word	0x08002255
 8002430:	08002215 	.word	0x08002215
 8002434:	08002e85 	.word	0x08002e85
 8002438:	06000003 	.word	0x06000003
 800243c:	20000508 	.word	0x20000508
 8002440:	08002445 	.word	0x08002445

08002444 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002448:	e005      	b.n	8002456 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800244a:	2000      	movs	r0, #0
 800244c:	f007 f85c 	bl	8009508 <hci_notify_asynch_evt>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002456:	f7ff ffab 	bl	80023b0 <IsDataAvailable>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f4      	bne.n	800244a <hci_tl_lowlevel_isr+0x6>
 8002460:	e000      	b.n	8002464 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002462:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4313      	orrs	r3, r2
 800247a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800247e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000

08002498 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80024a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80024ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4013      	ands	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40021000 	.word	0x40021000

080024c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024cc:	f001 f8ac 	bl	8003628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d0:	f000 f812 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d4:	f000 f9de 	bl	8002894 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024d8:	f000 f870 	bl	80025bc <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80024dc:	f000 f8e4 	bl	80026a8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80024e0:	f000 f930 	bl	8002744 <MX_RTC_Init>
  MX_UCPD1_Init();
 80024e4:	f000 f978 	bl	80027d8 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80024e8:	f000 f9ac 	bl	8002844 <MX_USB_PCD_Init>
  MX_BlueNRG_MS_Init();
 80024ec:	f7fe fa40 	bl	8000970 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80024f0:	f7fe fae6 	bl	8000ac0 <MX_BlueNRG_MS_Process>
 80024f4:	e7fc      	b.n	80024f0 <main+0x28>
	...

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b098      	sub	sp, #96	; 0x60
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	2248      	movs	r2, #72	; 0x48
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f007 f989 	bl	800981e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800251a:	2000      	movs	r0, #0
 800251c:	f002 fe34 	bl	8005188 <HAL_PWREx_ControlVoltageScaling>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002526:	f000 fa9f 	bl	8002a68 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800252a:	f002 fe0f 	bl	800514c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <SystemClock_Config+0xc0>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <SystemClock_Config+0xc0>)
 8002536:	f023 0318 	bic.w	r3, r3, #24
 800253a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800253e:	2334      	movs	r3, #52	; 0x34
 8002540:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002542:	2381      	movs	r3, #129	; 0x81
 8002544:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002546:	2301      	movs	r3, #1
 8002548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800254a:	2301      	movs	r3, #1
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800254e:	2300      	movs	r3, #0
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002552:	2360      	movs	r3, #96	; 0x60
 8002554:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002556:	2302      	movs	r3, #2
 8002558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800255a:	2301      	movs	r3, #1
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8002562:	2337      	movs	r3, #55	; 0x37
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002566:	2307      	movs	r3, #7
 8002568:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800256a:	2302      	movs	r3, #2
 800256c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800256e:	2302      	movs	r3, #2
 8002570:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002572:	f107 0318 	add.w	r3, r7, #24
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fe96 	bl	80052a8 <HAL_RCC_OscConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002582:	f000 fa71 	bl	8002a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002586:	230f      	movs	r3, #15
 8002588:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258a:	2303      	movs	r3, #3
 800258c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2105      	movs	r1, #5
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fae4 	bl	8005b6c <HAL_RCC_ClockConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80025aa:	f000 fa5d 	bl	8002a68 <Error_Handler>
  }
}
 80025ae:	bf00      	nop
 80025b0:	3760      	adds	r7, #96	; 0x60
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000

080025bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
 80025dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <MX_ADC1_Init+0xe0>)
 80025e0:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <MX_ADC1_Init+0xe4>)
 80025e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <MX_ADC1_Init+0xe0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <MX_ADC1_Init+0xe0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <MX_ADC1_Init+0xe0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025f6:	4b29      	ldr	r3, [pc, #164]	; (800269c <MX_ADC1_Init+0xe0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <MX_ADC1_Init+0xe0>)
 80025fe:	2204      	movs	r2, #4
 8002600:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <MX_ADC1_Init+0xe0>)
 8002604:	2200      	movs	r2, #0
 8002606:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <MX_ADC1_Init+0xe0>)
 800260a:	2200      	movs	r2, #0
 800260c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <MX_ADC1_Init+0xe0>)
 8002610:	2201      	movs	r2, #1
 8002612:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <MX_ADC1_Init+0xe0>)
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <MX_ADC1_Init+0xe0>)
 800261e:	2200      	movs	r2, #0
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <MX_ADC1_Init+0xe0>)
 8002624:	2200      	movs	r2, #0
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <MX_ADC1_Init+0xe0>)
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_ADC1_Init+0xe0>)
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <MX_ADC1_Init+0xe0>)
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800263e:	4817      	ldr	r0, [pc, #92]	; (800269c <MX_ADC1_Init+0xe0>)
 8002640:	f001 fa2a 	bl	8003a98 <HAL_ADC_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800264a:	f000 fa0d 	bl	8002a68 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	4810      	ldr	r0, [pc, #64]	; (800269c <MX_ADC1_Init+0xe0>)
 800265a:	f001 ff7b 	bl	8004554 <HAL_ADCEx_MultiModeConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002664:	f000 fa00 	bl	8002a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_ADC1_Init+0xe8>)
 800266a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800266c:	2306      	movs	r3, #6
 800266e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002674:	237f      	movs	r3, #127	; 0x7f
 8002676:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002678:	2304      	movs	r3, #4
 800267a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_ADC1_Init+0xe0>)
 8002686:	f001 fb57 	bl	8003d38 <HAL_ADC_ConfigChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002690:	f000 f9ea 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200005a4 	.word	0x200005a4
 80026a0:	42028000 	.word	0x42028000
 80026a4:	0c900008 	.word	0x0c900008

080026a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <MX_LPUART1_UART_Init+0x94>)
 80026b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <MX_LPUART1_UART_Init+0x98>)
 80026b6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026cc:	220c      	movs	r2, #12
 80026ce:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80026ee:	4812      	ldr	r0, [pc, #72]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 80026f0:	f004 ff42 	bl	8007578 <HAL_UART_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80026fa:	f000 f9b5 	bl	8002a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026fe:	2100      	movs	r1, #0
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 8002702:	f005 fc05 	bl	8007f10 <HAL_UARTEx_SetTxFifoThreshold>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800270c:	f000 f9ac 	bl	8002a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002710:	2100      	movs	r1, #0
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 8002714:	f005 fc3a 	bl	8007f8c <HAL_UARTEx_SetRxFifoThreshold>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800271e:	f000 f9a3 	bl	8002a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_LPUART1_UART_Init+0x90>)
 8002724:	f005 fbbb 	bl	8007e9e <HAL_UARTEx_DisableFifoMode>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800272e:	f000 f99b 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000514 	.word	0x20000514
 800273c:	40008000 	.word	0x40008000
 8002740:	00033324 	.word	0x00033324

08002744 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800274a:	463b      	mov	r3, r7
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
 8002758:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <MX_RTC_Init+0x8c>)
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <MX_RTC_Init+0x90>)
 800275e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <MX_RTC_Init+0x8c>)
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <MX_RTC_Init+0x8c>)
 8002768:	227f      	movs	r2, #127	; 0x7f
 800276a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <MX_RTC_Init+0x8c>)
 800276e:	22ff      	movs	r2, #255	; 0xff
 8002770:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <MX_RTC_Init+0x8c>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <MX_RTC_Init+0x8c>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <MX_RTC_Init+0x8c>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <MX_RTC_Init+0x8c>)
 8002786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800278a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <MX_RTC_Init+0x8c>)
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002792:	480f      	ldr	r0, [pc, #60]	; (80027d0 <MX_RTC_Init+0x8c>)
 8002794:	f004 f994 	bl	8006ac0 <HAL_RTC_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800279e:	f000 f963 	bl	8002a68 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80027b2:	463b      	mov	r3, r7
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_RTC_Init+0x8c>)
 80027b8:	f004 fa88 	bl	8006ccc <HAL_RTCEx_PrivilegeModeSet>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80027c2:	f000 f951 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000060c 	.word	0x2000060c
 80027d4:	40002800 	.word	0x40002800

080027d8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027de:	463b      	mov	r3, r7
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80027ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027f2:	f7ff fe51 	bl	8002498 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7ff fe36 	bl	8002468 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff fe33 	bl	8002468 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002806:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002808:	2303      	movs	r3, #3
 800280a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002810:	463b      	mov	r3, r7
 8002812:	4619      	mov	r1, r3
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <MX_UCPD1_Init+0x64>)
 8002816:	f005 fdaa 	bl	800836e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800281a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002820:	2303      	movs	r3, #3
 8002822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	463b      	mov	r3, r7
 800282a:	4619      	mov	r1, r3
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <MX_UCPD1_Init+0x68>)
 800282e:	f005 fd9e 	bl	800836e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	42020400 	.word	0x42020400
 8002840:	42020000 	.word	0x42020000

08002844 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <MX_USB_PCD_Init+0x48>)
 800284a:	4a11      	ldr	r2, [pc, #68]	; (8002890 <MX_USB_PCD_Init+0x4c>)
 800284c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_USB_PCD_Init+0x48>)
 8002850:	2208      	movs	r2, #8
 8002852:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <MX_USB_PCD_Init+0x48>)
 8002856:	2202      	movs	r2, #2
 8002858:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_USB_PCD_Init+0x48>)
 800285c:	2202      	movs	r2, #2
 800285e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <MX_USB_PCD_Init+0x48>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <MX_USB_PCD_Init+0x48>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <MX_USB_PCD_Init+0x48>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <MX_USB_PCD_Init+0x48>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <MX_USB_PCD_Init+0x48>)
 800287a:	f002 fb57 	bl	8004f2c <HAL_PCD_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002884:	f000 f8f0 	bl	8002a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000634 	.word	0x20000634
 8002890:	4000d400 	.word	0x4000d400

08002894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b69      	ldr	r3, [pc, #420]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a68      	ldr	r2, [pc, #416]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a62      	ldr	r2, [pc, #392]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b60      	ldr	r3, [pc, #384]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a5c      	ldr	r2, [pc, #368]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028e0:	f043 0320 	orr.w	r3, r3, #32
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e6:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	4b4b      	ldr	r3, [pc, #300]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292e:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800293a:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002946:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <MX_GPIO_Init+0x1bc>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8002952:	f002 fc75 	bl	8005240 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	2181      	movs	r1, #129	; 0x81
 800295a:	483e      	ldr	r0, [pc, #248]	; (8002a54 <MX_GPIO_Init+0x1c0>)
 800295c:	f002 fab4 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_CS_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8002960:	2200      	movs	r2, #0
 8002962:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002966:	483c      	ldr	r0, [pc, #240]	; (8002a58 <MX_GPIO_Init+0x1c4>)
 8002968:	f002 faae 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 800296c:	2200      	movs	r2, #0
 800296e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002972:	483a      	ldr	r0, [pc, #232]	; (8002a5c <MX_GPIO_Init+0x1c8>)
 8002974:	f002 faa8 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBN_GPIO_Port, UCPD_DBN_Pin, GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	2120      	movs	r1, #32
 800297c:	4838      	ldr	r0, [pc, #224]	; (8002a60 <MX_GPIO_Init+0x1cc>)
 800297e:	f002 faa3 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED_GREEN_Pin;
 8002982:	2381      	movs	r3, #129	; 0x81
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	482e      	ldr	r0, [pc, #184]	; (8002a54 <MX_GPIO_Init+0x1c0>)
 800299a:	f002 f80f 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_CS_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BT_CS_Pin|LED_RED_Pin;
 800299e:	f44f 7301 	mov.w	r3, #516	; 0x204
 80029a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	4828      	ldr	r0, [pc, #160]	; (8002a58 <MX_GPIO_Init+0x1c4>)
 80029b8:	f002 f800 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_IRQ_Pin */
  GPIO_InitStruct.Pin = BT_IRQ_Pin;
 80029bc:	2308      	movs	r3, #8
 80029be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <MX_GPIO_Init+0x1d0>)
 80029c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BT_IRQ_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4619      	mov	r1, r3
 80029ce:	4822      	ldr	r0, [pc, #136]	; (8002a58 <MX_GPIO_Init+0x1c4>)
 80029d0:	f001 fff4 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_RESET_Pin */
  GPIO_InitStruct.Pin = BT_RESET_Pin;
 80029d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BT_RESET_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	481b      	ldr	r0, [pc, #108]	; (8002a5c <MX_GPIO_Init+0x1c8>)
 80029ee:	f001 ffe5 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80029f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <MX_GPIO_Init+0x1d0>)
 80029fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	4816      	ldr	r0, [pc, #88]	; (8002a60 <MX_GPIO_Init+0x1cc>)
 8002a08:	f001 ffd8 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBN_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBN_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	480f      	ldr	r0, [pc, #60]	; (8002a60 <MX_GPIO_Init+0x1cc>)
 8002a24:	f001 ffca 	bl	80049bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	200e      	movs	r0, #14
 8002a2e:	f001 ff0c 	bl	800484a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a32:	200e      	movs	r0, #14
 8002a34:	f001 ff23 	bl	800487e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	2018      	movs	r0, #24
 8002a3e:	f001 ff04 	bl	800484a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8002a42:	2018      	movs	r0, #24
 8002a44:	f001 ff1b 	bl	800487e <HAL_NVIC_EnableIRQ>

}
 8002a48:	bf00      	nop
 8002a4a:	3730      	adds	r7, #48	; 0x30
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	42020800 	.word	0x42020800
 8002a58:	42020000 	.word	0x42020000
 8002a5c:	42021400 	.word	0x42021400
 8002a60:	42020400 	.word	0x42020400
 8002a64:	10110000 	.word	0x10110000

08002a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <Error_Handler+0x6>

08002a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6613      	str	r3, [r2, #96]	; 0x60
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_MspInit+0x44>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0ae      	sub	sp, #184	; 0xb8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	2294      	movs	r2, #148	; 0x94
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f006 fea0 	bl	800981e <memset>
  if(hadc->Instance==ADC1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_ADC_MspInit+0xa8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d137      	bne.n	8002b58 <HAL_ADC_MspInit+0xa0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002aee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af6:	f107 0310 	add.w	r3, r7, #16
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fb0c 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002b06:	f7ff ffaf 	bl	8002a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_ADC_MspInit+0xac>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b40:	2303      	movs	r3, #3
 8002b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <HAL_ADC_MspInit+0xb0>)
 8002b54:	f001 ff32 	bl	80049bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b58:	bf00      	nop
 8002b5a:	37b8      	adds	r7, #184	; 0xb8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	42028000 	.word	0x42028000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	42020800 	.word	0x42020800

08002b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0ae      	sub	sp, #184	; 0xb8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	2294      	movs	r2, #148	; 0x94
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f006 fe46 	bl	800981e <memset>
  if(huart->Instance==LPUART1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_UART_MspInit+0xb4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d13d      	bne.n	8002c18 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fab5 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bb4:	f7ff ff58 	bl	8002a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_UART_MspInit+0xb8>)
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_UART_MspInit+0xb8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_UART_MspInit+0xb8>)
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_UART_MspInit+0xb8>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_UART_MspInit+0xb8>)
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_UART_MspInit+0xb8>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002be8:	f002 fb2a 	bl	8005240 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8002bec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c06:	2308      	movs	r3, #8
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_UART_MspInit+0xbc>)
 8002c14:	f001 fed2 	bl	80049bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	37b8      	adds	r7, #184	; 0xb8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40008000 	.word	0x40008000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	42021800 	.word	0x42021800

08002c2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0a8      	sub	sp, #160	; 0xa0
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	2294      	movs	r2, #148	; 0x94
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f006 fdee 	bl	800981e <memset>
  if(hrtc->Instance==RTC)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_RTC_MspInit+0x74>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d124      	bne.n	8002c96 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c50:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fa5a 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002c6a:	f7ff fefd 	bl	8002a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RTC_MspInit+0x78>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_RTC_MspInit+0x78>)
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RTC_MspInit+0x78>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_RTC_MspInit+0x78>)
 8002c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c88:	6593      	str	r3, [r2, #88]	; 0x58
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RTC_MspInit+0x78>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	37a0      	adds	r7, #160	; 0xa0
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40002800 	.word	0x40002800
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0ae      	sub	sp, #184	; 0xb8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	2294      	movs	r2, #148	; 0x94
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f006 fda8 	bl	800981e <memset>
  if(hpcd->Instance==USB)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_PCD_MspInit+0xb4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d13d      	bne.n	8002d54 <HAL_PCD_MspInit+0xac>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fa15 	bl	8006118 <HAL_RCCEx_PeriphCLKConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002cf4:	f7ff feb8 	bl	8002a68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_PCD_MspInit+0xb8>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_PCD_MspInit+0xb8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_PCD_MspInit+0xb8>)
 8002d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d34:	4619      	mov	r1, r3
 8002d36:	480b      	ldr	r0, [pc, #44]	; (8002d64 <HAL_PCD_MspInit+0xbc>)
 8002d38:	f001 fe40 	bl	80049bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_PCD_MspInit+0xb8>)
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_PCD_MspInit+0xb8>)
 8002d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d46:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_PCD_MspInit+0xb8>)
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	37b8      	adds	r7, #184	; 0xb8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	4000d400 	.word	0x4000d400
 8002d60:	40021000 	.word	0x40021000
 8002d64:	42020000 	.word	0x42020000

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <NMI_Handler+0x4>

08002d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <HardFault_Handler+0x4>

08002d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <MemManage_Handler+0x4>

08002d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <BusFault_Handler+0x4>

08002d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <UsageFault_Handler+0x4>

08002d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db4:	f000 fc8e 	bl	80036d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_3);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <EXTI3_IRQHandler+0x10>)
 8002dc2:	f001 fdb3 	bl	800492c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000508 	.word	0x20000508

08002dd0 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <EXTI13_IRQHandler+0x10>)
 8002dd6:	f001 fda9 	bl	800492c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000010 	.word	0x20000010

08002de4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <BSP_SPI1_Init+0x54>)
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <BSP_SPI1_Init+0x58>)
 8002df2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <BSP_SPI1_Init+0x5c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	4911      	ldr	r1, [pc, #68]	; (8002e40 <BSP_SPI1_Init+0x5c>)
 8002dfc:	600a      	str	r2, [r1, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d114      	bne.n	8002e2c <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002e02:	480d      	ldr	r0, [pc, #52]	; (8002e38 <BSP_SPI1_Init+0x54>)
 8002e04:	f004 fa4e 	bl	80072a4 <HAL_SPI_GetState>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10e      	bne.n	8002e2c <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8002e0e:	480a      	ldr	r0, [pc, #40]	; (8002e38 <BSP_SPI1_Init+0x54>)
 8002e10:	f000 f882 	bl	8002f18 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d108      	bne.n	8002e2c <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002e1a:	4807      	ldr	r0, [pc, #28]	; (8002e38 <BSP_SPI1_Init+0x54>)
 8002e1c:	f000 f83a 	bl	8002e94 <MX_SPI1_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8002e26:	f06f 0307 	mvn.w	r3, #7
 8002e2a:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8002e2c:	687b      	ldr	r3, [r7, #4]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000928 	.word	0x20000928
 8002e3c:	40013000 	.word	0x40013000
 8002e40:	200001e8 	.word	0x200001e8

08002e44 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	68f9      	ldr	r1, [r7, #12]
 8002e64:	4806      	ldr	r0, [pc, #24]	; (8002e80 <BSP_SPI1_SendRecv+0x3c>)
 8002e66:	f004 f80a 	bl	8006e7e <HAL_SPI_TransmitReceive>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002e70:	f06f 0305 	mvn.w	r3, #5
 8002e74:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002e76:	697b      	ldr	r3, [r7, #20]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000928 	.word	0x20000928

08002e84 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002e88:	f000 fc38 	bl	80036fc <HAL_GetTick>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <MX_SPI1_Init+0x80>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eac:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002eba:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ece:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2218      	movs	r2, #24
 8002ed4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2207      	movs	r2, #7
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f003 ff12 	bl	8006d24 <HAL_SPI_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40013000 	.word	0x40013000

08002f18 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3c:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f54:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f56:	f043 0310 	orr.w	r3, r3, #16
 8002f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <SPI1_MspInit+0xbc>)
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	4815      	ldr	r0, [pc, #84]	; (8002fd8 <SPI1_MspInit+0xc0>)
 8002f84:	f001 fd1a 	bl	80049bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002f98:	2305      	movs	r3, #5
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <SPI1_MspInit+0xc0>)
 8002fa4:	f001 fd0a 	bl	80049bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002fba:	2305      	movs	r3, #5
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <SPI1_MspInit+0xc4>)
 8002fc6:	f001 fcf9 	bl	80049bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	42020000 	.word	0x42020000
 8002fdc:	42021000 	.word	0x42021000

08002fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <_sbrk+0x5c>)
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <_sbrk+0x60>)
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <_sbrk+0x64>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <_sbrk+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003010:	f006 fbd0 	bl	80097b4 <__errno>
 8003014:	4602      	mov	r2, r0
 8003016:	230c      	movs	r3, #12
 8003018:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e009      	b.n	8003034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <_sbrk+0x64>)
 8003030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20030000 	.word	0x20030000
 8003040:	00000400 	.word	0x00000400
 8003044:	200001ec 	.word	0x200001ec
 8003048:	20000a38 	.word	0x20000a38

0800304c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <SystemInit+0x20>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <SystemInit+0x20>)
 8003058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800305c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003076:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003082:	4b4c      	ldr	r3, [pc, #304]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e005      	b.n	800309e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003092:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800309e:	4a46      	ldr	r2, [pc, #280]	; (80031b8 <SystemCoreClockUpdate+0x148>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a8:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d865      	bhi.n	8003180 <SystemCoreClockUpdate+0x110>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <SystemCoreClockUpdate+0x4c>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003181 	.word	0x08003181
 80030c4:	08003181 	.word	0x08003181
 80030c8:	08003181 	.word	0x08003181
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	08003181 	.word	0x08003181
 80030d4:	08003181 	.word	0x08003181
 80030d8:	08003181 	.word	0x08003181
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003181 	.word	0x08003181
 80030e4:	08003181 	.word	0x08003181
 80030e8:	08003181 	.word	0x08003181
 80030ec:	08003109 	.word	0x08003109
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80030f0:	4a32      	ldr	r2, [pc, #200]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6013      	str	r3, [r2, #0]
      break;
 80030f6:	e047      	b.n	8003188 <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 80030fa:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <SystemCoreClockUpdate+0x150>)
 80030fc:	601a      	str	r2, [r3, #0]
      break;
 80030fe:	e043      	b.n	8003188 <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 8003102:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <SystemCoreClockUpdate+0x154>)
 8003104:	601a      	str	r2, [r3, #0]
      break;
 8003106:	e03f      	b.n	8003188 <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	3301      	adds	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d002      	beq.n	800312c <SystemCoreClockUpdate+0xbc>
 8003126:	2b03      	cmp	r3, #3
 8003128:	d006      	beq.n	8003138 <SystemCoreClockUpdate+0xc8>
 800312a:	e00b      	b.n	8003144 <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <SystemCoreClockUpdate+0x150>)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
          break;
 8003136:	e00b      	b.n	8003150 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <SystemCoreClockUpdate+0x154>)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	613b      	str	r3, [r7, #16]
          break;
 8003142:	e005      	b.n	8003150 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	613b      	str	r3, [r7, #16]
          break;
 800314e:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0e5b      	lsrs	r3, r3, #25
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	3301      	adds	r3, #1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	4a10      	ldr	r2, [pc, #64]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 800317c:	6013      	str	r3, [r2, #0]
      break;
 800317e:	e003      	b.n	8003188 <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	6013      	str	r3, [r2, #0]
      break;
 8003186:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <SystemCoreClockUpdate+0x144>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <SystemCoreClockUpdate+0x158>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	4a06      	ldr	r2, [pc, #24]	; (80031bc <SystemCoreClockUpdate+0x14c>)
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08009a18 	.word	0x08009a18
 80031bc:	20000004 	.word	0x20000004
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200
 80031c8:	08009a00 	.word	0x08009a00

080031cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031d0:	f7ff ff3c 	bl	800304c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031d6:	e003      	b.n	80031e0 <LoopCopyDataInit>

080031d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031de:	3104      	adds	r1, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031e0:	480a      	ldr	r0, [pc, #40]	; (800320c <LoopForever+0xa>)
	ldr	r3, =_edata
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031e8:	d3f6      	bcc.n	80031d8 <CopyDataInit>
	ldr	r2, =_sbss
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031ec:	e002      	b.n	80031f4 <LoopFillZerobss>

080031ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031f0:	f842 3b04 	str.w	r3, [r2], #4

080031f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <LoopForever+0x16>)
	cmp	r2, r3
 80031f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031f8:	d3f9      	bcc.n	80031ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031fa:	f006 fae1 	bl	80097c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031fe:	f7ff f963 	bl	80024c8 <main>

08003202 <LoopForever>:

LoopForever:
    b LoopForever
 8003202:	e7fe      	b.n	8003202 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003204:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003208:	08009a94 	.word	0x08009a94
	ldr	r0, =_sdata
 800320c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003210:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8003214:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 8003218:	20000a34 	.word	0x20000a34

0800321c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC1_2_IRQHandler>
	...

08003220 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <BSP_LED_Init+0x20>)
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	08009a58 	.word	0x08009a58

08003244 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <BSP_LED_Toggle+0x28>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fe4c 	bl	8004ef8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000008 	.word	0x20000008

08003270 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <LED_USER_GPIO_Init+0x74>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <LED_USER_GPIO_Init+0x74>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <LED_USER_GPIO_Init+0x74>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <LED_USER_GPIO_Init+0x74>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <LED_USER_GPIO_Init+0x74>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <LED_USER_GPIO_Init+0x74>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	480b      	ldr	r0, [pc, #44]	; (80032e8 <LED_USER_GPIO_Init+0x78>)
 80032bc:	f001 fe04 	bl	8004ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	4619      	mov	r1, r3
 80032d6:	4804      	ldr	r0, [pc, #16]	; (80032e8 <LED_USER_GPIO_Init+0x78>)
 80032d8:	f001 fb70 	bl	80049bc <HAL_GPIO_Init>

}
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	42020400 	.word	0x42020400

080032ec <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	460a      	mov	r2, r1
 80032f6:	71fb      	strb	r3, [r7, #7]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <BSP_PB_Init+0xa0>)
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003308:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800330a:	79bb      	ldrb	r3, [r7, #6]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d137      	bne.n	8003380 <BSP_PB_Init+0x94>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <BSP_PB_Init+0xa4>)
 800331c:	1898      	adds	r0, r3, r2
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <BSP_PB_Init+0xa8>)
 8003322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003326:	4619      	mov	r1, r3
 8003328:	f001 faec 	bl	8004904 <HAL_EXTI_GetHandle>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <BSP_PB_Init+0x4e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003332:	f06f 0303 	mvn.w	r3, #3
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e022      	b.n	8003380 <BSP_PB_Init+0x94>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800333a:	79fa      	ldrb	r2, [r7, #7]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a12      	ldr	r2, [pc, #72]	; (8003390 <BSP_PB_Init+0xa4>)
 8003346:	1898      	adds	r0, r3, r2
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <BSP_PB_Init+0xac>)
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	461a      	mov	r2, r3
 8003352:	2100      	movs	r1, #0
 8003354:	f001 faad 	bl	80048b2 <HAL_EXTI_RegisterCallback>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <BSP_PB_Init+0x7a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800335e:	f06f 0303 	mvn.w	r3, #3
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e00c      	b.n	8003380 <BSP_PB_Init+0x94>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003366:	2018      	movs	r0, #24
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <BSP_PB_Init+0xb0>)
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	2200      	movs	r2, #0
 8003372:	4619      	mov	r1, r3
 8003374:	f001 fa69 	bl	800484a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003378:	2318      	movs	r3, #24
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fa7f 	bl	800487e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003380:	68fb      	ldr	r3, [r7, #12]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	08009a5c 	.word	0x08009a5c
 8003390:	20000010 	.word	0x20000010
 8003394:	08009a60 	.word	0x08009a60
 8003398:	08009a64 	.word	0x08009a64
 800339c:	08009a68 	.word	0x08009a68

080033a0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <BSP_PB_GetState+0x34>)
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fd6d 	bl	8004e98 <HAL_GPIO_ReadPin>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fe fa73 	bl	80018c8 <BSP_PB_Callback>
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <BUTTON_USER_GPIO_Init+0x88>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <BUTTON_USER_GPIO_Init+0x88>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <BUTTON_USER_GPIO_Init+0x88>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2100      	movs	r1, #0
 800340a:	2018      	movs	r0, #24
 800340c:	f001 fa1d 	bl	800484a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8003410:	2018      	movs	r0, #24
 8003412:	f001 fa34 	bl	800487e <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <BUTTON_USER_GPIO_Init+0x88>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	4a11      	ldr	r2, [pc, #68]	; (8003470 <BUTTON_USER_GPIO_Init+0x88>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <BUTTON_USER_GPIO_Init+0x88>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800343e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <BUTTON_USER_GPIO_Init+0x8c>)
 8003446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	4619      	mov	r1, r3
 8003452:	4809      	ldr	r0, [pc, #36]	; (8003478 <BUTTON_USER_GPIO_Init+0x90>)
 8003454:	f001 fab2 	bl	80049bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	2018      	movs	r0, #24
 800345e:	f001 f9f4 	bl	800484a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8003462:	2018      	movs	r0, #24
 8003464:	f001 fa0b 	bl	800487e <HAL_NVIC_EnableIRQ>

}
 8003468:	bf00      	nop
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	10110000 	.word	0x10110000
 8003478:	42020800 	.word	0x42020800

0800347c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d903      	bls.n	8003498 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003490:	f06f 0301 	mvn.w	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e025      	b.n	80034e4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	79fa      	ldrb	r2, [r7, #7]
 800349c:	4914      	ldr	r1, [pc, #80]	; (80034f0 <BSP_COM_Init+0x74>)
 800349e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80034a2:	4814      	ldr	r0, [pc, #80]	; (80034f4 <BSP_COM_Init+0x78>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4403      	add	r3, r0
 80034ae:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART3_MspInit(&hcom_uart[COM]);
 80034b0:	79fa      	ldrb	r2, [r7, #7]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <BSP_COM_Init+0x78>)
 80034bc:	4413      	add	r3, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f86c 	bl	800359c <USART3_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART3_UART_Init(&hcom_uart[COM]))
 80034c4:	79fa      	ldrb	r2, [r7, #7]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <BSP_COM_Init+0x78>)
 80034d0:	4413      	add	r3, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f810 	bl	80034f8 <MX_USART3_UART_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80034de:	f06f 0303 	mvn.w	r3, #3
 80034e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80034e4:	68fb      	ldr	r3, [r7, #12]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000001c 	.word	0x2000001c
 80034f4:	2000098c 	.word	0x2000098c

080034f8 <MX_USART3_UART_Init>:
 */

/* USART3 init function */

__weak HAL_StatusTypeDef MX_USART3_UART_Init(UART_HandleTypeDef* huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART3;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <MX_USART3_UART_Init+0xa0>)
 8003508:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003510:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	220c      	movs	r2, #12
 8003528:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f004 f815 	bl	8007578 <HAL_UART_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_USART3_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f004 fcd8 	bl	8007f10 <HAL_UARTEx_SetTxFifoThreshold>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_USART3_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800356a:	2100      	movs	r1, #0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f004 fd0d 	bl	8007f8c <HAL_UARTEx_SetRxFifoThreshold>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_USART3_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f004 fc8e 	bl	8007e9e <HAL_UARTEx_DisableFifoMode>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_USART3_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40004800 	.word	0x40004800

0800359c <USART3_MspInit>:
 * @param  huart USART3 handle
 * @retval None
 */

static void USART3_MspInit(UART_HandleTypeDef* uartHandle)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <USART3_MspInit+0x84>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <USART3_MspInit+0x84>)
 80035aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ae:	6593      	str	r3, [r2, #88]	; 0x58
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <USART3_MspInit+0x84>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <USART3_MspInit+0x84>)
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	4a17      	ldr	r2, [pc, #92]	; (8003620 <USART3_MspInit+0x84>)
 80035c2:	f043 0308 	orr.w	r3, r3, #8
 80035c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035c8:	4b15      	ldr	r3, [pc, #84]	; (8003620 <USART3_MspInit+0x84>)
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = BUS_USART3_TX_GPIO_PIN;
 80035d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART3_TX_GPIO_AF;
 80035e6:	2307      	movs	r3, #7
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <USART3_MspInit+0x88>)
 80035f2:	f001 f9e3 	bl	80049bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART3_RX_GPIO_PIN;
 80035f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART3_RX_GPIO_AF;
 8003608:	2307      	movs	r3, #7
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	4804      	ldr	r0, [pc, #16]	; (8003624 <USART3_MspInit+0x88>)
 8003614:	f001 f9d2 	bl	80049bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
}
 8003618:	bf00      	nop
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	42020c00 	.word	0x42020c00

08003628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003632:	2004      	movs	r0, #4
 8003634:	f001 f8fe 	bl	8004834 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8003638:	f7ff fd1a 	bl	8003070 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800363c:	2000      	movs	r0, #0
 800363e:	f000 f80d 	bl	800365c <HAL_InitTick>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	e001      	b.n	8003652 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800364e:	f7ff fa0f 	bl	8002a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003652:	79fb      	ldrb	r3, [r7, #7]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_InitTick+0x6c>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_InitTick+0x70>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_InitTick+0x6c>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	4618      	mov	r0, r3
 8003688:	f001 f907 	bl	800489a <HAL_SYSTICK_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b07      	cmp	r3, #7
 8003696:	d809      	bhi.n	80036ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003698:	2200      	movs	r2, #0
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f001 f8d3 	bl	800484a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a4:	4a0a      	ldr	r2, [pc, #40]	; (80036d0 <HAL_InitTick+0x74>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e007      	b.n	80036bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e004      	b.n	80036bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	e001      	b.n	80036bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000024 	.word	0x20000024
 80036cc:	20000004 	.word	0x20000004
 80036d0:	20000020 	.word	0x20000020

080036d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_IncTick+0x20>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_IncTick+0x24>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_IncTick+0x24>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000024 	.word	0x20000024
 80036f8:	20000a1c 	.word	0x20000a1c

080036fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_GetTick+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000a1c 	.word	0x20000a1c

08003714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff ffee 	bl	80036fc <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d005      	beq.n	800373a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_Delay+0x40>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800373a:	bf00      	nop
 800373c:	f7ff ffde 	bl	80036fc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d8f7      	bhi.n	800373c <HAL_Delay+0x28>
  {
  }
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000024 	.word	0x20000024

08003758 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3360      	adds	r3, #96	; 0x60
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <LL_ADC_SetOffset+0x44>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	03fff000 	.word	0x03fff000

08003808 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3360      	adds	r3, #96	; 0x60
 8003816:	461a      	mov	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3360      	adds	r3, #96	; 0x60
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	431a      	orrs	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	615a      	str	r2, [r3, #20]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3330      	adds	r3, #48	; 0x30
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	4413      	add	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	211f      	movs	r1, #31
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	f003 011f 	and.w	r1, r3, #31
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3314      	adds	r3, #20
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	0e5b      	lsrs	r3, r3, #25
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	0d1b      	lsrs	r3, r3, #20
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2107      	movs	r1, #7
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	401a      	ands	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0d1b      	lsrs	r3, r3, #20
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	431a      	orrs	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	43db      	mvns	r3, r3
 800395a:	401a      	ands	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0318 	and.w	r3, r3, #24
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003964:	40d9      	lsrs	r1, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	400b      	ands	r3, r1
 800396a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	0007ffff 	.word	0x0007ffff

08003988 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003998:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6093      	str	r3, [r2, #8]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c0:	d101      	bne.n	80039c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a10:	d101      	bne.n	8003a16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <LL_ADC_IsEnabled+0x18>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <LL_ADC_IsEnabled+0x1a>
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d101      	bne.n	8003a62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d101      	bne.n	8003a88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e132      	b.n	8003d18 <HAL_ADC_Init+0x280>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fe fff9 	bl	8002ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff67 	bl	80039ac <LL_ADC_IsDeepPowerDownEnabled>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff4d 	bl	8003988 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff82 	bl	80039fc <LL_ADC_IsInternalRegulatorEnabled>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d113      	bne.n	8003b26 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ff66 	bl	80039d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b08:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_ADC_Init+0x288>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	4a85      	ldr	r2, [pc, #532]	; (8003d24 <HAL_ADC_Init+0x28c>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b18:	e002      	b.n	8003b20 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f9      	bne.n	8003b1a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff66 	bl	80039fc <LL_ADC_IsInternalRegulatorEnabled>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff77 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003b5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 80cd 	bne.w	8003d06 <HAL_ADC_Init+0x26e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 80c9 	bne.w	8003d06 <HAL_ADC_Init+0x26e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b7c:	f043 0202 	orr.w	r2, r3, #2
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff4b 	bl	8003a24 <LL_ADC_IsEnabled>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d110      	bne.n	8003bb6 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b94:	4864      	ldr	r0, [pc, #400]	; (8003d28 <HAL_ADC_Init+0x290>)
 8003b96:	f7ff ff45 	bl	8003a24 <LL_ADC_IsEnabled>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	4863      	ldr	r0, [pc, #396]	; (8003d2c <HAL_ADC_Init+0x294>)
 8003b9e:	f7ff ff41 	bl	8003a24 <LL_ADC_IsEnabled>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4323      	orrs	r3, r4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	485f      	ldr	r0, [pc, #380]	; (8003d30 <HAL_ADC_Init+0x298>)
 8003bb2:	f7ff fdd1 	bl	8003758 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7e5b      	ldrb	r3, [r3, #25]
 8003bba:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bc0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003bc6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003bcc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d106      	bne.n	8003bf2 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	3b01      	subs	r3, #1
 8003bea:	045b      	lsls	r3, r3, #17
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_ADC_Init+0x29c>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff0f 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003c2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff1c 	bl	8003a70 <LL_ADC_INJ_IsConversionOngoing>
 8003c38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d140      	bne.n	8003cc2 <HAL_ADC_Init+0x22a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13d      	bne.n	8003cc2 <HAL_ADC_Init+0x22a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7e1b      	ldrb	r3, [r3, #24]
 8003c4e:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c50:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c68:	f023 0306 	bic.w	r3, r3, #6
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	430b      	orrs	r3, r1
 8003c74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d118      	bne.n	8003cb2 <HAL_ADC_Init+0x21a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c96:	4311      	orrs	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	611a      	str	r2, [r3, #16]
 8003cb0:	e007      	b.n	8003cc2 <HAL_ADC_Init+0x22a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_ADC_Init+0x24c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f023 010f 	bic.w	r1, r3, #15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	1e5a      	subs	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce2:	e007      	b.n	8003cf4 <HAL_ADC_Init+0x25c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 020f 	bic.w	r2, r2, #15
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	659a      	str	r2, [r3, #88]	; 0x58
 8003d04:	e007      	b.n	8003d16 <HAL_ADC_Init+0x27e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3724      	adds	r7, #36	; 0x24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	20000004 	.word	0x20000004
 8003d24:	053e2d63 	.word	0x053e2d63
 8003d28:	42028000 	.word	0x42028000
 8003d2c:	42028100 	.word	0x42028100
 8003d30:	42028300 	.word	0x42028300
 8003d34:	fff0c007 	.word	0xfff0c007

08003d38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b0b7      	sub	sp, #220	; 0xdc
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x22>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e3c0      	b.n	80044dc <HAL_ADC_ConfigChannel+0x7a4>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe6f 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 83a5 	bne.w	80044be <HAL_ADC_ConfigChannel+0x786>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f7ff fd85 	bl	8003890 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fe5d 	bl	8003a4a <LL_ADC_REG_IsConversionOngoing>
 8003d90:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fe69 	bl	8003a70 <LL_ADC_INJ_IsConversionOngoing>
 8003d9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003da2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 81c1 	bne.w	800412e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 81bc 	bne.w	800412e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dbe:	d10f      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7ff fd8c 	bl	80038e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fd46 	bl	800386a <LL_ADC_SetSamplingTimeCommonConfig>
 8003dde:	e00e      	b.n	8003dfe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f7ff fd7b 	bl	80038e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fd36 	bl	800386a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d00a      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6919      	ldr	r1, [r3, #16]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e30:	f7ff fcc6 	bl	80037c0 <LL_ADC_SetOffset>
 8003e34:	e17b      	b.n	800412e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fce3 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x12a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fcd8 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	e01e      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x168>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fccd 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003e90:	2320      	movs	r3, #32
 8003e92:	e004      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x180>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	e018      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1b2>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e004      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d106      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fc9c 	bl	8003834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fc80 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x1f0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fc75 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	e01e      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x22e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fc6a 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e004      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8003f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x246>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	0e9b      	lsrs	r3, r3, #26
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	e018      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x278>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e004      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8003fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fc39 	bl	8003834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc1d 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x2b6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fc12 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	f003 021f 	and.w	r2, r3, #31
 8003fec:	e01e      	b.n	800402c <HAL_ADC_ConfigChannel+0x2f4>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fc07 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800400c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800401c:	2320      	movs	r3, #32
 800401e:	e004      	b.n	800402a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8004020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x30c>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	e016      	b.n	8004072 <HAL_ADC_ConfigChannel+0x33a>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800405c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e004      	b.n	8004072 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8004068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004072:	429a      	cmp	r2, r3
 8004074:	d106      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fbd8 	bl	8003834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2103      	movs	r1, #3
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fbbc 	bl	8003808 <LL_ADC_GetOffsetChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x378>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2103      	movs	r1, #3
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fbb1 	bl	8003808 <LL_ADC_GetOffsetChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	f003 021f 	and.w	r2, r3, #31
 80040ae:	e017      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x3a8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2103      	movs	r1, #3
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fba6 	bl	8003808 <LL_ADC_GetOffsetChannel>
 80040bc:	4603      	mov	r3, r0
 80040be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80040c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80040cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80040d2:	2320      	movs	r3, #32
 80040d4:	e003      	b.n	80040de <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80040d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d105      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x3c0>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	e011      	b.n	800411c <HAL_ADC_ConfigChannel+0x3e4>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004108:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8004110:	2320      	movs	r3, #32
 8004112:	e003      	b.n	800411c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800411c:	429a      	cmp	r2, r3
 800411e:	d106      	bne.n	800412e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2200      	movs	r2, #0
 8004126:	2103      	movs	r1, #3
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fb83 	bl	8003834 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fc76 	bl	8003a24 <LL_ADC_IsEnabled>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 81c8 	bne.w	80044d0 <HAL_ADC_ConfigChannel+0x798>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6819      	ldr	r1, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	461a      	mov	r2, r3
 800414e:	f7ff fbf7 	bl	8003940 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	4a8f      	ldr	r2, [pc, #572]	; (8004394 <HAL_ADC_ConfigChannel+0x65c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f040 8131 	bne.w	80043c0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x44e>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	3301      	adds	r3, #1
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2b09      	cmp	r3, #9
 800417c:	bf94      	ite	ls
 800417e:	2301      	movls	r3, #1
 8004180:	2300      	movhi	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e019      	b.n	80041ba <HAL_ADC_ConfigChannel+0x482>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004196:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800419e:	2320      	movs	r3, #32
 80041a0:	e003      	b.n	80041aa <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80041a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2b09      	cmp	r3, #9
 80041b2:	bf94      	ite	ls
 80041b4:	2301      	movls	r3, #1
 80041b6:	2300      	movhi	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d079      	beq.n	80042b2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_ADC_ConfigChannel+0x4a2>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0e9b      	lsrs	r3, r3, #26
 80041d0:	3301      	adds	r3, #1
 80041d2:	069b      	lsls	r3, r3, #26
 80041d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041d8:	e015      	b.n	8004206 <HAL_ADC_ConfigChannel+0x4ce>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e003      	b.n	80041fe <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80041f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	069b      	lsls	r3, r3, #26
 8004202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x4ee>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0e9b      	lsrs	r3, r3, #26
 8004218:	3301      	adds	r3, #1
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	e017      	b.n	8004256 <HAL_ADC_ConfigChannel+0x51e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800423e:	2320      	movs	r3, #32
 8004240:	e003      	b.n	800424a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3301      	adds	r3, #1
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	ea42 0103 	orr.w	r1, r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_ADC_ConfigChannel+0x544>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	0e9b      	lsrs	r3, r3, #26
 800426c:	3301      	adds	r3, #1
 800426e:	f003 021f 	and.w	r2, r3, #31
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	051b      	lsls	r3, r3, #20
 800427a:	e018      	b.n	80042ae <HAL_ADC_ConfigChannel+0x576>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004294:	2320      	movs	r3, #32
 8004296:	e003      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	f003 021f 	and.w	r2, r3, #31
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ae:	430b      	orrs	r3, r1
 80042b0:	e081      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x596>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	0e9b      	lsrs	r3, r3, #26
 80042c4:	3301      	adds	r3, #1
 80042c6:	069b      	lsls	r3, r3, #26
 80042c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042cc:	e015      	b.n	80042fa <HAL_ADC_ConfigChannel+0x5c2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80042e6:	2320      	movs	r3, #32
 80042e8:	e003      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	3301      	adds	r3, #1
 80042f4:	069b      	lsls	r3, r3, #26
 80042f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_ADC_ConfigChannel+0x5e2>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0e9b      	lsrs	r3, r3, #26
 800430c:	3301      	adds	r3, #1
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	e017      	b.n	800434a <HAL_ADC_ConfigChannel+0x612>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	61fb      	str	r3, [r7, #28]
  return result;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8004332:	2320      	movs	r3, #32
 8004334:	e003      	b.n	800433e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	3301      	adds	r3, #1
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	ea42 0103 	orr.w	r1, r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x63e>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	0e9b      	lsrs	r3, r3, #26
 8004360:	3301      	adds	r3, #1
 8004362:	f003 021f 	and.w	r2, r3, #31
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	3b1e      	subs	r3, #30
 800436e:	051b      	lsls	r3, r3, #20
 8004370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004374:	e01e      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x67c>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	613b      	str	r3, [r7, #16]
  return result;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e006      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x668>
 8004392:	bf00      	nop
 8004394:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f003 021f 	and.w	r2, r3, #31
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	3b1e      	subs	r3, #30
 80043ae:	051b      	lsls	r3, r3, #20
 80043b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b4:	430b      	orrs	r3, r1
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	6892      	ldr	r2, [r2, #8]
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7ff fa94 	bl	80038e8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_ADC_ConfigChannel+0x7ac>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8081 	beq.w	80044d0 <HAL_ADC_ConfigChannel+0x798>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043ce:	4846      	ldr	r0, [pc, #280]	; (80044e8 <HAL_ADC_ConfigChannel+0x7b0>)
 80043d0:	f7ff f9e8 	bl	80037a4 <LL_ADC_GetCommonPathInternalCh>
 80043d4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d8:	4844      	ldr	r0, [pc, #272]	; (80044ec <HAL_ADC_ConfigChannel+0x7b4>)
 80043da:	f7ff fb23 	bl	8003a24 <LL_ADC_IsEnabled>
 80043de:	4604      	mov	r4, r0
 80043e0:	4843      	ldr	r0, [pc, #268]	; (80044f0 <HAL_ADC_ConfigChannel+0x7b8>)
 80043e2:	f7ff fb1f 	bl	8003a24 <LL_ADC_IsEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4323      	orrs	r3, r4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d15d      	bne.n	80044aa <HAL_ADC_ConfigChannel+0x772>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d126      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x70e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d120      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x70e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a38      	ldr	r2, [pc, #224]	; (80044ec <HAL_ADC_ConfigChannel+0x7b4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d160      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800440e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004416:	4619      	mov	r1, r3
 8004418:	4833      	ldr	r0, [pc, #204]	; (80044e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800441a:	f7ff f9b0 	bl	800377e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_ADC_ConfigChannel+0x7c4>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	099a      	lsrs	r2, r3, #6
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004436:	e002      	b.n	800443e <HAL_ADC_ConfigChannel+0x706>
              {
                wait_loop_index--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3b01      	subs	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f9      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x700>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004444:	e044      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <HAL_ADC_ConfigChannel+0x7c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d113      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x740>
 8004450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x740>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_ADC_ConfigChannel+0x7b4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d134      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	4619      	mov	r1, r3
 8004470:	481d      	ldr	r0, [pc, #116]	; (80044e8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004472:	f7ff f984 	bl	800377e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004476:	e02b      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_ADC_ConfigChannel+0x7cc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d126      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
 8004482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d120      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a16      	ldr	r2, [pc, #88]	; (80044ec <HAL_ADC_ConfigChannel+0x7b4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d11b      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044a0:	4619      	mov	r1, r3
 80044a2:	4811      	ldr	r0, [pc, #68]	; (80044e8 <HAL_ADC_ConfigChannel+0x7b0>)
 80044a4:	f7ff f96b 	bl	800377e <LL_ADC_SetCommonPathInternalCh>
 80044a8:	e012      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044bc:	e008      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x798>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80044d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80044dc:	4618      	mov	r0, r3
 80044de:	37dc      	adds	r7, #220	; 0xdc
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	80080000 	.word	0x80080000
 80044e8:	42028300 	.word	0x42028300
 80044ec:	42028000 	.word	0x42028000
 80044f0:	42028100 	.word	0x42028100
 80044f4:	c7520000 	.word	0xc7520000
 80044f8:	20000004 	.word	0x20000004
 80044fc:	053e2d63 	.word	0x053e2d63
 8004500:	cb840000 	.word	0xcb840000
 8004504:	80000001 	.word	0x80000001

08004508 <LL_ADC_IsEnabled>:
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <LL_ADC_IsEnabled+0x18>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <LL_ADC_IsEnabled+0x1a>
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_ADC_REG_IsConversionOngoing>:
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d101      	bne.n	8004546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b0a1      	sub	sp, #132	; 0x84
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800456e:	2302      	movs	r3, #2
 8004570:	e085      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a42      	ldr	r2, [pc, #264]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d102      	bne.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004584:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e001      	b.n	800458e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e068      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ffbd 	bl	800452e <LL_ADC_REG_IsConversionOngoing>
 80045b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff ffb7 	bl	800452e <LL_ADC_REG_IsConversionOngoing>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d14a      	bne.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d147      	bne.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80045ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d027      	beq.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6859      	ldr	r1, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ea:	035b      	lsls	r3, r3, #13
 80045ec:	430b      	orrs	r3, r1
 80045ee:	431a      	orrs	r2, r3
 80045f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045f4:	4824      	ldr	r0, [pc, #144]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80045f6:	f7ff ff87 	bl	8004508 <LL_ADC_IsEnabled>
 80045fa:	4604      	mov	r4, r0
 80045fc:	4823      	ldr	r0, [pc, #140]	; (800468c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80045fe:	f7ff ff83 	bl	8004508 <LL_ADC_IsEnabled>
 8004602:	4603      	mov	r3, r0
 8004604:	4323      	orrs	r3, r4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d132      	bne.n	8004670 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800460a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004612:	f023 030f 	bic.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	6892      	ldr	r2, [r2, #8]
 800461e:	430a      	orrs	r2, r1
 8004620:	431a      	orrs	r2, r3
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004626:	e023      	b.n	8004670 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004632:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004634:	4814      	ldr	r0, [pc, #80]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004636:	f7ff ff67 	bl	8004508 <LL_ADC_IsEnabled>
 800463a:	4604      	mov	r4, r0
 800463c:	4813      	ldr	r0, [pc, #76]	; (800468c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800463e:	f7ff ff63 	bl	8004508 <LL_ADC_IsEnabled>
 8004642:	4603      	mov	r3, r0
 8004644:	4323      	orrs	r3, r4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d112      	bne.n	8004670 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800464a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004652:	f023 030f 	bic.w	r3, r3, #15
 8004656:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004658:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800465a:	e009      	b.n	8004670 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800466e:	e000      	b.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004670:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800467a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800467e:	4618      	mov	r0, r3
 8004680:	3784      	adds	r7, #132	; 0x84
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	bf00      	nop
 8004688:	42028000 	.word	0x42028000
 800468c:	42028100 	.word	0x42028100
 8004690:	42028300 	.word	0x42028300

08004694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <__NVIC_SetPriorityGrouping+0x44>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046b0:	4013      	ands	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <__NVIC_SetPriorityGrouping+0x44>)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	60d3      	str	r3, [r2, #12]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <__NVIC_GetPriorityGrouping+0x18>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	f003 0307 	and.w	r3, r3, #7
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	2b00      	cmp	r3, #0
 8004708:	db0b      	blt.n	8004722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	f003 021f 	and.w	r2, r3, #31
 8004710:	4907      	ldr	r1, [pc, #28]	; (8004730 <__NVIC_EnableIRQ+0x38>)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2001      	movs	r0, #1
 800471a:	fa00 f202 	lsl.w	r2, r0, r2
 800471e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000e100 	.word	0xe000e100

08004734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004744:	2b00      	cmp	r3, #0
 8004746:	db0a      	blt.n	800475e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	490c      	ldr	r1, [pc, #48]	; (8004780 <__NVIC_SetPriority+0x4c>)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	0152      	lsls	r2, r2, #5
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	440b      	add	r3, r1
 8004758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800475c:	e00a      	b.n	8004774 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4908      	ldr	r1, [pc, #32]	; (8004784 <__NVIC_SetPriority+0x50>)
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	3b04      	subs	r3, #4
 800476c:	0152      	lsls	r2, r2, #5
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	440b      	add	r3, r1
 8004772:	761a      	strb	r2, [r3, #24]
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000e100 	.word	0xe000e100
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f1c3 0307 	rsb	r3, r3, #7
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	bf28      	it	cs
 80047a6:	2303      	movcs	r3, #3
 80047a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3303      	adds	r3, #3
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d902      	bls.n	80047b8 <NVIC_EncodePriority+0x30>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	3b04      	subs	r3, #4
 80047b6:	e000      	b.n	80047ba <NVIC_EncodePriority+0x32>
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	401a      	ands	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047d0:	f04f 31ff 	mov.w	r1, #4294967295
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	fa01 f303 	lsl.w	r3, r1, r3
 80047da:	43d9      	mvns	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e0:	4313      	orrs	r3, r2
         );
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3724      	adds	r7, #36	; 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004800:	d301      	bcc.n	8004806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004802:	2301      	movs	r3, #1
 8004804:	e00f      	b.n	8004826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <SysTick_Config+0x40>)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3b01      	subs	r3, #1
 800480c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800480e:	2107      	movs	r1, #7
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	f7ff ff8e 	bl	8004734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <SysTick_Config+0x40>)
 800481a:	2200      	movs	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <SysTick_Config+0x40>)
 8004820:	2207      	movs	r2, #7
 8004822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000e010 	.word	0xe000e010

08004834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff29 	bl	8004694 <__NVIC_SetPriorityGrouping>
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	4603      	mov	r3, r0
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004858:	f7ff ff40 	bl	80046dc <__NVIC_GetPriorityGrouping>
 800485c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	6978      	ldr	r0, [r7, #20]
 8004864:	f7ff ff90 	bl	8004788 <NVIC_EncodePriority>
 8004868:	4602      	mov	r2, r0
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff5f 	bl	8004734 <__NVIC_SetPriority>
}
 8004876:	bf00      	nop
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	4603      	mov	r3, r0
 8004886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff33 	bl	80046f8 <__NVIC_EnableIRQ>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ffa4 	bl	80047f0 <SysTick_Config>
 80048a8:	4603      	mov	r3, r0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80048b2:	b480      	push	{r7}
 80048b4:	b087      	sub	sp, #28
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	460b      	mov	r3, r1
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80048c4:	7afb      	ldrb	r3, [r7, #11]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d00a      	beq.n	80048e0 <HAL_EXTI_RegisterCallback+0x2e>
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d00c      	beq.n	80048e8 <HAL_EXTI_RegisterCallback+0x36>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10e      	bne.n	80048f0 <HAL_EXTI_RegisterCallback+0x3e>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
      break;
 80048de:	e00a      	b.n	80048f6 <HAL_EXTI_RegisterCallback+0x44>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	605a      	str	r2, [r3, #4]
      break;
 80048e6:	e006      	b.n	80048f6 <HAL_EXTI_RegisterCallback+0x44>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_EXTI_RegisterCallback+0x44>

    default:
      status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
      break;
 80048f4:	bf00      	nop
  }

  return status;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e003      	b.n	8004920 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2201      	movs	r2, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <HAL_EXTI_IRQHandler+0x88>)
 8004956:	4413      	add	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_EXTI_IRQHandler+0x8c>)
 8004984:	4413      	add	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d009      	beq.n	80049ac <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	4798      	blx	r3
    }
  }
}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	4002f40c 	.word	0x4002f40c
 80049b8:	4002f410 	.word	0x4002f410

080049bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049ca:	e158      	b.n	8004c7e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 814a 	beq.w	8004c78 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d00b      	beq.n	8004a04 <HAL_GPIO_Init+0x48>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d007      	beq.n	8004a04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049f8:	2b11      	cmp	r3, #17
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b12      	cmp	r3, #18
 8004a02:	d130      	bne.n	8004a66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2203      	movs	r2, #3
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4013      	ands	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0201 	and.w	r2, r3, #1
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2203      	movs	r2, #3
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0xea>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b12      	cmp	r3, #18
 8004aa4:	d123      	bne.n	8004aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	220f      	movs	r2, #15
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	08da      	lsrs	r2, r3, #3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3208      	adds	r2, #8
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2203      	movs	r2, #3
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0203 	and.w	r2, r3, #3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80a4 	beq.w	8004c78 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004b30:	4a5a      	ldr	r2, [pc, #360]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	3318      	adds	r3, #24
 8004b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	220f      	movs	r2, #15
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a52      	ldr	r2, [pc, #328]	; (8004ca0 <HAL_GPIO_Init+0x2e4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d025      	beq.n	8004ba8 <HAL_GPIO_Init+0x1ec>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a51      	ldr	r2, [pc, #324]	; (8004ca4 <HAL_GPIO_Init+0x2e8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01f      	beq.n	8004ba4 <HAL_GPIO_Init+0x1e8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a50      	ldr	r2, [pc, #320]	; (8004ca8 <HAL_GPIO_Init+0x2ec>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d019      	beq.n	8004ba0 <HAL_GPIO_Init+0x1e4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a4f      	ldr	r2, [pc, #316]	; (8004cac <HAL_GPIO_Init+0x2f0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_GPIO_Init+0x1e0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a4e      	ldr	r2, [pc, #312]	; (8004cb0 <HAL_GPIO_Init+0x2f4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00d      	beq.n	8004b98 <HAL_GPIO_Init+0x1dc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a4d      	ldr	r2, [pc, #308]	; (8004cb4 <HAL_GPIO_Init+0x2f8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <HAL_GPIO_Init+0x1d8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a4c      	ldr	r2, [pc, #304]	; (8004cb8 <HAL_GPIO_Init+0x2fc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_GPIO_Init+0x1d4>
 8004b8c:	2306      	movs	r3, #6
 8004b8e:	e00c      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004b90:	2307      	movs	r3, #7
 8004b92:	e00a      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004b94:	2305      	movs	r3, #5
 8004b96:	e008      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	e006      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e004      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e002      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_GPIO_Init+0x1ee>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	f002 0203 	and.w	r2, r2, #3
 8004bb0:	00d2      	lsls	r2, r2, #3
 8004bb2:	4093      	lsls	r3, r2
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004bba:	4938      	ldr	r1, [pc, #224]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bc8:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bee:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <HAL_GPIO_Init+0x2e0>)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f ae9f 	bne.w	80049cc <HAL_GPIO_Init+0x10>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	4002f400 	.word	0x4002f400
 8004ca0:	42020000 	.word	0x42020000
 8004ca4:	42020400 	.word	0x42020400
 8004ca8:	42020800 	.word	0x42020800
 8004cac:	42020c00 	.word	0x42020c00
 8004cb0:	42021000 	.word	0x42021000
 8004cb4:	42021400 	.word	0x42021400
 8004cb8:	42021800 	.word	0x42021800

08004cbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004cca:	e0c7      	b.n	8004e5c <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004ccc:	2201      	movs	r2, #1
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80ba 	beq.w	8004e56 <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 8004ce2:	4a65      	ldr	r2, [pc, #404]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	3318      	adds	r3, #24
 8004cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cee:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	220f      	movs	r2, #15
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4013      	ands	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a5d      	ldr	r2, [pc, #372]	; (8004e7c <HAL_GPIO_DeInit+0x1c0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d025      	beq.n	8004d58 <HAL_GPIO_DeInit+0x9c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a5c      	ldr	r2, [pc, #368]	; (8004e80 <HAL_GPIO_DeInit+0x1c4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d01f      	beq.n	8004d54 <HAL_GPIO_DeInit+0x98>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a5b      	ldr	r2, [pc, #364]	; (8004e84 <HAL_GPIO_DeInit+0x1c8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d019      	beq.n	8004d50 <HAL_GPIO_DeInit+0x94>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a5a      	ldr	r2, [pc, #360]	; (8004e88 <HAL_GPIO_DeInit+0x1cc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <HAL_GPIO_DeInit+0x90>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a59      	ldr	r2, [pc, #356]	; (8004e8c <HAL_GPIO_DeInit+0x1d0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00d      	beq.n	8004d48 <HAL_GPIO_DeInit+0x8c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_GPIO_DeInit+0x1d4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <HAL_GPIO_DeInit+0x88>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a57      	ldr	r2, [pc, #348]	; (8004e94 <HAL_GPIO_DeInit+0x1d8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_GPIO_DeInit+0x84>
 8004d3c:	2306      	movs	r3, #6
 8004d3e:	e00c      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d40:	2307      	movs	r3, #7
 8004d42:	e00a      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d44:	2305      	movs	r3, #5
 8004d46:	e008      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	e006      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e004      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e002      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <HAL_GPIO_DeInit+0x9e>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	f002 0203 	and.w	r2, r2, #3
 8004d60:	00d2      	lsls	r2, r2, #3
 8004d62:	4093      	lsls	r3, r2
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d136      	bne.n	8004dd8 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004d6a:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d6c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4940      	ldr	r1, [pc, #256]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d7c:	4b3e      	ldr	r3, [pc, #248]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	493c      	ldr	r1, [pc, #240]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d8e:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	4938      	ldr	r1, [pc, #224]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	4934      	ldr	r1, [pc, #208]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	604b      	str	r3, [r1, #4]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	220f      	movs	r2, #15
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	482b      	ldr	r0, [pc, #172]	; (8004e78 <HAL_GPIO_DeInit+0x1bc>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	2103      	movs	r1, #3
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3208      	adds	r2, #8
 8004df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	220f      	movs	r2, #15
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	08d2      	lsrs	r2, r2, #3
 8004e0c:	4019      	ands	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3208      	adds	r2, #8
 8004e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	2103      	movs	r1, #3
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	401a      	ands	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	2101      	movs	r1, #1
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	2103      	movs	r1, #3
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	401a      	ands	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f af31 	bne.w	8004ccc <HAL_GPIO_DeInit+0x10>
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	4002f400 	.word	0x4002f400
 8004e7c:	42020000 	.word	0x42020000
 8004e80:	42020400 	.word	0x42020400
 8004e84:	42020800 	.word	0x42020800
 8004e88:	42020c00 	.word	0x42020c00
 8004e8c:	42021000 	.word	0x42021000
 8004e90:	42021400 	.word	0x42021400
 8004e94:	42021800 	.word	0x42021800

08004e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	e001      	b.n	8004eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	807b      	strh	r3, [r7, #2]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed8:	787b      	ldrb	r3, [r7, #1]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ede:	887a      	ldrh	r2, [r7, #2]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee4:	e002      	b.n	8004eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	041a      	lsls	r2, r3, #16
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	43d9      	mvns	r1, r3
 8004f16:	887b      	ldrh	r3, [r7, #2]
 8004f18:	400b      	ands	r3, r1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	619a      	str	r2, [r3, #24]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2e:	b08b      	sub	sp, #44	; 0x2c
 8004f30:	af06      	add	r7, sp, #24
 8004f32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0d7      	b.n	80050ee <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fd fea8 	bl	8002ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f003 fa6f 	bl	8008448 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e04c      	b.n	800500a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	3301      	adds	r3, #1
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	440b      	add	r3, r1
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f9a:	7bfa      	ldrb	r2, [r7, #15]
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	b298      	uxth	r0, r3
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	440b      	add	r3, r1
 8004fac:	3336      	adds	r3, #54	; 0x36
 8004fae:	4602      	mov	r2, r0
 8004fb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3303      	adds	r3, #3
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fc8:	7bfa      	ldrb	r2, [r7, #15]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3338      	adds	r3, #56	; 0x38
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	440b      	add	r3, r1
 8004fea:	333c      	adds	r3, #60	; 0x3c
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ff0:	7bfa      	ldrb	r2, [r7, #15]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3340      	adds	r3, #64	; 0x40
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	3301      	adds	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d3ad      	bcc.n	8004f70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e044      	b.n	80050a4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	f203 1369 	addw	r3, r3, #361	; 0x169
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005042:	7bfa      	ldrb	r2, [r7, #15]
 8005044:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005046:	7bfa      	ldrb	r2, [r7, #15]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	440b      	add	r3, r1
 800506a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	440b      	add	r3, r1
 8005080:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	3301      	adds	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
 80050a4:	7bfa      	ldrb	r2, [r7, #15]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3b5      	bcc.n	800501a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	687e      	ldr	r6, [r7, #4]
 80050b6:	466d      	mov	r5, sp
 80050b8:	f106 0410 	add.w	r4, r6, #16
 80050bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	1d33      	adds	r3, r6, #4
 80050c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050c8:	6838      	ldr	r0, [r7, #0]
 80050ca:	f003 f9d8 	bl	800847e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d102      	bne.n	80050ec <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f805 	bl	80050f6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050f6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800511a:	b29b      	uxth	r3, r3
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800512e:	b29b      	uxth	r3, r3
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a04      	ldr	r2, [pc, #16]	; (8005168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_PWREx_GetVoltageRange+0x18>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40007000 	.word	0x40007000

08005188 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8005190:	4b27      	ldr	r3, [pc, #156]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005198:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800519a:	f000 f861 	bl	8005260 <HAL_PWREx_SMPS_GetEffectiveMode>
 800519e:	4603      	mov	r3, r0
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	d101      	bne.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e03e      	b.n	8005228 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80051aa:	4b21      	ldr	r3, [pc, #132]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b6:	d101      	bne.n	80051bc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e035      	b.n	8005228 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d101      	bne.n	80051c8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e02f      	b.n	8005228 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80051d0:	4917      	ldr	r1, [pc, #92]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80051d8:	4b16      	ldr	r3, [pc, #88]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	09db      	lsrs	r3, r3, #7
 80051e6:	2232      	movs	r2, #50	; 0x32
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f8:	e002      	b.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520c:	d102      	bne.n	8005214 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f2      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005220:	d101      	bne.n	8005226 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e000      	b.n	8005228 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40007000 	.word	0x40007000
 8005234:	20000004 	.word	0x20000004
 8005238:	0a7c5ac5 	.word	0x0a7c5ac5
 800523c:	cccccccd 	.word	0xcccccccd

08005240 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_PWREx_EnableVddIO2+0x1c>)
 800524a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800524e:	6053      	str	r3, [r2, #4]
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40007000 	.word	0x40007000

08005260 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8005276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	e00a      	b.n	8005294 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8005288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	e001      	b.n	8005294 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8005290:	2300      	movs	r3, #0
 8005292:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8005294:	687b      	ldr	r3, [r7, #4]
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40007000 	.word	0x40007000

080052a8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f000 bc52 	b.w	8005b60 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052bc:	4ba3      	ldr	r3, [pc, #652]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c6:	4ba1      	ldr	r3, [pc, #644]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80da 	beq.w	8005492 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <HAL_RCC_OscConfig+0x4a>
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	f040 8081 	bne.w	80053ee <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d17d      	bne.n	80053ee <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052f2:	4b96      	ldr	r3, [pc, #600]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d006      	beq.n	800530c <HAL_RCC_OscConfig+0x64>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f000 bc2a 	b.w	8005b60 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005310:	4b8e      	ldr	r3, [pc, #568]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <HAL_RCC_OscConfig+0x7e>
 800531c:	4b8b      	ldr	r3, [pc, #556]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005324:	e005      	b.n	8005332 <HAL_RCC_OscConfig+0x8a>
 8005326:	4b89      	ldr	r3, [pc, #548]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005332:	4293      	cmp	r3, r2
 8005334:	d224      	bcs.n	8005380 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fe0e 	bl	8005f5c <RCC_SetFlashLatencyFromMSIRange>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f000 bc0a 	b.w	8005b60 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800534c:	4b7f      	ldr	r3, [pc, #508]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a7e      	ldr	r2, [pc, #504]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005352:	f043 0308 	orr.w	r3, r3, #8
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b7c      	ldr	r3, [pc, #496]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	4979      	ldr	r1, [pc, #484]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536a:	4b78      	ldr	r3, [pc, #480]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4974      	ldr	r1, [pc, #464]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
 800537e:	e025      	b.n	80053cc <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005380:	4b72      	ldr	r3, [pc, #456]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a71      	ldr	r2, [pc, #452]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005386:	f043 0308 	orr.w	r3, r3, #8
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	496c      	ldr	r1, [pc, #432]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800539e:	4b6b      	ldr	r3, [pc, #428]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	4967      	ldr	r1, [pc, #412]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fdcd 	bl	8005f5c <RCC_SetFlashLatencyFromMSIRange>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e3c9      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053cc:	f000 fd8a 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b5f      	ldr	r3, [pc, #380]	; (8005550 <HAL_RCC_OscConfig+0x2a8>)
 80053d4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053d6:	4b5f      	ldr	r3, [pc, #380]	; (8005554 <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe f93e 	bl	800365c <HAL_InitTick>
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d052      	beq.n	8005490 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	e3b8      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d032      	beq.n	800545c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053f6:	4b55      	ldr	r3, [pc, #340]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a54      	ldr	r2, [pc, #336]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005402:	f7fe f97b 	bl	80036fc <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800540a:	f7fe f977 	bl	80036fc <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e3a1      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800541c:	4b4b      	ldr	r3, [pc, #300]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005428:	4b48      	ldr	r3, [pc, #288]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a47      	ldr	r2, [pc, #284]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800542e:	f043 0308 	orr.w	r3, r3, #8
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b45      	ldr	r3, [pc, #276]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	4942      	ldr	r1, [pc, #264]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	493d      	ldr	r1, [pc, #244]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
 800545a:	e01a      	b.n	8005492 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800545c:	4b3b      	ldr	r3, [pc, #236]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a3a      	ldr	r2, [pc, #232]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005468:	f7fe f948 	bl	80036fc <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005470:	f7fe f944 	bl	80036fc <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e36e      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005482:	4b32      	ldr	r3, [pc, #200]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c8>
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d071      	beq.n	8005582 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_OscConfig+0x208>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d10e      	bne.n	80054c8 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d10b      	bne.n	80054c8 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	4b26      	ldr	r3, [pc, #152]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d061      	beq.n	8005580 <HAL_RCC_OscConfig+0x2d8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d15d      	bne.n	8005580 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e34b      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCC_OscConfig+0x238>
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e01d      	b.n	800551c <HAL_RCC_OscConfig+0x274>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x25c>
 80054ea:	4b18      	ldr	r3, [pc, #96]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b15      	ldr	r3, [pc, #84]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0x274>
 8005504:	4b11      	ldr	r3, [pc, #68]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a10      	ldr	r2, [pc, #64]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 800550a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b0e      	ldr	r3, [pc, #56]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0d      	ldr	r2, [pc, #52]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fe f8ea 	bl	80036fc <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800552c:	f7fe f8e6 	bl	80036fc <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e310      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800553e:	4b03      	ldr	r3, [pc, #12]	; (800554c <HAL_RCC_OscConfig+0x2a4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0x284>
 800554a:	e01a      	b.n	8005582 <HAL_RCC_OscConfig+0x2da>
 800554c:	40021000 	.word	0x40021000
 8005550:	20000004 	.word	0x20000004
 8005554:	20000020 	.word	0x20000020
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fe f8d0 	bl	80036fc <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fe f8cc 	bl	80036fc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e2f6      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005572:	4ba6      	ldr	r3, [pc, #664]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x2b8>
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d060      	beq.n	8005650 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2f8>
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d119      	bne.n	80055ce <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d116      	bne.n	80055ce <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a0:	4b9a      	ldr	r3, [pc, #616]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_OscConfig+0x310>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e2d3      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b8:	4b94      	ldr	r3, [pc, #592]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	4991      	ldr	r1, [pc, #580]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055cc:	e040      	b.n	8005650 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d023      	beq.n	800561e <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d6:	4b8d      	ldr	r3, [pc, #564]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a8c      	ldr	r2, [pc, #560]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fe f88b 	bl	80036fc <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fe f887 	bl	80036fc <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e2b1      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055fc:	4b83      	ldr	r3, [pc, #524]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	4b80      	ldr	r3, [pc, #512]	; (800580c <HAL_RCC_OscConfig+0x564>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	497d      	ldr	r1, [pc, #500]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005618:	4313      	orrs	r3, r2
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	e018      	b.n	8005650 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561e:	4b7b      	ldr	r3, [pc, #492]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a7a      	ldr	r2, [pc, #488]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fe f867 	bl	80036fc <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005632:	f7fe f863 	bl	80036fc <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e28d      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005644:	4b71      	ldr	r3, [pc, #452]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d051      	beq.n	8005700 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d031      	beq.n	80056c8 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800566c:	4b67      	ldr	r3, [pc, #412]	; (800580c <HAL_RCC_OscConfig+0x564>)
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	4a66      	ldr	r2, [pc, #408]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005674:	f023 0310 	bic.w	r3, r3, #16
 8005678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800567c:	e007      	b.n	800568e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800567e:	4b63      	ldr	r3, [pc, #396]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005684:	4a61      	ldr	r2, [pc, #388]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005686:	f043 0310 	orr.w	r3, r3, #16
 800568a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800568e:	4b5f      	ldr	r3, [pc, #380]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005694:	4a5d      	ldr	r2, [pc, #372]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fe f82d 	bl	80036fc <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a6:	f7fe f829 	bl	80036fc <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b07      	cmp	r3, #7
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e253      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056b8:	4b54      	ldr	r3, [pc, #336]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80056ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ef      	beq.n	80056a6 <HAL_RCC_OscConfig+0x3fe>
 80056c6:	e01b      	b.n	8005700 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056c8:	4b50      	ldr	r3, [pc, #320]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80056ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ce:	4a4f      	ldr	r2, [pc, #316]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d8:	f7fe f810 	bl	80036fc <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e0:	f7fe f80c 	bl	80036fc <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b07      	cmp	r3, #7
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e236      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056f2:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80056f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ef      	bne.n	80056e0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8109 	beq.w	8005920 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005712:	4b3e      	ldr	r3, [pc, #248]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10d      	bne.n	800573a <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	4a3a      	ldr	r2, [pc, #232]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6593      	str	r3, [r2, #88]	; 0x58
 800572a:	4b38      	ldr	r3, [pc, #224]	; (800580c <HAL_RCC_OscConfig+0x564>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005736:	2301      	movs	r3, #1
 8005738:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800573a:	4b35      	ldr	r3, [pc, #212]	; (8005810 <HAL_RCC_OscConfig+0x568>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d118      	bne.n	8005778 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005746:	4b32      	ldr	r3, [pc, #200]	; (8005810 <HAL_RCC_OscConfig+0x568>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a31      	ldr	r2, [pc, #196]	; (8005810 <HAL_RCC_OscConfig+0x568>)
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005752:	f7fd ffd3 	bl	80036fc <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575a:	f7fd ffcf 	bl	80036fc <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e1f9      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_RCC_OscConfig+0x568>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01f      	beq.n	80057c4 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005790:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_RCC_OscConfig+0x564>)
 8005798:	f043 0304 	orr.w	r3, r3, #4
 800579c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057b0:	e018      	b.n	80057e4 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057c2:	e00f      	b.n	80057e4 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	4a10      	ldr	r2, [pc, #64]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	4a0c      	ldr	r2, [pc, #48]	; (800580c <HAL_RCC_OscConfig+0x564>)
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d058      	beq.n	800589e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fd ff86 	bl	80036fc <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	e00f      	b.n	8005814 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fd ff82 	bl	80036fc <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d906      	bls.n	8005814 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e1aa      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005814:	4bb0      	ldr	r3, [pc, #704]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0e8      	beq.n	80057f4 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01b      	beq.n	8005866 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800582e:	4baa      	ldr	r3, [pc, #680]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	4aa8      	ldr	r2, [pc, #672]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800583e:	e00a      	b.n	8005856 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005840:	f7fd ff5c 	bl	80036fc <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	; 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e184      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005856:	4ba0      	ldr	r3, [pc, #640]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ed      	beq.n	8005840 <HAL_RCC_OscConfig+0x598>
 8005864:	e053      	b.n	800590e <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005866:	4b9c      	ldr	r3, [pc, #624]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	4a9a      	ldr	r2, [pc, #616]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 800586e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fd ff40 	bl	80036fc <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e168      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800588e:	4b92      	ldr	r3, [pc, #584]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ed      	bne.n	8005878 <HAL_RCC_OscConfig+0x5d0>
 800589c:	e037      	b.n	800590e <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589e:	f7fd ff2d 	bl	80036fc <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058a4:	e00a      	b.n	80058bc <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fd ff29 	bl	80036fc <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e151      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058bc:	4b86      	ldr	r3, [pc, #536]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ed      	bne.n	80058a6 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80058ca:	4b83      	ldr	r3, [pc, #524]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01a      	beq.n	800590e <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058d8:	4b7f      	ldr	r3, [pc, #508]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	4a7e      	ldr	r2, [pc, #504]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80058e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80058e8:	e00a      	b.n	8005900 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fd ff07 	bl	80036fc <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e12f      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005900:	4b75      	ldr	r3, [pc, #468]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ed      	bne.n	80058ea <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800590e:	7ffb      	ldrb	r3, [r7, #31]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005914:	4b70      	ldr	r3, [pc, #448]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	4a6f      	ldr	r2, [pc, #444]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 800591a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d03c      	beq.n	80059a6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01c      	beq.n	800596e <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005934:	4b68      	ldr	r3, [pc, #416]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800593a:	4a67      	ldr	r2, [pc, #412]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fd feda 	bl	80036fc <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594c:	f7fd fed6 	bl	80036fc <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e100      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595e:	4b5e      	ldr	r3, [pc, #376]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ef      	beq.n	800594c <HAL_RCC_OscConfig+0x6a4>
 800596c:	e01b      	b.n	80059a6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800596e:	4b5a      	ldr	r3, [pc, #360]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005974:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597e:	f7fd febd 	bl	80036fc <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005986:	f7fd feb9 	bl	80036fc <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0e3      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005998:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 800599a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ef      	bne.n	8005986 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80d7 	beq.w	8005b5e <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059b0:	4b49      	ldr	r3, [pc, #292]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 030c 	and.w	r3, r3, #12
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	f000 8091 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d15a      	bne.n	8005a7c <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b44      	ldr	r3, [pc, #272]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a43      	ldr	r2, [pc, #268]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80059cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fd fe93 	bl	80036fc <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059da:	f7fd fe8f 	bl	80036fc <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0b9      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ec:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f8:	4b37      	ldr	r3, [pc, #220]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	4b37      	ldr	r3, [pc, #220]	; (8005adc <HAL_RCC_OscConfig+0x834>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a08:	3a01      	subs	r2, #1
 8005a0a:	0112      	lsls	r2, r2, #4
 8005a0c:	4311      	orrs	r1, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a12:	0212      	lsls	r2, r2, #8
 8005a14:	4311      	orrs	r1, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a1a:	0852      	lsrs	r2, r2, #1
 8005a1c:	3a01      	subs	r2, #1
 8005a1e:	0552      	lsls	r2, r2, #21
 8005a20:	4311      	orrs	r1, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a26:	0852      	lsrs	r2, r2, #1
 8005a28:	3a01      	subs	r2, #1
 8005a2a:	0652      	lsls	r2, r2, #25
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a32:	06d2      	lsls	r2, r2, #27
 8005a34:	430a      	orrs	r2, r1
 8005a36:	4928      	ldr	r1, [pc, #160]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a3c:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a48:	4b23      	ldr	r3, [pc, #140]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fd fe52 	bl	80036fc <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fd fe4e 	bl	80036fc <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e078      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0x7b4>
 8005a7a:	e070      	b.n	8005b5e <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7c:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a86:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005aa6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fe24 	bl	80036fc <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fd fe20 	bl	80036fc <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e04a      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aca:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <HAL_RCC_OscConfig+0x830>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x810>
 8005ad6:	e042      	b.n	8005b5e <HAL_RCC_OscConfig+0x8b6>
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e039      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005aec:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <HAL_RCC_OscConfig+0x8c0>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f003 0203 	and.w	r2, r3, #3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d12c      	bne.n	8005b5a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d123      	bne.n	8005b5a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d11b      	bne.n	8005b5a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d113      	bne.n	8005b5a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d109      	bne.n	8005b5a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	3b01      	subs	r3, #1
 8005b54:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d001      	beq.n	8005b5e <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3720      	adds	r7, #32
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40021000 	.word	0x40021000

08005b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e104      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b84:	4b84      	ldr	r3, [pc, #528]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d910      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b92:	4b81      	ldr	r3, [pc, #516]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 020f 	bic.w	r2, r3, #15
 8005b9a:	497f      	ldr	r1, [pc, #508]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b7d      	ldr	r3, [pc, #500]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0ec      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 808b 	beq.w	8005cd8 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d134      	bne.n	8005c34 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bca:	4b74      	ldr	r3, [pc, #464]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0d9      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005bda:	f000 fa23 	bl	8006024 <RCC_GetSysClockFreqFromPLLSource>
 8005bde:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4a6f      	ldr	r2, [pc, #444]	; (8005da0 <HAL_RCC_ClockConfig+0x234>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d956      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005be8:	4b6c      	ldr	r3, [pc, #432]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bf4:	4b69      	ldr	r3, [pc, #420]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfc:	4a67      	ldr	r2, [pc, #412]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e045      	b.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03f      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d13b      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c26:	4a5d      	ldr	r2, [pc, #372]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e030      	b.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3c:	4b57      	ldr	r3, [pc, #348]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d115      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0a0      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c54:	4b51      	ldr	r3, [pc, #324]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e094      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c64:	4b4d      	ldr	r3, [pc, #308]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e08c      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c74:	f000 f89a 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4a48      	ldr	r2, [pc, #288]	; (8005da0 <HAL_RCC_ClockConfig+0x234>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d909      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c82:	4b46      	ldr	r3, [pc, #280]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8a:	4a44      	ldr	r2, [pc, #272]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c96:	4b41      	ldr	r3, [pc, #260]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	493e      	ldr	r1, [pc, #248]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca8:	f7fd fd28 	bl	80036fc <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb0:	f7fd fd24 	bl	80036fc <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e063      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	4b35      	ldr	r3, [pc, #212]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 020c 	and.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1eb      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	492a      	ldr	r1, [pc, #168]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d105      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cfe:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d0a:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d210      	bcs.n	8005d3a <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d18:	4b1f      	ldr	r3, [pc, #124]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 020f 	bic.w	r2, r3, #15
 8005d20:	491d      	ldr	r1, [pc, #116]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCC_ClockConfig+0x22c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d001      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e029      	b.n	8005d8e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	4912      	ldr	r1, [pc, #72]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	490a      	ldr	r1, [pc, #40]	; (8005d9c <HAL_RCC_ClockConfig+0x230>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d78:	f000 f8b4 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <HAL_RCC_ClockConfig+0x238>)
 8005d80:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_RCC_ClockConfig+0x23c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd fc68 	bl	800365c <HAL_InitTick>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40022000 	.word	0x40022000
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	04c4b400 	.word	0x04c4b400
 8005da4:	20000004 	.word	0x20000004
 8005da8:	20000020 	.word	0x20000020

08005dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dba:	4b46      	ldr	r3, [pc, #280]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc4:	4b43      	ldr	r3, [pc, #268]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d121      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d11e      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005de0:	4b3c      	ldr	r3, [pc, #240]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dec:	4b39      	ldr	r3, [pc, #228]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e005      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005dfc:	4b35      	ldr	r3, [pc, #212]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005e08:	4a33      	ldr	r2, [pc, #204]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e10:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d102      	bne.n	8005e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e24:	4b2d      	ldr	r3, [pc, #180]	; (8005edc <HAL_RCC_GetSysClockFreq+0x130>)
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	e004      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e30:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d145      	bne.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005e3a:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e44:	4b23      	ldr	r3, [pc, #140]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	3301      	adds	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d002      	beq.n	8005e5e <HAL_RCC_GetSysClockFreq+0xb2>
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d00d      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0xcc>
 8005e5c:	e019      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	; (8005edc <HAL_RCC_GetSysClockFreq+0x130>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e68:	68d2      	ldr	r2, [r2, #12]
 8005e6a:	0a12      	lsrs	r2, r2, #8
 8005e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	617b      	str	r3, [r7, #20]
        break;
 8005e76:	e019      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e78:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e82:	68d2      	ldr	r2, [r2, #12]
 8005e84:	0a12      	lsrs	r2, r2, #8
 8005e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	617b      	str	r3, [r7, #20]
        break;
 8005e90:	e00c      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005e9c:	68d2      	ldr	r2, [r2, #12]
 8005e9e:	0a12      	lsrs	r2, r2, #8
 8005ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
        break;
 8005eaa:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x128>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	08009a18 	.word	0x08009a18
 8005edc:	00f42400 	.word	0x00f42400
 8005ee0:	007a1200 	.word	0x007a1200

08005ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005ee8:	f7ff ff60 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8005eec:	4601      	mov	r1, r0
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <HAL_RCC_GetHCLKFreq+0x20>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	091b      	lsrs	r3, r3, #4
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x24>)
 8005efa:	5cd3      	ldrb	r3, [r2, r3]
 8005efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000
 8005f08:	08009a00 	.word	0x08009a00

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f10:	f7ff ffe8 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005f14:	4601      	mov	r1, r0
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4a03      	ldr	r2, [pc, #12]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f22:	5cd3      	ldrb	r3, [r2, r3]
 8005f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	08009a10 	.word	0x08009a10

08005f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f38:	f7ff ffd4 	bl	8005ee4 <HAL_RCC_GetHCLKFreq>
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0adb      	lsrs	r3, r3, #11
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4a03      	ldr	r2, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4a:	5cd3      	ldrb	r3, [r2, r3]
 8005f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	08009a10 	.word	0x08009a10

08005f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f68:	4b2c      	ldr	r3, [pc, #176]	; (800601c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f74:	f7ff f8fa 	bl	800516c <HAL_PWREx_GetVoltageRange>
 8005f78:	6138      	str	r0, [r7, #16]
 8005f7a:	e014      	b.n	8005fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f80:	4a26      	ldr	r2, [pc, #152]	; (800601c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f86:	6593      	str	r3, [r2, #88]	; 0x58
 8005f88:	4b24      	ldr	r3, [pc, #144]	; (800601c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f94:	f7ff f8ea 	bl	800516c <HAL_PWREx_GetVoltageRange>
 8005f98:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f9a:	4b20      	ldr	r3, [pc, #128]	; (800601c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	; (800601c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb2:	d10b      	bne.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b80      	cmp	r3, #128	; 0x80
 8005fb8:	d919      	bls.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2ba0      	cmp	r3, #160	; 0xa0
 8005fbe:	d902      	bls.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005fc4:	e013      	b.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005fca:	e010      	b.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d902      	bls.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e00a      	b.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b80      	cmp	r3, #128	; 0x80
 8005fdc:	d102      	bne.n	8005fe4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fde:	2302      	movs	r3, #2
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e004      	b.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b70      	cmp	r3, #112	; 0x70
 8005fe8:	d101      	bne.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fea:	2301      	movs	r3, #1
 8005fec:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 020f 	bic.w	r2, r3, #15
 8005ff6:	490a      	ldr	r1, [pc, #40]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	40022000 	.word	0x40022000

08006024 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800602e:	4b36      	ldr	r3, [pc, #216]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b01      	cmp	r3, #1
 8006038:	d118      	bne.n	800606c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800603a:	4b33      	ldr	r3, [pc, #204]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d107      	bne.n	8006056 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006046:	4b30      	ldr	r3, [pc, #192]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e005      	b.n	8006062 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006056:	4b2c      	ldr	r3, [pc, #176]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	091b      	lsrs	r3, r3, #4
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8006062:	4a2a      	ldr	r2, [pc, #168]	; (800610c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800606c:	4b26      	ldr	r3, [pc, #152]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	3301      	adds	r3, #1
 8006082:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d002      	beq.n	8006090 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 800608a:	2b03      	cmp	r3, #3
 800608c:	d00d      	beq.n	80060aa <RCC_GetSysClockFreqFromPLLSource+0x86>
 800608e:	e019      	b.n	80060c4 <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800609a:	68d2      	ldr	r2, [r2, #12]
 800609c:	0a12      	lsrs	r2, r2, #8
 800609e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	613b      	str	r3, [r7, #16]
      break;
 80060a8:	e019      	b.n	80060de <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80060b4:	68d2      	ldr	r2, [r2, #12]
 80060b6:	0a12      	lsrs	r2, r2, #8
 80060b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060bc:	fb02 f303 	mul.w	r3, r2, r3
 80060c0:	613b      	str	r3, [r7, #16]
      break;
 80060c2:	e00c      	b.n	80060de <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80060ce:	68d2      	ldr	r2, [r2, #12]
 80060d0:	0a12      	lsrs	r2, r2, #8
 80060d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	613b      	str	r3, [r7, #16]
      break;
 80060dc:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80060de:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	0e5b      	lsrs	r3, r3, #25
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	3301      	adds	r3, #1
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80060f8:	683b      	ldr	r3, [r7, #0]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40021000 	.word	0x40021000
 800610c:	08009a18 	.word	0x08009a18
 8006110:	00f42400 	.word	0x00f42400
 8006114:	007a1200 	.word	0x007a1200

08006118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006120:	2300      	movs	r3, #0
 8006122:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006124:	2300      	movs	r3, #0
 8006126:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d00b      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800613c:	2b40      	cmp	r3, #64	; 0x40
 800613e:	d804      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00e      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d015      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006148:	e01d      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800614a:	2b60      	cmp	r3, #96	; 0x60
 800614c:	d01e      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d01c      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006152:	e018      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006154:	4b84      	ldr	r3, [pc, #528]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a83      	ldr	r2, [pc, #524]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800615a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615e:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006160:	e015      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fb3f 	bl	80067ec <RCCEx_PLLSAI1_Config>
 800616e:	4603      	mov	r3, r0
 8006170:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006172:	e00c      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3320      	adds	r3, #32
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fc08 	bl	8006990 <RCCEx_PLLSAI2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	77fb      	strb	r3, [r7, #31]
        break;
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 800618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006194:	4b74      	ldr	r3, [pc, #464]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800619a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a2:	4971      	ldr	r1, [pc, #452]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80061aa:	e001      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	7ffb      	ldrb	r3, [r7, #31]
 80061ae:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d042      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c4:	d00f      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80061c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ca:	d805      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d011      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	d017      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80061d6:	e01f      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80061d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061dc:	d01f      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e2:	d01c      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061e4:	e018      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061e6:	4b60      	ldr	r3, [pc, #384]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	4a5f      	ldr	r2, [pc, #380]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80061f2:	e015      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 faf6 	bl	80067ec <RCCEx_PLLSAI1_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006204:	e00c      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3320      	adds	r3, #32
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fbbf 	bl	8006990 <RCCEx_PLLSAI2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006216:	e003      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77fb      	strb	r3, [r7, #31]
        break;
 800621c:	e000      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 800621e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006220:	7ffb      	ldrb	r3, [r7, #31]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006226:	4b50      	ldr	r3, [pc, #320]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800622c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	494c      	ldr	r1, [pc, #304]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800623c:	e001      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	7ffb      	ldrb	r3, [r7, #31]
 8006240:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 809b 	beq.w	8006386 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006250:	2300      	movs	r3, #0
 8006252:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006254:	4b44      	ldr	r3, [pc, #272]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006260:	4b41      	ldr	r3, [pc, #260]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	4a40      	ldr	r2, [pc, #256]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626a:	6593      	str	r3, [r2, #88]	; 0x58
 800626c:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800626e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627c:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a3a      	ldr	r2, [pc, #232]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006288:	f7fd fa38 	bl	80036fc <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006290:	f7fd fa34 	bl	80036fc <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d902      	bls.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	77fb      	strb	r3, [r7, #31]
        break;
 80062a2:	e005      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a4:	4b31      	ldr	r3, [pc, #196]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0ef      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d15c      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062b6:	4b2c      	ldr	r3, [pc, #176]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01f      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d019      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062d4:	4b24      	ldr	r3, [pc, #144]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062de:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e0:	4b21      	ldr	r3, [pc, #132]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	4a20      	ldr	r2, [pc, #128]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80062f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fd f9f3 	bl	80036fc <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006318:	e00b      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fd f9ef 	bl	80036fc <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f241 3288 	movw	r2, #5000	; 0x1388
 8006328:	4293      	cmp	r3, r2
 800632a:	d902      	bls.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	77fb      	strb	r3, [r7, #31]
            break;
 8006330:	e006      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ec      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 8006340:	7ffb      	ldrb	r3, [r7, #31]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10c      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006346:	4b08      	ldr	r3, [pc, #32]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	4904      	ldr	r1, [pc, #16]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800635e:	e009      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006360:	7ffb      	ldrb	r3, [r7, #31]
 8006362:	77bb      	strb	r3, [r7, #30]
 8006364:	e006      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8006366:	bf00      	nop
 8006368:	40021000 	.word	0x40021000
 800636c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	7ffb      	ldrb	r3, [r7, #31]
 8006372:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d105      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637a:	4bae      	ldr	r3, [pc, #696]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	4aad      	ldr	r2, [pc, #692]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006392:	4ba8      	ldr	r3, [pc, #672]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006398:	f023 0203 	bic.w	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	49a4      	ldr	r1, [pc, #656]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b4:	4b9f      	ldr	r3, [pc, #636]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f023 020c 	bic.w	r2, r3, #12
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	499c      	ldr	r1, [pc, #624]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063d6:	4b97      	ldr	r3, [pc, #604]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	4993      	ldr	r1, [pc, #588]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063f8:	4b8e      	ldr	r3, [pc, #568]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	498b      	ldr	r1, [pc, #556]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800641a:	4b86      	ldr	r3, [pc, #536]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	4982      	ldr	r1, [pc, #520]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800643c:	4b7d      	ldr	r3, [pc, #500]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	497a      	ldr	r1, [pc, #488]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645e:	4b75      	ldr	r3, [pc, #468]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	4971      	ldr	r1, [pc, #452]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006480:	4b6c      	ldr	r3, [pc, #432]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648e:	4969      	ldr	r1, [pc, #420]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80064a2:	4b64      	ldr	r3, [pc, #400]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b0:	4960      	ldr	r1, [pc, #384]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02f      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064cc:	d005      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80064ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064d2:	d009      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80064d8:	e00f      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064da:	4b56      	ldr	r3, [pc, #344]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4a55      	ldr	r2, [pc, #340]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80064e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80064e6:	e00c      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f97c 	bl	80067ec <RCCEx_PLLSAI1_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80064f8:	e003      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	77fb      	strb	r3, [r7, #31]
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	7ffb      	ldrb	r3, [r7, #31]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006508:	4b4a      	ldr	r3, [pc, #296]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006516:	4947      	ldr	r1, [pc, #284]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800651e:	e001      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	7ffb      	ldrb	r3, [r7, #31]
 8006522:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006530:	4b40      	ldr	r3, [pc, #256]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	493d      	ldr	r1, [pc, #244]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006552:	4b38      	ldr	r3, [pc, #224]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006560:	4934      	ldr	r1, [pc, #208]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006574:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	492c      	ldr	r1, [pc, #176]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006596:	4b27      	ldr	r3, [pc, #156]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659c:	f023 0203 	bic.w	r2, r3, #3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	4923      	ldr	r1, [pc, #140]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d028      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b8:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c6:	491b      	ldr	r1, [pc, #108]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d6:	d106      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d8:	4b16      	ldr	r3, [pc, #88]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80065de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e2:	60d3      	str	r3, [r2, #12]
 80065e4:	e011      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ee:	d10c      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	2101      	movs	r1, #1
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 f8f8 	bl	80067ec <RCCEx_PLLSAI1_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 8006606:	7ffb      	ldrb	r3, [r7, #31]
 8006608:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d04d      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800661a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661e:	d10b      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006620:	4b04      	ldr	r3, [pc, #16]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006626:	4a03      	ldr	r2, [pc, #12]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8006628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800662c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006630:	e015      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x546>
 8006632:	bf00      	nop
 8006634:	40021000 	.word	0x40021000
 8006638:	4b6b      	ldr	r3, [pc, #428]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006646:	4968      	ldr	r1, [pc, #416]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800664e:	4b66      	ldr	r3, [pc, #408]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006654:	4a64      	ldr	r2, [pc, #400]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800665a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006666:	d10d      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	2101      	movs	r1, #1
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f8bc 	bl	80067ec <RCCEx_PLLSAI1_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006678:	7ffb      	ldrb	r3, [r7, #31]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 800667e:	7ffb      	ldrb	r3, [r7, #31]
 8006680:	77bb      	strb	r3, [r7, #30]
 8006682:	e016      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800668c:	d106      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800668e:	4b56      	ldr	r3, [pc, #344]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	4a55      	ldr	r2, [pc, #340]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006698:	60d3      	str	r3, [r2, #12]
 800669a:	e00a      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a4:	d105      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066a6:	4b50      	ldr	r3, [pc, #320]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	4a4f      	ldr	r2, [pc, #316]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80066ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d028      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066be:	4b4a      	ldr	r3, [pc, #296]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066cc:	4946      	ldr	r1, [pc, #280]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066dc:	d106      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066de:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	4a41      	ldr	r2, [pc, #260]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80066e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066e8:	60d3      	str	r3, [r2, #12]
 80066ea:	e011      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066f4:	d10c      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3304      	adds	r3, #4
 80066fa:	2101      	movs	r1, #1
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f875 	bl	80067ec <RCCEx_PLLSAI1_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006706:	7ffb      	ldrb	r3, [r7, #31]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 800670c:	7ffb      	ldrb	r3, [r7, #31]
 800670e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01e      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800671c:	4b32      	ldr	r3, [pc, #200]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672c:	492e      	ldr	r1, [pc, #184]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800673a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800673e:	d10c      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f850 	bl	80067ec <RCCEx_PLLSAI1_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006750:	7ffb      	ldrb	r3, [r7, #31]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 8006756:	7ffb      	ldrb	r3, [r7, #31]
 8006758:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006766:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800676c:	f023 0204 	bic.w	r2, r3, #4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006776:	491c      	ldr	r1, [pc, #112]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800678c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006790:	f023 0218 	bic.w	r2, r3, #24
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	4913      	ldr	r1, [pc, #76]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d017      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80067b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067be:	490a      	ldr	r1, [pc, #40]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067d0:	d105      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	4a04      	ldr	r2, [pc, #16]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80067d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80067de:	7fbb      	ldrb	r3, [r7, #30]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40021000 	.word	0x40021000

080067ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d00c      	beq.n	800681c <RCCEx_PLLSAI1_Config+0x30>
 8006802:	2b03      	cmp	r3, #3
 8006804:	d013      	beq.n	800682e <RCCEx_PLLSAI1_Config+0x42>
 8006806:	2b01      	cmp	r3, #1
 8006808:	d11a      	bne.n	8006840 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800680a:	4b5d      	ldr	r3, [pc, #372]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d117      	bne.n	8006846 <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800681a:	e014      	b.n	8006846 <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800681c:	4b58      	ldr	r3, [pc, #352]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006824:	2b00      	cmp	r3, #0
 8006826:	d110      	bne.n	800684a <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800682c:	e00d      	b.n	800684a <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800682e:	4b54      	ldr	r3, [pc, #336]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800683e:	e006      	b.n	800684e <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e004      	b.n	8006850 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <RCCEx_PLLSAI1_Config+0x64>
      break;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <RCCEx_PLLSAI1_Config+0x64>
      break;
 800684e:	bf00      	nop
  }

  if (status == HAL_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 808f 	bne.w	8006976 <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006858:	4b49      	ldr	r3, [pc, #292]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a48      	ldr	r2, [pc, #288]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800685e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006864:	f7fc ff4a 	bl	80036fc <HAL_GetTick>
 8006868:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800686a:	e009      	b.n	8006880 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800686c:	f7fc ff46 	bl	80036fc <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d902      	bls.n	8006880 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	73fb      	strb	r3, [r7, #15]
        break;
 800687e:	e005      	b.n	800688c <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006880:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1ef      	bne.n	800686c <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d171      	bne.n	8006976 <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d116      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006898:	4b39      	ldr	r3, [pc, #228]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	4b39      	ldr	r3, [pc, #228]	; (8006984 <RCCEx_PLLSAI1_Config+0x198>)
 800689e:	4013      	ands	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6892      	ldr	r2, [r2, #8]
 80068a4:	0211      	lsls	r1, r2, #8
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68d2      	ldr	r2, [r2, #12]
 80068aa:	06d2      	lsls	r2, r2, #27
 80068ac:	4311      	orrs	r1, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6852      	ldr	r2, [r2, #4]
 80068b2:	3a01      	subs	r2, #1
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	4930      	ldr	r1, [pc, #192]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	610b      	str	r3, [r1, #16]
 80068c4:	e033      	b.n	800692e <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d118      	bne.n	80068fe <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068cc:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <RCCEx_PLLSAI1_Config+0x19c>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	0211      	lsls	r1, r2, #8
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6912      	ldr	r2, [r2, #16]
 80068de:	0852      	lsrs	r2, r2, #1
 80068e0:	3a01      	subs	r2, #1
 80068e2:	0552      	lsls	r2, r2, #21
 80068e4:	4311      	orrs	r1, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6852      	ldr	r2, [r2, #4]
 80068ea:	3a01      	subs	r2, #1
 80068ec:	0112      	lsls	r2, r2, #4
 80068ee:	4311      	orrs	r1, r2
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	4922      	ldr	r1, [pc, #136]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	610b      	str	r3, [r1, #16]
 80068fc:	e017      	b.n	800692e <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <RCCEx_PLLSAI1_Config+0x1a0>)
 8006904:	4013      	ands	r3, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6892      	ldr	r2, [r2, #8]
 800690a:	0211      	lsls	r1, r2, #8
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6952      	ldr	r2, [r2, #20]
 8006910:	0852      	lsrs	r2, r2, #1
 8006912:	3a01      	subs	r2, #1
 8006914:	0652      	lsls	r2, r2, #25
 8006916:	4311      	orrs	r1, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	3a01      	subs	r2, #1
 800691e:	0112      	lsls	r2, r2, #4
 8006920:	4311      	orrs	r1, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	4915      	ldr	r1, [pc, #84]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800692a:	4313      	orrs	r3, r2
 800692c:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a13      	ldr	r2, [pc, #76]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693a:	f7fc fedf 	bl	80036fc <HAL_GetTick>
 800693e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006940:	e009      	b.n	8006956 <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006942:	f7fc fedb 	bl	80036fc <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d902      	bls.n	8006956 <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	73fb      	strb	r3, [r7, #15]
          break;
 8006954:	e005      	b.n	8006962 <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006956:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0ef      	beq.n	8006942 <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	4903      	ldr	r1, [pc, #12]	; (8006980 <RCCEx_PLLSAI1_Config+0x194>)
 8006972:	4313      	orrs	r3, r2
 8006974:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40021000 	.word	0x40021000
 8006984:	07ff800c 	.word	0x07ff800c
 8006988:	ff9f800c 	.word	0xff9f800c
 800698c:	f9ff800c 	.word	0xf9ff800c

08006990 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d00c      	beq.n	80069c0 <RCCEx_PLLSAI2_Config+0x30>
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d013      	beq.n	80069d2 <RCCEx_PLLSAI2_Config+0x42>
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d11a      	bne.n	80069e4 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069ae:	4b42      	ldr	r3, [pc, #264]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d117      	bne.n	80069ea <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069be:	e014      	b.n	80069ea <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069c0:	4b3d      	ldr	r3, [pc, #244]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d110      	bne.n	80069ee <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069d0:	e00d      	b.n	80069ee <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80069d2:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e2:	e006      	b.n	80069f2 <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	e004      	b.n	80069f4 <RCCEx_PLLSAI2_Config+0x64>
      break;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <RCCEx_PLLSAI2_Config+0x64>
      break;
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <RCCEx_PLLSAI2_Config+0x64>
      break;
 80069f2:	bf00      	nop
  }

  if (status == HAL_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d159      	bne.n	8006aae <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80069fa:	4b2f      	ldr	r3, [pc, #188]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2e      	ldr	r2, [pc, #184]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a06:	f7fc fe79 	bl	80036fc <HAL_GetTick>
 8006a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a0c:	e009      	b.n	8006a22 <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a0e:	f7fc fe75 	bl	80036fc <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d902      	bls.n	8006a22 <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8006a20:	e005      	b.n	8006a2e <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a22:	4b25      	ldr	r3, [pc, #148]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1ef      	bne.n	8006a0e <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d13c      	bne.n	8006aae <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d115      	bne.n	8006a66 <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <RCCEx_PLLSAI2_Config+0x12c>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6892      	ldr	r2, [r2, #8]
 8006a46:	0211      	lsls	r1, r2, #8
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68d2      	ldr	r2, [r2, #12]
 8006a4c:	06d2      	lsls	r2, r2, #27
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6852      	ldr	r2, [r2, #4]
 8006a54:	3a01      	subs	r2, #1
 8006a56:	0112      	lsls	r2, r2, #4
 8006a58:	4311      	orrs	r1, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	4915      	ldr	r1, [pc, #84]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a72:	f7fc fe43 	bl	80036fc <HAL_GetTick>
 8006a76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a78:	e009      	b.n	8006a8e <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a7a:	f7fc fe3f 	bl	80036fc <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d902      	bls.n	8006a8e <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a8c:	e005      	b.n	8006a9a <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0ef      	beq.n	8006a7a <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <RCCEx_PLLSAI2_Config+0x128>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	07ff800c 	.word	0x07ff800c

08006ac0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d05c      	beq.n	8006b8c <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fc f8a0 	bl	8002c2c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006af4:	4b28      	ldr	r3, [pc, #160]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006af6:	22ca      	movs	r2, #202	; 0xca
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
 8006afa:	4b27      	ldr	r3, [pc, #156]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006afc:	2253      	movs	r2, #83	; 0x53
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f871 	bl	8006be8 <RTC_EnterInitMode>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d133      	bne.n	8006b78 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006b10:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b16:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006b20:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6859      	ldr	r1, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4319      	orrs	r1, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	430b      	orrs	r3, r1
 8006b34:	4918      	ldr	r1, [pc, #96]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	4914      	ldr	r1, [pc, #80]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f880 	bl	8006c50 <RTC_ExitInitMode>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10e      	bne.n	8006b78 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a19      	ldr	r1, [r3, #32]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	4319      	orrs	r1, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	430b      	orrs	r3, r1
 8006b72:	4909      	ldr	r1, [pc, #36]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <HAL_RTC_Init+0xd8>)
 8006b7a:	22ff      	movs	r2, #255	; 0xff
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40002800 	.word	0x40002800

08006b9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_RTC_WaitForSynchro+0x48>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <HAL_RTC_WaitForSynchro+0x48>)
 8006baa:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8006bae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006bb0:	f7fc fda4 	bl	80036fc <HAL_GetTick>
 8006bb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006bb6:	e009      	b.n	8006bcc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bb8:	f7fc fda0 	bl	80036fc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bc6:	d901      	bls.n	8006bcc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e006      	b.n	8006bda <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <HAL_RTC_WaitForSynchro+0x48>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0ef      	beq.n	8006bb8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40002800 	.word	0x40002800

08006be8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006bf4:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <RTC_EnterInitMode+0x64>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d120      	bne.n	8006c42 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <RTC_EnterInitMode+0x64>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a11      	ldr	r2, [pc, #68]	; (8006c4c <RTC_EnterInitMode+0x64>)
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006c0c:	f7fc fd76 	bl	80036fc <HAL_GetTick>
 8006c10:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c12:	e00d      	b.n	8006c30 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c14:	f7fc fd72 	bl	80036fc <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c22:	d905      	bls.n	8006c30 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <RTC_EnterInitMode+0x64>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <RTC_EnterInitMode+0x5a>
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d1e8      	bne.n	8006c14 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40002800 	.word	0x40002800

08006c50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c66:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ff91 	bl	8006b9c <HAL_RTC_WaitForSynchro>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01e      	beq.n	8006cbe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2203      	movs	r2, #3
 8006c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	73fb      	strb	r3, [r7, #15]
 8006c8c:	e017      	b.n	8006cbe <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	4a0d      	ldr	r2, [pc, #52]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006c94:	f023 0320 	bic.w	r3, r3, #32
 8006c98:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff ff7e 	bl	8006b9c <HAL_RTC_WaitForSynchro>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2203      	movs	r2, #3
 8006caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <RTC_ExitInitMode+0x78>)
 8006cb8:	f043 0320 	orr.w	r3, r3, #32
 8006cbc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40002800 	.word	0x40002800

08006ccc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	490f      	ldr	r1, [pc, #60]	; (8006d1c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	490c      	ldr	r1, [pc, #48]	; (8006d20 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6919      	ldr	r1, [r3, #16]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	430b      	orrs	r3, r1
 8006d06:	4906      	ldr	r1, [pc, #24]	; (8006d20 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40002800 	.word	0x40002800
 8006d20:	40003400 	.word	0x40003400

08006d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e095      	b.n	8006e62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d108      	bne.n	8006d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d009      	beq.n	8006d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
 8006d4e:	e005      	b.n	8006d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f877 	bl	8006e6a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d9c:	d902      	bls.n	8006da4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e002      	b.n	8006daa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006db2:	d007      	beq.n	8006dc4 <HAL_SPI_Init+0xa0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dbc:	d002      	beq.n	8006dc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	ea42 0103 	orr.w	r1, r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	f003 0204 	and.w	r2, r3, #4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e40:	ea42 0103 	orr.w	r1, r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b08a      	sub	sp, #40	; 0x28
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x26>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e1fb      	b.n	800729c <HAL_SPI_TransmitReceive+0x41e>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eac:	f7fc fc26 	bl	80036fc <HAL_GetTick>
 8006eb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ec0:	887b      	ldrh	r3, [r7, #2]
 8006ec2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ec4:	887b      	ldrh	r3, [r7, #2]
 8006ec6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ec8:	7efb      	ldrb	r3, [r7, #27]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d00e      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x6e>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed4:	d106      	bne.n	8006ee4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_SPI_TransmitReceive+0x66>
 8006ede:	7efb      	ldrb	r3, [r7, #27]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d003      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006eea:	e1cd      	b.n	8007288 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x80>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x80>
 8006ef8:	887b      	ldrh	r3, [r7, #2]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f04:	e1c0      	b.n	8007288 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d003      	beq.n	8006f1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2205      	movs	r2, #5
 8006f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	887a      	ldrh	r2, [r7, #2]
 8006f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	887a      	ldrh	r2, [r7, #2]
 8006f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	887a      	ldrh	r2, [r7, #2]
 8006f40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	887a      	ldrh	r2, [r7, #2]
 8006f46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f5c:	d802      	bhi.n	8006f64 <HAL_SPI_TransmitReceive+0xe6>
 8006f5e:	8a3b      	ldrh	r3, [r7, #16]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d908      	bls.n	8006f76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	e007      	b.n	8006f86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d007      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fac:	d97c      	bls.n	80070a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x13e>
 8006fb6:	8a7b      	ldrh	r3, [r7, #18]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d169      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	881a      	ldrh	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	1c9a      	adds	r2, r3, #2
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe0:	e056      	b.n	8007090 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d11b      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x1aa>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d016      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x1aa>
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d113      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	881a      	ldrh	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	1c9a      	adds	r2, r3, #2
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d11c      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x1f2>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d016      	beq.n	8007070 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	b292      	uxth	r2, r2
 800704e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	1c9a      	adds	r2, r3, #2
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800706c:	2301      	movs	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007070:	f7fc fb44 	bl	80036fc <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707c:	429a      	cmp	r2, r3
 800707e:	d807      	bhi.n	8007090 <HAL_SPI_TransmitReceive+0x212>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d003      	beq.n	8007090 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800708e:	e0fb      	b.n	8007288 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1a3      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x164>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d19d      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x164>
 80070a6:	e0df      	b.n	8007268 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_SPI_TransmitReceive+0x23a>
 80070b0:	8a7b      	ldrh	r3, [r7, #18]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	f040 80cb 	bne.w	800724e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d912      	bls.n	80070e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	881a      	ldrh	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b02      	subs	r3, #2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070e6:	e0b2      	b.n	800724e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800710e:	e09e      	b.n	800724e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b02      	cmp	r3, #2
 800711c:	d134      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x30a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02f      	beq.n	8007188 <HAL_SPI_TransmitReceive+0x30a>
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	2b01      	cmp	r3, #1
 800712c:	d12c      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d912      	bls.n	800715e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	881a      	ldrh	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	1c9a      	adds	r2, r3, #2
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b02      	subs	r3, #2
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800715c:	e012      	b.n	8007184 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b01      	cmp	r3, #1
 8007194:	d148      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x3aa>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d042      	beq.n	8007228 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d923      	bls.n	80071f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	b292      	uxth	r2, r2
 80071ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	1c9a      	adds	r2, r3, #2
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b02      	subs	r3, #2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d81f      	bhi.n	8007224 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	e016      	b.n	8007224 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f103 020c 	add.w	r2, r3, #12
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007228:	f7fc fa68 	bl	80036fc <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007234:	429a      	cmp	r2, r3
 8007236:	d803      	bhi.n	8007240 <HAL_SPI_TransmitReceive+0x3c2>
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d102      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x3c8>
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	2b00      	cmp	r3, #0
 8007244:	d103      	bne.n	800724e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800724c:	e01c      	b.n	8007288 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	f47f af5b 	bne.w	8007110 <HAL_SPI_TransmitReceive+0x292>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	f47f af54 	bne.w	8007110 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f93d 	bl	80074ec <SPI_EndRxTxTransaction>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d006      	beq.n	8007286 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	661a      	str	r2, [r3, #96]	; 0x60
 8007284:	e000      	b.n	8007288 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800729c:	4618      	mov	r0, r3
 800729e:	3728      	adds	r7, #40	; 0x28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072b2:	b2db      	uxtb	r3, r3
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072d0:	f7fc fa14 	bl	80036fc <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	4413      	add	r3, r2
 80072de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072e0:	f7fc fa0c 	bl	80036fc <HAL_GetTick>
 80072e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072e6:	4b39      	ldr	r3, [pc, #228]	; (80073cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	015b      	lsls	r3, r3, #5
 80072ec:	0d1b      	lsrs	r3, r3, #20
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f6:	e054      	b.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d050      	beq.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007300:	f7fc f9fc 	bl	80036fc <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	429a      	cmp	r2, r3
 800730e:	d902      	bls.n	8007316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d13d      	bne.n	8007392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800732e:	d111      	bne.n	8007354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007338:	d004      	beq.n	8007344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007342:	d107      	bne.n	8007354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735c:	d10f      	bne.n	800737e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800737c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e017      	b.n	80073c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3b01      	subs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	bf0c      	ite	eq
 80073b2:	2301      	moveq	r3, #1
 80073b4:	2300      	movne	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d19b      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000004 	.word	0x20000004

080073d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073de:	f7fc f98d 	bl	80036fc <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	4413      	add	r3, r2
 80073ec:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073ee:	f7fc f985 	bl	80036fc <HAL_GetTick>
 80073f2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073f4:	4b3c      	ldr	r3, [pc, #240]	; (80074e8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	00da      	lsls	r2, r3, #3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	0d1b      	lsrs	r3, r3, #20
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800740c:	e05f      	b.n	80074ce <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007414:	d106      	bne.n	8007424 <SPI_WaitFifoStateUntilTimeout+0x54>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d050      	beq.n	80074ce <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800742c:	f7fc f966 	bl	80036fc <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	429a      	cmp	r2, r3
 800743a:	d902      	bls.n	8007442 <SPI_WaitFifoStateUntilTimeout+0x72>
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d13d      	bne.n	80074be <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745a:	d111      	bne.n	8007480 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007464:	d004      	beq.n	8007470 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746e:	d107      	bne.n	8007480 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d10f      	bne.n	80074aa <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e010      	b.n	80074e0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4013      	ands	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d197      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000004 	.word	0x20000004

080074ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff ff63 	bl	80073d0 <SPI_WaitFifoStateUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007514:	f043 0220 	orr.w	r2, r3, #32
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e027      	b.n	8007570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff fec8 	bl	80072c0 <SPI_WaitFlagStateUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753a:	f043 0220 	orr.w	r2, r3, #32
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e014      	b.n	8007570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2200      	movs	r2, #0
 800754e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff ff3c 	bl	80073d0 <SPI_WaitFifoStateUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	f043 0220 	orr.w	r2, r3, #32
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e000      	b.n	8007570 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e042      	b.n	8007610 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7fb fae5 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2224      	movs	r2, #36	; 0x24
 80075a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0201 	bic.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f82c 	bl	8007618 <UART_SetConfig>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e022      	b.n	8007610 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 faf6 	bl	8007bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fb7d 	bl	8007d08 <UART_CheckIdleState>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007618:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800761c:	b088      	sub	sp, #32
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	4313      	orrs	r3, r2
 800763c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	4313      	orrs	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4bb1      	ldr	r3, [pc, #708]	; (8007914 <UART_SetConfig+0x2fc>)
 8007650:	4013      	ands	r3, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6812      	ldr	r2, [r2, #0]
 8007656:	69f9      	ldr	r1, [r7, #28]
 8007658:	430b      	orrs	r3, r1
 800765a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4aa6      	ldr	r2, [pc, #664]	; (8007918 <UART_SetConfig+0x300>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	4313      	orrs	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007696:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	69f9      	ldr	r1, [r7, #28]
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	f023 010f 	bic.w	r1, r3, #15
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a97      	ldr	r2, [pc, #604]	; (800791c <UART_SetConfig+0x304>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d121      	bne.n	8007708 <UART_SetConfig+0xf0>
 80076c4:	4b96      	ldr	r3, [pc, #600]	; (8007920 <UART_SetConfig+0x308>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d816      	bhi.n	8007700 <UART_SetConfig+0xe8>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0xc0>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076e9 	.word	0x080076e9
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	080076ef 	.word	0x080076ef
 80076e4:	080076fb 	.word	0x080076fb
 80076e8:	2301      	movs	r3, #1
 80076ea:	76fb      	strb	r3, [r7, #27]
 80076ec:	e0e8      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80076ee:	2302      	movs	r3, #2
 80076f0:	76fb      	strb	r3, [r7, #27]
 80076f2:	e0e5      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80076f4:	2304      	movs	r3, #4
 80076f6:	76fb      	strb	r3, [r7, #27]
 80076f8:	e0e2      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80076fa:	2308      	movs	r3, #8
 80076fc:	76fb      	strb	r3, [r7, #27]
 80076fe:	e0df      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007700:	2310      	movs	r3, #16
 8007702:	76fb      	strb	r3, [r7, #27]
 8007704:	bf00      	nop
 8007706:	e0db      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a85      	ldr	r2, [pc, #532]	; (8007924 <UART_SetConfig+0x30c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d134      	bne.n	800777c <UART_SetConfig+0x164>
 8007712:	4b83      	ldr	r3, [pc, #524]	; (8007920 <UART_SetConfig+0x308>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007718:	f003 030c 	and.w	r3, r3, #12
 800771c:	2b0c      	cmp	r3, #12
 800771e:	d829      	bhi.n	8007774 <UART_SetConfig+0x15c>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <UART_SetConfig+0x110>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	0800775d 	.word	0x0800775d
 800772c:	08007775 	.word	0x08007775
 8007730:	08007775 	.word	0x08007775
 8007734:	08007775 	.word	0x08007775
 8007738:	08007769 	.word	0x08007769
 800773c:	08007775 	.word	0x08007775
 8007740:	08007775 	.word	0x08007775
 8007744:	08007775 	.word	0x08007775
 8007748:	08007763 	.word	0x08007763
 800774c:	08007775 	.word	0x08007775
 8007750:	08007775 	.word	0x08007775
 8007754:	08007775 	.word	0x08007775
 8007758:	0800776f 	.word	0x0800776f
 800775c:	2300      	movs	r3, #0
 800775e:	76fb      	strb	r3, [r7, #27]
 8007760:	e0ae      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007762:	2302      	movs	r3, #2
 8007764:	76fb      	strb	r3, [r7, #27]
 8007766:	e0ab      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007768:	2304      	movs	r3, #4
 800776a:	76fb      	strb	r3, [r7, #27]
 800776c:	e0a8      	b.n	80078c0 <UART_SetConfig+0x2a8>
 800776e:	2308      	movs	r3, #8
 8007770:	76fb      	strb	r3, [r7, #27]
 8007772:	e0a5      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007774:	2310      	movs	r3, #16
 8007776:	76fb      	strb	r3, [r7, #27]
 8007778:	bf00      	nop
 800777a:	e0a1      	b.n	80078c0 <UART_SetConfig+0x2a8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a69      	ldr	r2, [pc, #420]	; (8007928 <UART_SetConfig+0x310>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d120      	bne.n	80077c8 <UART_SetConfig+0x1b0>
 8007786:	4b66      	ldr	r3, [pc, #408]	; (8007920 <UART_SetConfig+0x308>)
 8007788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007790:	2b10      	cmp	r3, #16
 8007792:	d00f      	beq.n	80077b4 <UART_SetConfig+0x19c>
 8007794:	2b10      	cmp	r3, #16
 8007796:	d802      	bhi.n	800779e <UART_SetConfig+0x186>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <UART_SetConfig+0x190>
 800779c:	e010      	b.n	80077c0 <UART_SetConfig+0x1a8>
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d005      	beq.n	80077ae <UART_SetConfig+0x196>
 80077a2:	2b30      	cmp	r3, #48	; 0x30
 80077a4:	d009      	beq.n	80077ba <UART_SetConfig+0x1a2>
 80077a6:	e00b      	b.n	80077c0 <UART_SetConfig+0x1a8>
 80077a8:	2300      	movs	r3, #0
 80077aa:	76fb      	strb	r3, [r7, #27]
 80077ac:	e088      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80077ae:	2302      	movs	r3, #2
 80077b0:	76fb      	strb	r3, [r7, #27]
 80077b2:	e085      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80077b4:	2304      	movs	r3, #4
 80077b6:	76fb      	strb	r3, [r7, #27]
 80077b8:	e082      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80077ba:	2308      	movs	r3, #8
 80077bc:	76fb      	strb	r3, [r7, #27]
 80077be:	e07f      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80077c0:	2310      	movs	r3, #16
 80077c2:	76fb      	strb	r3, [r7, #27]
 80077c4:	bf00      	nop
 80077c6:	e07b      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a57      	ldr	r2, [pc, #348]	; (800792c <UART_SetConfig+0x314>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d120      	bne.n	8007814 <UART_SetConfig+0x1fc>
 80077d2:	4b53      	ldr	r3, [pc, #332]	; (8007920 <UART_SetConfig+0x308>)
 80077d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	d00f      	beq.n	8007800 <UART_SetConfig+0x1e8>
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d802      	bhi.n	80077ea <UART_SetConfig+0x1d2>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <UART_SetConfig+0x1dc>
 80077e8:	e010      	b.n	800780c <UART_SetConfig+0x1f4>
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d005      	beq.n	80077fa <UART_SetConfig+0x1e2>
 80077ee:	2bc0      	cmp	r3, #192	; 0xc0
 80077f0:	d009      	beq.n	8007806 <UART_SetConfig+0x1ee>
 80077f2:	e00b      	b.n	800780c <UART_SetConfig+0x1f4>
 80077f4:	2300      	movs	r3, #0
 80077f6:	76fb      	strb	r3, [r7, #27]
 80077f8:	e062      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80077fa:	2302      	movs	r3, #2
 80077fc:	76fb      	strb	r3, [r7, #27]
 80077fe:	e05f      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007800:	2304      	movs	r3, #4
 8007802:	76fb      	strb	r3, [r7, #27]
 8007804:	e05c      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007806:	2308      	movs	r3, #8
 8007808:	76fb      	strb	r3, [r7, #27]
 800780a:	e059      	b.n	80078c0 <UART_SetConfig+0x2a8>
 800780c:	2310      	movs	r3, #16
 800780e:	76fb      	strb	r3, [r7, #27]
 8007810:	bf00      	nop
 8007812:	e055      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a45      	ldr	r2, [pc, #276]	; (8007930 <UART_SetConfig+0x318>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d124      	bne.n	8007868 <UART_SetConfig+0x250>
 800781e:	4b40      	ldr	r3, [pc, #256]	; (8007920 <UART_SetConfig+0x308>)
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782c:	d012      	beq.n	8007854 <UART_SetConfig+0x23c>
 800782e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007832:	d802      	bhi.n	800783a <UART_SetConfig+0x222>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <UART_SetConfig+0x230>
 8007838:	e012      	b.n	8007860 <UART_SetConfig+0x248>
 800783a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783e:	d006      	beq.n	800784e <UART_SetConfig+0x236>
 8007840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007844:	d009      	beq.n	800785a <UART_SetConfig+0x242>
 8007846:	e00b      	b.n	8007860 <UART_SetConfig+0x248>
 8007848:	2300      	movs	r3, #0
 800784a:	76fb      	strb	r3, [r7, #27]
 800784c:	e038      	b.n	80078c0 <UART_SetConfig+0x2a8>
 800784e:	2302      	movs	r3, #2
 8007850:	76fb      	strb	r3, [r7, #27]
 8007852:	e035      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007854:	2304      	movs	r3, #4
 8007856:	76fb      	strb	r3, [r7, #27]
 8007858:	e032      	b.n	80078c0 <UART_SetConfig+0x2a8>
 800785a:	2308      	movs	r3, #8
 800785c:	76fb      	strb	r3, [r7, #27]
 800785e:	e02f      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007860:	2310      	movs	r3, #16
 8007862:	76fb      	strb	r3, [r7, #27]
 8007864:	bf00      	nop
 8007866:	e02b      	b.n	80078c0 <UART_SetConfig+0x2a8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <UART_SetConfig+0x300>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d124      	bne.n	80078bc <UART_SetConfig+0x2a4>
 8007872:	4b2b      	ldr	r3, [pc, #172]	; (8007920 <UART_SetConfig+0x308>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007880:	d012      	beq.n	80078a8 <UART_SetConfig+0x290>
 8007882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007886:	d802      	bhi.n	800788e <UART_SetConfig+0x276>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <UART_SetConfig+0x284>
 800788c:	e012      	b.n	80078b4 <UART_SetConfig+0x29c>
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007892:	d006      	beq.n	80078a2 <UART_SetConfig+0x28a>
 8007894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007898:	d009      	beq.n	80078ae <UART_SetConfig+0x296>
 800789a:	e00b      	b.n	80078b4 <UART_SetConfig+0x29c>
 800789c:	2300      	movs	r3, #0
 800789e:	76fb      	strb	r3, [r7, #27]
 80078a0:	e00e      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80078a2:	2302      	movs	r3, #2
 80078a4:	76fb      	strb	r3, [r7, #27]
 80078a6:	e00b      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80078a8:	2304      	movs	r3, #4
 80078aa:	76fb      	strb	r3, [r7, #27]
 80078ac:	e008      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80078ae:	2308      	movs	r3, #8
 80078b0:	76fb      	strb	r3, [r7, #27]
 80078b2:	e005      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80078b4:	2310      	movs	r3, #16
 80078b6:	76fb      	strb	r3, [r7, #27]
 80078b8:	bf00      	nop
 80078ba:	e001      	b.n	80078c0 <UART_SetConfig+0x2a8>
 80078bc:	2310      	movs	r3, #16
 80078be:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a14      	ldr	r2, [pc, #80]	; (8007918 <UART_SetConfig+0x300>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f040 80a5 	bne.w	8007a16 <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078cc:	7efb      	ldrb	r3, [r7, #27]
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d83a      	bhi.n	8007948 <UART_SetConfig+0x330>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x2c0>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	08007949 	.word	0x08007949
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007949 	.word	0x08007949
 80078f0:	08007949 	.word	0x08007949
 80078f4:	08007949 	.word	0x08007949
 80078f8:	08007941 	.word	0x08007941
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fe fb06 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007900:	6178      	str	r0, [r7, #20]
        break;
 8007902:	e026      	b.n	8007952 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007904:	f7fe fb16 	bl	8005f34 <HAL_RCC_GetPCLK2Freq>
 8007908:	6178      	str	r0, [r7, #20]
        break;
 800790a:	e022      	b.n	8007952 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <UART_SetConfig+0x31c>)
 800790e:	617b      	str	r3, [r7, #20]
        break;
 8007910:	e01f      	b.n	8007952 <UART_SetConfig+0x33a>
 8007912:	bf00      	nop
 8007914:	cfff69f3 	.word	0xcfff69f3
 8007918:	40008000 	.word	0x40008000
 800791c:	40013800 	.word	0x40013800
 8007920:	40021000 	.word	0x40021000
 8007924:	40004400 	.word	0x40004400
 8007928:	40004800 	.word	0x40004800
 800792c:	40004c00 	.word	0x40004c00
 8007930:	40005000 	.word	0x40005000
 8007934:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007938:	f7fe fa38 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 800793c:	6178      	str	r0, [r7, #20]
        break;
 800793e:	e008      	b.n	8007952 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007944:	617b      	str	r3, [r7, #20]
        break;
 8007946:	e004      	b.n	8007952 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	76bb      	strb	r3, [r7, #26]
        break;
 8007950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 811d 	beq.w	8007b94 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	4a97      	ldr	r2, [pc, #604]	; (8007bbc <UART_SetConfig+0x5a4>)
 8007960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007964:	461a      	mov	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	fbb3 f3f2 	udiv	r3, r3, r2
 800796c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	4613      	mov	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4413      	add	r3, r2
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	d305      	bcc.n	800798a <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	429a      	cmp	r2, r3
 8007988:	d902      	bls.n	8007990 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	76bb      	strb	r3, [r7, #26]
 800798e:	e101      	b.n	8007b94 <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4618      	mov	r0, r3
 8007994:	f04f 0100 	mov.w	r1, #0
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	4a87      	ldr	r2, [pc, #540]	; (8007bbc <UART_SetConfig+0x5a4>)
 800799e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f04f 0400 	mov.w	r4, #0
 80079a8:	461a      	mov	r2, r3
 80079aa:	4623      	mov	r3, r4
 80079ac:	f7f8 fe56 	bl	800065c <__aeabi_uldivmod>
 80079b0:	4603      	mov	r3, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	4619      	mov	r1, r3
 80079b6:	4622      	mov	r2, r4
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	f04f 0400 	mov.w	r4, #0
 80079c0:	0214      	lsls	r4, r2, #8
 80079c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079c6:	020b      	lsls	r3, r1, #8
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6852      	ldr	r2, [r2, #4]
 80079cc:	0852      	lsrs	r2, r2, #1
 80079ce:	4611      	mov	r1, r2
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	eb13 0b01 	adds.w	fp, r3, r1
 80079d8:	eb44 0c02 	adc.w	ip, r4, r2
 80079dc:	4658      	mov	r0, fp
 80079de:	4661      	mov	r1, ip
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f04f 0400 	mov.w	r4, #0
 80079e8:	461a      	mov	r2, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	f7f8 fe36 	bl	800065c <__aeabi_uldivmod>
 80079f0:	4603      	mov	r3, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fc:	d308      	bcc.n	8007a10 <UART_SetConfig+0x3f8>
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a04:	d204      	bcs.n	8007a10 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	60da      	str	r2, [r3, #12]
 8007a0e:	e0c1      	b.n	8007b94 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	76bb      	strb	r3, [r7, #26]
 8007a14:	e0be      	b.n	8007b94 <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1e:	d164      	bne.n	8007aea <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 8007a20:	7efb      	ldrb	r3, [r7, #27]
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d827      	bhi.n	8007a76 <UART_SetConfig+0x45e>
 8007a26:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <UART_SetConfig+0x414>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a77 	.word	0x08007a77
 8007a3c:	08007a67 	.word	0x08007a67
 8007a40:	08007a77 	.word	0x08007a77
 8007a44:	08007a77 	.word	0x08007a77
 8007a48:	08007a77 	.word	0x08007a77
 8007a4c:	08007a6f 	.word	0x08007a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a50:	f7fe fa5c 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007a54:	6178      	str	r0, [r7, #20]
        break;
 8007a56:	e013      	b.n	8007a80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a58:	f7fe fa6c 	bl	8005f34 <HAL_RCC_GetPCLK2Freq>
 8007a5c:	6178      	str	r0, [r7, #20]
        break;
 8007a5e:	e00f      	b.n	8007a80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a60:	4b57      	ldr	r3, [pc, #348]	; (8007bc0 <UART_SetConfig+0x5a8>)
 8007a62:	617b      	str	r3, [r7, #20]
        break;
 8007a64:	e00c      	b.n	8007a80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a66:	f7fe f9a1 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8007a6a:	6178      	str	r0, [r7, #20]
        break;
 8007a6c:	e008      	b.n	8007a80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a72:	617b      	str	r3, [r7, #20]
        break;
 8007a74:	e004      	b.n	8007a80 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8086 	beq.w	8007b94 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	4a4b      	ldr	r2, [pc, #300]	; (8007bbc <UART_SetConfig+0x5a4>)
 8007a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a92:	461a      	mov	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a9a:	005a      	lsls	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	441a      	add	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	d916      	bls.n	8007ae4 <UART_SetConfig+0x4cc>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007abc:	d212      	bcs.n	8007ae4 <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	f023 030f 	bic.w	r3, r3, #15
 8007ac6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	89fb      	ldrh	r3, [r7, #14]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	89fa      	ldrh	r2, [r7, #14]
 8007ae0:	60da      	str	r2, [r3, #12]
 8007ae2:	e057      	b.n	8007b94 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	76bb      	strb	r3, [r7, #26]
 8007ae8:	e054      	b.n	8007b94 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aea:	7efb      	ldrb	r3, [r7, #27]
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d828      	bhi.n	8007b42 <UART_SetConfig+0x52a>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <UART_SetConfig+0x4e0>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b25 	.word	0x08007b25
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	08007b43 	.word	0x08007b43
 8007b08:	08007b33 	.word	0x08007b33
 8007b0c:	08007b43 	.word	0x08007b43
 8007b10:	08007b43 	.word	0x08007b43
 8007b14:	08007b43 	.word	0x08007b43
 8007b18:	08007b3b 	.word	0x08007b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b1c:	f7fe f9f6 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8007b20:	6178      	str	r0, [r7, #20]
        break;
 8007b22:	e013      	b.n	8007b4c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b24:	f7fe fa06 	bl	8005f34 <HAL_RCC_GetPCLK2Freq>
 8007b28:	6178      	str	r0, [r7, #20]
        break;
 8007b2a:	e00f      	b.n	8007b4c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b2c:	4b24      	ldr	r3, [pc, #144]	; (8007bc0 <UART_SetConfig+0x5a8>)
 8007b2e:	617b      	str	r3, [r7, #20]
        break;
 8007b30:	e00c      	b.n	8007b4c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b32:	f7fe f93b 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8007b36:	6178      	str	r0, [r7, #20]
        break;
 8007b38:	e008      	b.n	8007b4c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3e:	617b      	str	r3, [r7, #20]
        break;
 8007b40:	e004      	b.n	8007b4c <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	76bb      	strb	r3, [r7, #26]
        break;
 8007b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d020      	beq.n	8007b94 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	4a19      	ldr	r2, [pc, #100]	; (8007bbc <UART_SetConfig+0x5a4>)
 8007b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	441a      	add	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b0f      	cmp	r3, #15
 8007b7c:	d908      	bls.n	8007b90 <UART_SetConfig+0x578>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b84:	d204      	bcs.n	8007b90 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	e001      	b.n	8007b94 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007bb0:	7ebb      	ldrb	r3, [r7, #26]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007bbc:	08009a6c 	.word	0x08009a6c
 8007bc0:	00f42400 	.word	0x00f42400

08007bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc2:	d10a      	bne.n	8007cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d18:	f7fb fcf0 	bl	80036fc <HAL_GetTick>
 8007d1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d10e      	bne.n	8007d4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f82f 	bl	8007d9e <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e025      	b.n	8007d96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d10e      	bne.n	8007d76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f819 	bl	8007d9e <UART_WaitOnFlagUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e00f      	b.n	8007d96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	603b      	str	r3, [r7, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dae:	e062      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d05e      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db8:	f7fb fca0 	bl	80036fc <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d302      	bcc.n	8007dce <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d11d      	bne.n	8007e0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ddc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0201 	bic.w	r2, r2, #1
 8007dec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e045      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d02e      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e26:	d126      	bne.n	8007e76 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0201 	bic.w	r2, r2, #1
 8007e50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e00f      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	bf0c      	ite	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	2300      	movne	r3, #0
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d08d      	beq.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e027      	b.n	8007f04 <HAL_UARTEx_DisableFifoMode+0x66>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	; 0x24
 8007ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0201 	bic.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ee2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e02d      	b.n	8007f84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2224      	movs	r2, #36	; 0x24
 8007f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f84f 	bl	8008008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e02d      	b.n	8008000 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2224      	movs	r2, #36	; 0x24
 8007fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0201 	bic.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f811 	bl	8008008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008010:	4a2f      	ldr	r2, [pc, #188]	; (80080d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800801a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800801e:	4a2d      	ldr	r2, [pc, #180]	; (80080d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008028:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008030:	2b00      	cmp	r3, #0
 8008032:	d108      	bne.n	8008046 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008044:	e03d      	b.n	80080c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008046:	2308      	movs	r3, #8
 8008048:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800804a:	2308      	movs	r3, #8
 800804c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	0e5b      	lsrs	r3, r3, #25
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	0f5b      	lsrs	r3, r3, #29
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800806e:	7fbb      	ldrb	r3, [r7, #30]
 8008070:	7f3a      	ldrb	r2, [r7, #28]
 8008072:	f107 0120 	add.w	r1, r7, #32
 8008076:	440a      	add	r2, r1
 8008078:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800807c:	fb02 f303 	mul.w	r3, r2, r3
 8008080:	7f3a      	ldrb	r2, [r7, #28]
 8008082:	f107 0120 	add.w	r1, r7, #32
 8008086:	440a      	add	r2, r1
 8008088:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800808c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008098:	7ffb      	ldrb	r3, [r7, #31]
 800809a:	7f7a      	ldrb	r2, [r7, #29]
 800809c:	f107 0120 	add.w	r1, r7, #32
 80080a0:	440a      	add	r2, r1
 80080a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	7f7a      	ldrb	r2, [r7, #29]
 80080ac:	f107 0120 	add.w	r1, r7, #32
 80080b0:	440a      	add	r2, r1
 80080b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80080b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080c2:	bf00      	nop
 80080c4:	3724      	adds	r7, #36	; 0x24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	080099f0 	.word	0x080099f0
 80080d4:	080099f8 	.word	0x080099f8

080080d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80080d8:	b480      	push	{r7}
 80080da:	b08b      	sub	sp, #44	; 0x2c
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	fa93 f3a3 	rbit	r3, r3
 80080f2:	613b      	str	r3, [r7, #16]
  return result;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80080fe:	2320      	movs	r3, #32
 8008100:	e003      	b.n	800810a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	fab3 f383 	clz	r3, r3
 8008108:	b2db      	uxtb	r3, r3
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	2103      	movs	r1, #3
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	401a      	ands	r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	fa93 f3a3 	rbit	r3, r3
 8008120:	61fb      	str	r3, [r7, #28]
  return result;
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800812c:	2320      	movs	r3, #32
 800812e:	e003      	b.n	8008138 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	fab3 f383 	clz	r3, r3
 8008136:	b2db      	uxtb	r3, r3
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	431a      	orrs	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	601a      	str	r2, [r3, #0]
}
 8008146:	bf00      	nop
 8008148:	372c      	adds	r7, #44	; 0x2c
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	43db      	mvns	r3, r3
 8008166:	401a      	ands	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	431a      	orrs	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	605a      	str	r2, [r3, #4]
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008182:	b480      	push	{r7}
 8008184:	b08b      	sub	sp, #44	; 0x2c
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	fa93 f3a3 	rbit	r3, r3
 800819c:	613b      	str	r3, [r7, #16]
  return result;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80081a8:	2320      	movs	r3, #32
 80081aa:	e003      	b.n	80081b4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	fab3 f383 	clz	r3, r3
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	2103      	movs	r1, #3
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	43db      	mvns	r3, r3
 80081be:	401a      	ands	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	fa93 f3a3 	rbit	r3, r3
 80081ca:	61fb      	str	r3, [r7, #28]
  return result;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80081d6:	2320      	movs	r3, #32
 80081d8:	e003      	b.n	80081e2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	fab3 f383 	clz	r3, r3
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ea:	431a      	orrs	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80081f0:	bf00      	nop
 80081f2:	372c      	adds	r7, #44	; 0x2c
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b08b      	sub	sp, #44	; 0x2c
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	fa93 f3a3 	rbit	r3, r3
 8008216:	613b      	str	r3, [r7, #16]
  return result;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008222:	2320      	movs	r3, #32
 8008224:	e003      	b.n	800822e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	fab3 f383 	clz	r3, r3
 800822c:	b2db      	uxtb	r3, r3
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	2103      	movs	r1, #3
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	43db      	mvns	r3, r3
 8008238:	401a      	ands	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	fa93 f3a3 	rbit	r3, r3
 8008244:	61fb      	str	r3, [r7, #28]
  return result;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008250:	2320      	movs	r3, #32
 8008252:	e003      	b.n	800825c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	fab3 f383 	clz	r3, r3
 800825a:	b2db      	uxtb	r3, r3
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	fa01 f303 	lsl.w	r3, r1, r3
 8008264:	431a      	orrs	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	60da      	str	r2, [r3, #12]
}
 800826a:	bf00      	nop
 800826c:	372c      	adds	r7, #44	; 0x2c
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008276:	b480      	push	{r7}
 8008278:	b08b      	sub	sp, #44	; 0x2c
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a1a      	ldr	r2, [r3, #32]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	fa93 f3a3 	rbit	r3, r3
 8008290:	613b      	str	r3, [r7, #16]
  return result;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800829c:	2320      	movs	r3, #32
 800829e:	e003      	b.n	80082a8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	fab3 f383 	clz	r3, r3
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	210f      	movs	r1, #15
 80082ac:	fa01 f303 	lsl.w	r3, r1, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	401a      	ands	r2, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	fa93 f3a3 	rbit	r3, r3
 80082be:	61fb      	str	r3, [r7, #28]
  return result;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80082ca:	2320      	movs	r3, #32
 80082cc:	e003      	b.n	80082d6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	fab3 f383 	clz	r3, r3
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	fa01 f303 	lsl.w	r3, r1, r3
 80082de:	431a      	orrs	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80082e4:	bf00      	nop
 80082e6:	372c      	adds	r7, #44	; 0x2c
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b08b      	sub	sp, #44	; 0x2c
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	fa93 f3a3 	rbit	r3, r3
 800830c:	613b      	str	r3, [r7, #16]
  return result;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008318:	2320      	movs	r3, #32
 800831a:	e003      	b.n	8008324 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	fab3 f383 	clz	r3, r3
 8008322:	b2db      	uxtb	r3, r3
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	210f      	movs	r1, #15
 8008328:	fa01 f303 	lsl.w	r3, r1, r3
 800832c:	43db      	mvns	r3, r3
 800832e:	401a      	ands	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	fa93 f3a3 	rbit	r3, r3
 800833c:	61fb      	str	r3, [r7, #28]
  return result;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008348:	2320      	movs	r3, #32
 800834a:	e003      	b.n	8008354 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	fab3 f383 	clz	r3, r3
 8008352:	b2db      	uxtb	r3, r3
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	fa01 f303 	lsl.w	r3, r1, r3
 800835c:	431a      	orrs	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008362:	bf00      	nop
 8008364:	372c      	adds	r7, #44	; 0x2c
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b088      	sub	sp, #32
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	fa93 f3a3 	rbit	r3, r3
 8008384:	60fb      	str	r3, [r7, #12]
  return result;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <LL_GPIO_Init+0x26>
    return 32U;
 8008390:	2320      	movs	r3, #32
 8008392:	e003      	b.n	800839c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	fab3 f383 	clz	r3, r3
 800839a:	b2db      	uxtb	r3, r3
 800839c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800839e:	e047      	b.n	8008430 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	2101      	movs	r1, #1
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ac:	4013      	ands	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d039      	beq.n	800842a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d003      	beq.n	80083c6 <LL_GPIO_Init+0x58>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d10d      	bne.n	80083e2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	461a      	mov	r2, r3
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fed7 	bl	8008182 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	461a      	mov	r2, r3
 80083da:	69b9      	ldr	r1, [r7, #24]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff feb8 	bl	8008152 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	461a      	mov	r2, r3
 80083e8:	69b9      	ldr	r1, [r7, #24]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ff06 	bl	80081fc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d111      	bne.n	800841c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	2bff      	cmp	r3, #255	; 0xff
 80083fc:	d807      	bhi.n	800840e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	461a      	mov	r2, r3
 8008404:	69b9      	ldr	r1, [r7, #24]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff ff35 	bl	8008276 <LL_GPIO_SetAFPin_0_7>
 800840c:	e006      	b.n	800841c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	461a      	mov	r2, r3
 8008414:	69b9      	ldr	r1, [r7, #24]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ff6a 	bl	80082f0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	461a      	mov	r2, r3
 8008422:	69b9      	ldr	r1, [r7, #24]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff fe57 	bl	80080d8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	3301      	adds	r3, #1
 800842e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	fa22 f303 	lsr.w	r3, r2, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1b0      	bne.n	80083a0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008450:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008454:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	b29b      	uxth	r3, r3
 8008462:	43db      	mvns	r3, r3
 8008464:	b29b      	uxth	r3, r3
 8008466:	4013      	ands	r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800847e:	b084      	sub	sp, #16
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	f107 0014 	add.w	r0, r7, #20
 800848c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	b004      	add	sp, #16
 80084be:	4770      	bx	lr

080084c0 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	; 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	4603      	mov	r3, r0
 80084ca:	71fb      	strb	r3, [r7, #7]
 80084cc:	460b      	mov	r3, r1
 80084ce:	71bb      	strb	r3, [r7, #6]
 80084d0:	4613      	mov	r3, r2
 80084d2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80084d8:	79bb      	ldrb	r3, [r7, #6]
 80084da:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80084dc:	797b      	ldrb	r3, [r7, #5]
 80084de:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	2207      	movs	r2, #7
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f998 	bl	800981e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80084ee:	f107 0318 	add.w	r3, r7, #24
 80084f2:	2218      	movs	r2, #24
 80084f4:	2100      	movs	r1, #0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 f991 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80084fc:	233f      	movs	r3, #63	; 0x3f
 80084fe:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008500:	238a      	movs	r3, #138	; 0x8a
 8008502:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800850a:	2303      	movs	r3, #3
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008514:	2307      	movs	r3, #7
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	2100      	movs	r1, #0
 800851e:	4618      	mov	r0, r3
 8008520:	f000 feb0 	bl	8009284 <hci_send_req>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	da01      	bge.n	800852e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800852a:	23ff      	movs	r3, #255	; 0xff
 800852c:	e014      	b.n	8008558 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800852e:	7b3b      	ldrb	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008534:	7b3b      	ldrb	r3, [r7, #12]
 8008536:	e00f      	b.n	8008558 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008538:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800853c:	b29a      	uxth	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008542:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008546:	b29a      	uxth	r2, r3
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800854c:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008550:	b29a      	uxth	r2, r3
 8008552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008554:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3730      	adds	r7, #48	; 0x30
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08e      	sub	sp, #56	; 0x38
 8008564:	af00      	add	r7, sp, #0
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008574:	f107 0314 	add.w	r3, r7, #20
 8008578:	2207      	movs	r2, #7
 800857a:	2100      	movs	r1, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f001 f94e 	bl	800981e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008582:	f107 0320 	add.w	r3, r7, #32
 8008586:	2218      	movs	r2, #24
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f947 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008590:	233f      	movs	r3, #63	; 0x3f
 8008592:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8008594:	238a      	movs	r3, #138	; 0x8a
 8008596:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8008598:	f107 031c 	add.w	r3, r7, #28
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800859e:	2301      	movs	r3, #1
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80085a2:	f107 0314 	add.w	r3, r7, #20
 80085a6:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80085a8:	2307      	movs	r3, #7
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80085ac:	f107 0320 	add.w	r3, r7, #32
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fe66 	bl	8009284 <hci_send_req>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	da01      	bge.n	80085c2 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80085be:	23ff      	movs	r3, #255	; 0xff
 80085c0:	e014      	b.n	80085ec <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80085c2:	7d3b      	ldrb	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80085c8:	7d3b      	ldrb	r3, [r7, #20]
 80085ca:	e00f      	b.n	80085ec <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80085cc:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80085d6:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80085e0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3738      	adds	r7, #56	; 0x38
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b095      	sub	sp, #84	; 0x54
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	4623      	mov	r3, r4
 8008604:	71fb      	strb	r3, [r7, #7]
 8008606:	4603      	mov	r3, r0
 8008608:	80bb      	strh	r3, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	807b      	strh	r3, [r7, #2]
 800860e:	4613      	mov	r3, r2
 8008610:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8008618:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800861c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008620:	4413      	add	r3, r2
 8008622:	330e      	adds	r3, #14
 8008624:	2b28      	cmp	r3, #40	; 0x28
 8008626:	d901      	bls.n	800862c <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8008628:	2342      	movs	r3, #66	; 0x42
 800862a:	e0ce      	b.n	80087ca <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800862c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008630:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008634:	4413      	add	r3, r2
 8008636:	79fa      	ldrb	r2, [r7, #7]
 8008638:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800863c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008640:	3301      	adds	r3, #1
 8008642:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008646:	88bb      	ldrh	r3, [r7, #4]
 8008648:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800864a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800864e:	f107 0208 	add.w	r2, r7, #8
 8008652:	4413      	add	r3, r2
 8008654:	88ba      	ldrh	r2, [r7, #4]
 8008656:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800865c:	3302      	adds	r3, #2
 800865e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008662:	887b      	ldrh	r3, [r7, #2]
 8008664:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008666:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800866a:	f107 0208 	add.w	r2, r7, #8
 800866e:	4413      	add	r3, r2
 8008670:	887a      	ldrh	r2, [r7, #2]
 8008672:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008674:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008678:	3302      	adds	r3, #2
 800867a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800867e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008682:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008686:	4413      	add	r3, r2
 8008688:	79ba      	ldrb	r2, [r7, #6]
 800868a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800868e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008692:	3301      	adds	r3, #1
 8008694:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008698:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800869c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80086a0:	4413      	add	r3, r2
 80086a2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80086a6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80086aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086ae:	3301      	adds	r3, #1
 80086b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80086b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80086bc:	4413      	add	r3, r2
 80086be:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80086c2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80086c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086ca:	3301      	adds	r3, #1
 80086cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80086d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086d4:	f107 0208 	add.w	r2, r7, #8
 80086d8:	4413      	add	r3, r2
 80086da:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80086de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 f891 	bl	8009808 <memcpy>
  indx +=  LocalNameLen;
 80086e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80086ea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80086ee:	4413      	add	r3, r2
 80086f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80086f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80086fc:	4413      	add	r3, r2
 80086fe:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8008702:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008706:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800870a:	3301      	adds	r3, #1
 800870c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008710:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008714:	f107 0208 	add.w	r2, r7, #8
 8008718:	4413      	add	r3, r2
 800871a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800871e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008720:	4618      	mov	r0, r3
 8008722:	f001 f871 	bl	8009808 <memcpy>
  indx +=  ServiceUUIDLen;  
 8008726:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800872a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800872e:	4413      	add	r3, r2
 8008730:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008734:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008738:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800873c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008740:	f107 0208 	add.w	r2, r7, #8
 8008744:	4413      	add	r3, r2
 8008746:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800874a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800874c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008750:	3302      	adds	r3, #2
 8008752:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008756:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800875a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800875e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008762:	f107 0208 	add.w	r2, r7, #8
 8008766:	4413      	add	r3, r2
 8008768:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800876c:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800876e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008772:	3302      	adds	r3, #2
 8008774:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800877c:	2218      	movs	r2, #24
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f001 f84c 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008786:	233f      	movs	r3, #63	; 0x3f
 8008788:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800878a:	2383      	movs	r3, #131	; 0x83
 800878c:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800878e:	f107 0308 	add.w	r3, r7, #8
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8008794:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008798:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800879a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800879e:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80087a0:	2301      	movs	r3, #1
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80087a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fd6a 	bl	8009284 <hci_send_req>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	da01      	bge.n	80087ba <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 80087b6:	23ff      	movs	r3, #255	; 0xff
 80087b8:	e007      	b.n	80087ca <aci_gap_set_discoverable+0x1d6>

  if (status) {
 80087ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <aci_gap_set_discoverable+0x1d4>
    return status;
 80087c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087c6:	e000      	b.n	80087ca <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3754      	adds	r7, #84	; 0x54
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd90      	pop	{r4, r7, pc}

080087d2 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80087d2:	b590      	push	{r4, r7, lr}
 80087d4:	b091      	sub	sp, #68	; 0x44
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	603a      	str	r2, [r7, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4603      	mov	r3, r0
 80087de:	71fb      	strb	r3, [r7, #7]
 80087e0:	460b      	mov	r3, r1
 80087e2:	71bb      	strb	r3, [r7, #6]
 80087e4:	4613      	mov	r3, r2
 80087e6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80087ec:	79bb      	ldrb	r3, [r7, #6]
 80087ee:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80087f0:	79bb      	ldrb	r3, [r7, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	f107 030e 	add.w	r3, r7, #14
 80087fc:	6814      	ldr	r4, [r2, #0]
 80087fe:	6850      	ldr	r0, [r2, #4]
 8008800:	6891      	ldr	r1, [r2, #8]
 8008802:	68d2      	ldr	r2, [r2, #12]
 8008804:	601c      	str	r4, [r3, #0]
 8008806:	6058      	str	r0, [r3, #4]
 8008808:	6099      	str	r1, [r3, #8]
 800880a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800880c:	797b      	ldrb	r3, [r7, #5]
 800880e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008810:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008814:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008816:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800881a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800881e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008820:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8008824:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008828:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800882c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008830:	2218      	movs	r2, #24
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fff2 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800883a:	233f      	movs	r3, #63	; 0x3f
 800883c:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800883e:	2386      	movs	r3, #134	; 0x86
 8008840:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8008842:	f107 030c 	add.w	r3, r7, #12
 8008846:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8008848:	231a      	movs	r3, #26
 800884a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800884c:	f107 030b 	add.w	r3, r7, #11
 8008850:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8008852:	2301      	movs	r3, #1
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800885a:	2100      	movs	r1, #0
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fd11 	bl	8009284 <hci_send_req>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	da01      	bge.n	800886c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008868:	23ff      	movs	r3, #255	; 0xff
 800886a:	e005      	b.n	8008878 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008872:	7afb      	ldrb	r3, [r7, #11]
 8008874:	e000      	b.n	8008878 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3744      	adds	r7, #68	; 0x44
 800887c:	46bd      	mov	sp, r7
 800887e:	bd90      	pop	{r4, r7, pc}

08008880 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b092      	sub	sp, #72	; 0x48
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	2b1f      	cmp	r3, #31
 8008896:	d901      	bls.n	800889c <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008898:	2342      	movs	r3, #66	; 0x42
 800889a:	e03f      	b.n	800891c <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800889c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80088a4:	4413      	add	r3, r2
 80088a6:	79fa      	ldrb	r2, [r7, #7]
 80088a8:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 80088ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088b0:	3301      	adds	r3, #1
 80088b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80088b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088ba:	f107 0208 	add.w	r2, r7, #8
 80088be:	4413      	add	r3, r2
 80088c0:	79fa      	ldrb	r2, [r7, #7]
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 ff9f 	bl	8009808 <memcpy>
  indx +=  AdvLen;
 80088ca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	4413      	add	r3, r2
 80088d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088da:	2218      	movs	r2, #24
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 ff9d 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088e4:	233f      	movs	r3, #63	; 0x3f
 80088e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80088e8:	238e      	movs	r3, #142	; 0x8e
 80088ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80088f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088f6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 80088f8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 80088fe:	2301      	movs	r3, #1
 8008900:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fcbb 	bl	8009284 <hci_send_req>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	da01      	bge.n	8008918 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 8008914:	23ff      	movs	r3, #255	; 0xff
 8008916:	e001      	b.n	800891c <aci_gap_update_adv_data+0x9c>
    
  return status;
 8008918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800891c:	4618      	mov	r0, r3
 800891e:	3748      	adds	r7, #72	; 0x48
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	2218      	movs	r2, #24
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f000 ff73 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008938:	233f      	movs	r3, #63	; 0x3f
 800893a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800893c:	f240 1301 	movw	r3, #257	; 0x101
 8008940:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008942:	1dfb      	adds	r3, r7, #7
 8008944:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008946:	2301      	movs	r3, #1
 8008948:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800894a:	f107 0308 	add.w	r3, r7, #8
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc97 	bl	8009284 <hci_send_req>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	da01      	bge.n	8008960 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800895c:	23ff      	movs	r3, #255	; 0xff
 800895e:	e000      	b.n	8008962 <aci_gatt_init+0x3e>

  return status;
 8008960:	79fb      	ldrb	r3, [r7, #7]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b090      	sub	sp, #64	; 0x40
 800896e:	af00      	add	r7, sp, #0
 8008970:	6039      	str	r1, [r7, #0]
 8008972:	4611      	mov	r1, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
 800897a:	460b      	mov	r3, r1
 800897c:	71bb      	strb	r3, [r7, #6]
 800897e:	4613      	mov	r3, r2
 8008980:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8008988:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800898c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008990:	4413      	add	r3, r2
 8008992:	79fa      	ldrb	r2, [r7, #7]
 8008994:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008998:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800899c:	3301      	adds	r3, #1
 800899e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d103      	bne.n	80089b0 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80089ae:	e002      	b.n	80089b6 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 80089b0:	2310      	movs	r3, #16
 80089b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80089b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80089ba:	f107 020c 	add.w	r2, r7, #12
 80089be:	4413      	add	r3, r2
 80089c0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ff1e 	bl	8009808 <memcpy>
  indx +=  uuid_len;
 80089cc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80089d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089d4:	4413      	add	r3, r2
 80089d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 80089da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80089de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80089e2:	4413      	add	r3, r2
 80089e4:	79ba      	ldrb	r2, [r7, #6]
 80089e6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80089ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80089ee:	3301      	adds	r3, #1
 80089f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80089f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80089f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80089fc:	4413      	add	r3, r2
 80089fe:	797a      	ldrb	r2, [r7, #5]
 8008a00:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008a04:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008a08:	3301      	adds	r3, #1
 8008a0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a0e:	f107 0320 	add.w	r3, r7, #32
 8008a12:	2203      	movs	r2, #3
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 ff01 	bl	800981e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a20:	2218      	movs	r2, #24
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fefa 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a2a:	233f      	movs	r3, #63	; 0x3f
 8008a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008a2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008a32:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8008a34:	f107 030c 	add.w	r3, r7, #12
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8008a3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008a3e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8008a40:	f107 0320 	add.w	r3, r7, #32
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008a46:	2303      	movs	r3, #3
 8008a48:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fc17 	bl	8009284 <hci_send_req>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da01      	bge.n	8008a60 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008a5c:	23ff      	movs	r3, #255	; 0xff
 8008a5e:	e00c      	b.n	8008a7a <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8008a60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <aci_gatt_add_serv+0x104>
    return resp.status;
 8008a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a6c:	e005      	b.n	8008a7a <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008a6e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a76:	801a      	strh	r2, [r3, #0]

  return 0;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3740      	adds	r7, #64	; 0x40
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b092      	sub	sp, #72	; 0x48
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	603a      	str	r2, [r7, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	80fb      	strh	r3, [r7, #6]
 8008a90:	460b      	mov	r3, r1
 8008a92:	717b      	strb	r3, [r7, #5]
 8008a94:	4613      	mov	r3, r2
 8008a96:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008aa6:	f107 020c 	add.w	r2, r7, #12
 8008aaa:	4413      	add	r3, r2
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008ab0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8008aba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008abe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ac2:	4413      	add	r3, r2
 8008ac4:	797a      	ldrb	r2, [r7, #5]
 8008ac6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008aca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ace:	3301      	adds	r3, #1
 8008ad0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008ad4:	797b      	ldrb	r3, [r7, #5]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d103      	bne.n	8008ae2 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8008ada:	2302      	movs	r3, #2
 8008adc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ae0:	e002      	b.n	8008ae8 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8008ae2:	2310      	movs	r3, #16
 8008ae4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008ae8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008aec:	f107 020c 	add.w	r2, r7, #12
 8008af0:	4413      	add	r3, r2
 8008af2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fe85 	bl	8009808 <memcpy>
  indx +=  uuid_len;
 8008afe:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b06:	4413      	add	r3, r2
 8008b08:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8008b0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b14:	4413      	add	r3, r2
 8008b16:	793a      	ldrb	r2, [r7, #4]
 8008b18:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b20:	3301      	adds	r3, #1
 8008b22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8008b26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b2e:	4413      	add	r3, r2
 8008b30:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008b34:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8008b42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8008b50:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b58:	3301      	adds	r3, #1
 8008b5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8008b5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b66:	4413      	add	r3, r2
 8008b68:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8008b6c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b74:	3301      	adds	r3, #1
 8008b76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8008b7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b82:	4413      	add	r3, r2
 8008b84:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8008b88:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b90:	3301      	adds	r3, #1
 8008b92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8008b96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008b9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008ba4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008ba8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008bac:	3301      	adds	r3, #1
 8008bae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fe2f 	bl	800981e <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bc4:	2218      	movs	r2, #24
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fe28 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008bce:	233f      	movs	r3, #63	; 0x3f
 8008bd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008bd2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008bd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8008bd8:	f107 030c 	add.w	r3, r7, #12
 8008bdc:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8008bde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008be2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8008be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008bea:	2303      	movs	r3, #3
 8008bec:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fb45 	bl	8009284 <hci_send_req>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da01      	bge.n	8008c04 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8008c00:	23ff      	movs	r3, #255	; 0xff
 8008c02:	e00c      	b.n	8008c1e <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8008c04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <aci_gatt_add_char+0x190>
    return resp.status;
 8008c0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c10:	e005      	b.n	8008c1e <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8008c12:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	801a      	strh	r2, [r3, #0]

  return 0;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3748      	adds	r7, #72	; 0x48
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008c26:	b590      	push	{r4, r7, lr}
 8008c28:	b0ab      	sub	sp, #172	; 0xac
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	461a      	mov	r2, r3
 8008c34:	4623      	mov	r3, r4
 8008c36:	80fb      	strh	r3, [r7, #6]
 8008c38:	4603      	mov	r3, r0
 8008c3a:	80bb      	strh	r3, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
 8008c40:	4613      	mov	r3, r2
 8008c42:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008c4a:	78bb      	ldrb	r3, [r7, #2]
 8008c4c:	3306      	adds	r3, #6
 8008c4e:	2b80      	cmp	r3, #128	; 0x80
 8008c50:	dd01      	ble.n	8008c56 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8008c52:	2342      	movs	r3, #66	; 0x42
 8008c54:	e076      	b.n	8008d44 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 8008c56:	88fb      	ldrh	r3, [r7, #6]
 8008c58:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008c5a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c5e:	f107 0208 	add.w	r2, r7, #8
 8008c62:	4413      	add	r3, r2
 8008c64:	88fa      	ldrh	r2, [r7, #6]
 8008c66:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008c68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8008c72:	88bb      	ldrh	r3, [r7, #4]
 8008c74:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008c76:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c7a:	f107 0208 	add.w	r2, r7, #8
 8008c7e:	4413      	add	r3, r2
 8008c80:	88ba      	ldrh	r2, [r7, #4]
 8008c82:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008c84:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c88:	3302      	adds	r3, #2
 8008c8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8008c8e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008c92:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008c96:	4413      	add	r3, r2
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008c9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8008ca8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008cac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008cb0:	4413      	add	r3, r2
 8008cb2:	78ba      	ldrb	r2, [r7, #2]
 8008cb4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008cb8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008cc2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008cc6:	f107 0208 	add.w	r2, r7, #8
 8008cca:	4413      	add	r3, r2
 8008ccc:	78ba      	ldrb	r2, [r7, #2]
 8008cce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fd98 	bl	8009808 <memcpy>
  indx +=  charValueLen;
 8008cd8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8008cdc:	78bb      	ldrb	r3, [r7, #2]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ce4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008ce8:	2218      	movs	r2, #24
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fd96 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008cf2:	233f      	movs	r3, #63	; 0x3f
 8008cf4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008cf8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008cfc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8008d00:	f107 0308 	add.w	r3, r7, #8
 8008d04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8008d08:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8008d10:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8008d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008d1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 faad 	bl	8009284 <hci_send_req>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	da01      	bge.n	8008d34 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 8008d30:	23ff      	movs	r3, #255	; 0xff
 8008d32:	e007      	b.n	8008d44 <aci_gatt_update_char_value+0x11e>

  if (status) {
 8008d34:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <aci_gatt_update_char_value+0x11c>
    return status;
 8008d3c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8008d40:	e000      	b.n	8008d44 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	37ac      	adds	r7, #172	; 0xac
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd90      	pop	{r4, r7, pc}

08008d4c <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	; 0x28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d5a:	f107 0310 	add.w	r3, r7, #16
 8008d5e:	2218      	movs	r2, #24
 8008d60:	2100      	movs	r1, #0
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fd5b 	bl	800981e <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008d68:	233f      	movs	r3, #63	; 0x3f
 8008d6a:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008d6c:	f240 1327 	movw	r3, #295	; 0x127
 8008d70:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008d72:	f107 030c 	add.w	r3, r7, #12
 8008d76:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008d7c:	f107 030b 	add.w	r3, r7, #11
 8008d80:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008d82:	2301      	movs	r3, #1
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008d86:	f107 0310 	add.w	r3, r7, #16
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fa79 	bl	8009284 <hci_send_req>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	da01      	bge.n	8008d9c <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008d98:	23ff      	movs	r3, #255	; 0xff
 8008d9a:	e000      	b.n	8008d9e <aci_gatt_allow_read+0x52>

    return status;
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3728      	adds	r7, #40	; 0x28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b0ac      	sub	sp, #176	; 0xb0
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60ba      	str	r2, [r7, #8]
 8008dae:	607b      	str	r3, [r7, #4]
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
 8008db4:	460b      	mov	r3, r1
 8008db6:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008dc2:	2218      	movs	r2, #24
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fd29 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008dcc:	233f      	movs	r3, #63	; 0x3f
 8008dce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008dd2:	230d      	movs	r3, #13
 8008dd4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 8008dd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 8008de0:	2301      	movs	r3, #1
 8008de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 8008de6:	f107 0314 	add.w	r3, r7, #20
 8008dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 8008dee:	2380      	movs	r3, #128	; 0x80
 8008df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008df4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fa42 	bl	8009284 <hci_send_req>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da01      	bge.n	8008e0a <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008e06:	23ff      	movs	r3, #255	; 0xff
 8008e08:	e01c      	b.n	8008e44 <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 8008e0a:	7d3b      	ldrb	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008e10:	7d3b      	ldrb	r3, [r7, #20]
 8008e12:	e017      	b.n	8008e44 <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 8008e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	89ba      	ldrh	r2, [r7, #12]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bf28      	it	cs
 8008e2e:	4613      	movcs	r3, r2
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	3301      	adds	r3, #1
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fce3 	bl	8009808 <memcpy>
  
  return 0;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	37b0      	adds	r7, #176	; 0xb0
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	; 0x28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	460a      	mov	r2, r1
 8008e56:	71fb      	strb	r3, [r7, #7]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008e60:	79bb      	ldrb	r3, [r7, #6]
 8008e62:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	2218      	movs	r2, #24
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fcd6 	bl	800981e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e72:	233f      	movs	r3, #63	; 0x3f
 8008e74:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008e76:	230f      	movs	r3, #15
 8008e78:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008e7a:	f107 030c 	add.w	r3, r7, #12
 8008e7e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008e80:	2302      	movs	r3, #2
 8008e82:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008e84:	f107 030b 	add.w	r3, r7, #11
 8008e88:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008e8e:	f107 0310 	add.w	r3, r7, #16
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 f9f5 	bl	8009284 <hci_send_req>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da01      	bge.n	8008ea4 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008ea0:	23ff      	movs	r3, #255	; 0xff
 8008ea2:	e000      	b.n	8008ea6 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3728      	adds	r7, #40	; 0x28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008eae:	b590      	push	{r4, r7, lr}
 8008eb0:	b089      	sub	sp, #36	; 0x24
 8008eb2:	af02      	add	r7, sp, #8
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008eb8:	f107 0410 	add.w	r4, r7, #16
 8008ebc:	f107 0215 	add.w	r2, r7, #21
 8008ec0:	f107 0112 	add.w	r1, r7, #18
 8008ec4:	f107 0016 	add.w	r0, r7, #22
 8008ec8:	f107 030e 	add.w	r3, r7, #14
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	4623      	mov	r3, r4
 8008ed0:	f000 f853 	bl	8008f7a <hci_le_read_local_version>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d126      	bne.n	8008f2c <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008ede:	8a7b      	ldrh	r3, [r7, #18]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008eea:	8a7b      	ldrh	r3, [r7, #18]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b21a      	sxth	r2, r3
 8008efa:	89fb      	ldrh	r3, [r7, #14]
 8008efc:	091b      	lsrs	r3, r3, #4
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	b21b      	sxth	r3, r3
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	b21b      	sxth	r3, r3
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	b21a      	sxth	r2, r3
 8008f18:	89fb      	ldrh	r3, [r7, #14]
 8008f1a:	b21b      	sxth	r3, r3
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	b21b      	sxth	r3, r3
 8008f22:	4313      	orrs	r3, r2
 8008f24:	b21b      	sxth	r3, r3
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd90      	pop	{r4, r7, pc}

08008f36 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b088      	sub	sp, #32
 8008f3a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	2218      	movs	r2, #24
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fc6a 	bl	800981e <memset>
  rq.ogf = OGF_HOST_CTL;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f52:	1dfb      	adds	r3, r7, #7
 8008f54:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f56:	2301      	movs	r3, #1
 8008f58:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008f5a:	f107 0308 	add.w	r3, r7, #8
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f98f 	bl	8009284 <hci_send_req>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da01      	bge.n	8008f70 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008f6c:	23ff      	movs	r3, #255	; 0xff
 8008f6e:	e000      	b.n	8008f72 <hci_reset+0x3c>
  
  return status;  
 8008f70:	79fb      	ldrb	r3, [r7, #7]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3720      	adds	r7, #32
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b08e      	sub	sp, #56	; 0x38
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
 8008f86:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008f88:	f107 0314 	add.w	r3, r7, #20
 8008f8c:	2209      	movs	r2, #9
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fc44 	bl	800981e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f96:	f107 0320 	add.w	r3, r7, #32
 8008f9a:	2218      	movs	r2, #24
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fc3d 	bl	800981e <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008fb4:	f107 0314 	add.w	r3, r7, #20
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008fba:	2309      	movs	r3, #9
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008fbe:	f107 0320 	add.w	r3, r7, #32
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f95d 	bl	8009284 <hci_send_req>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da01      	bge.n	8008fd4 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008fd0:	23ff      	movs	r3, #255	; 0xff
 8008fd2:	e018      	b.n	8009006 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008fd4:	7d3b      	ldrb	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <hci_le_read_local_version+0x64>
    return resp.status;
 8008fda:	7d3b      	ldrb	r3, [r7, #20]
 8008fdc:	e013      	b.n	8009006 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008fde:	7d7a      	ldrb	r2, [r7, #21]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008fe4:	8afa      	ldrh	r2, [r7, #22]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008fea:	7e3a      	ldrb	r2, [r7, #24]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008ff0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008ffa:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009002:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3738      	adds	r7, #56	; 0x38
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b092      	sub	sp, #72	; 0x48
 8009012:	af00      	add	r7, sp, #0
 8009014:	4603      	mov	r3, r0
 8009016:	6039      	str	r1, [r7, #0]
 8009018:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800901a:	f107 0310 	add.w	r3, r7, #16
 800901e:	2220      	movs	r2, #32
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fbfb 	bl	800981e <memset>
  scan_resp_cp.length = length;
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	2b1f      	cmp	r3, #31
 8009030:	bf28      	it	cs
 8009032:	231f      	movcs	r3, #31
 8009034:	b2db      	uxtb	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	f107 0310 	add.w	r3, r7, #16
 800903c:	3301      	adds	r3, #1
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fbe1 	bl	8009808 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800904a:	2218      	movs	r2, #24
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fbe5 	bl	800981e <memset>
  rq.ogf = OGF_LE_CTL;
 8009054:	2308      	movs	r3, #8
 8009056:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009058:	2309      	movs	r3, #9
 800905a:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800905c:	f107 0310 	add.w	r3, r7, #16
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009062:	2320      	movs	r3, #32
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8009066:	f107 030f 	add.w	r3, r7, #15
 800906a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800906c:	2301      	movs	r3, #1
 800906e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009074:	2100      	movs	r1, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f904 	bl	8009284 <hci_send_req>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	da01      	bge.n	8009086 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8009082:	23ff      	movs	r3, #255	; 0xff
 8009084:	e000      	b.n	8009088 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3748      	adds	r7, #72	; 0x48
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3308      	adds	r3, #8
 800909c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d001      	beq.n	80090aa <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80090a6:	2301      	movs	r3, #1
 80090a8:	e00c      	b.n	80090c4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3302      	adds	r3, #2
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80090b8:	3b03      	subs	r3, #3
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d001      	beq.n	80090c2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80090be:	2302      	movs	r3, #2
 80090c0:	e000      	b.n	80090c4 <verify_packet+0x34>
  
  return 0;      
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b0a6      	sub	sp, #152	; 0x98
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	4603      	mov	r3, r0
 80090da:	81fb      	strh	r3, [r7, #14]
 80090dc:	460b      	mov	r3, r1
 80090de:	81bb      	strh	r3, [r7, #12]
 80090e0:	4613      	mov	r3, r2
 80090e2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80090e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ec:	b21a      	sxth	r2, r3
 80090ee:	89fb      	ldrh	r3, [r7, #14]
 80090f0:	029b      	lsls	r3, r3, #10
 80090f2:	b21b      	sxth	r3, r3
 80090f4:	4313      	orrs	r3, r2
 80090f6:	b21b      	sxth	r3, r3
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009100:	2301      	movs	r3, #1
 8009102:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009104:	f107 0318 	add.w	r3, r7, #24
 8009108:	3301      	adds	r3, #1
 800910a:	461a      	mov	r2, r3
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	8819      	ldrh	r1, [r3, #0]
 8009112:	789b      	ldrb	r3, [r3, #2]
 8009114:	8011      	strh	r1, [r2, #0]
 8009116:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009118:	f107 0318 	add.w	r3, r7, #24
 800911c:	3304      	adds	r3, #4
 800911e:	7afa      	ldrb	r2, [r7, #11]
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fb70 	bl	8009808 <memcpy>
  
  if (hciContext.io.Send)
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <send_cmd+0x7c>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009130:	4b06      	ldr	r3, [pc, #24]	; (800914c <send_cmd+0x7c>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	7afa      	ldrb	r2, [r7, #11]
 8009136:	b292      	uxth	r2, r2
 8009138:	3204      	adds	r2, #4
 800913a:	b291      	uxth	r1, r2
 800913c:	f107 0218 	add.w	r2, r7, #24
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
  }
}
 8009144:	bf00      	nop
 8009146:	3798      	adds	r7, #152	; 0x98
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200004ac 	.word	0x200004ac

08009150 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800915a:	e00a      	b.n	8009172 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800915c:	f107 030c 	add.w	r3, r7, #12
 8009160:	4619      	mov	r1, r3
 8009162:	6838      	ldr	r0, [r7, #0]
 8009164:	f000 fada 	bl	800971c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa49 	bl	8009604 <list_insert_head>
  while (!list_is_empty(src_list))
 8009172:	6838      	ldr	r0, [r7, #0]
 8009174:	f000 fa26 	bl	80095c4 <list_is_empty>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0ee      	beq.n	800915c <move_list+0xc>
  }
}
 800917e:	bf00      	nop
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800918e:	e009      	b.n	80091a4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009190:	1d3b      	adds	r3, r7, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4808      	ldr	r0, [pc, #32]	; (80091b8 <free_event_list+0x30>)
 8009196:	f000 fa9c 	bl	80096d2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4619      	mov	r1, r3
 800919e:	4807      	ldr	r0, [pc, #28]	; (80091bc <free_event_list+0x34>)
 80091a0:	f000 fa54 	bl	800964c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80091a4:	4805      	ldr	r0, [pc, #20]	; (80091bc <free_event_list+0x34>)
 80091a6:	f000 fade 	bl	8009766 <list_get_size>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	ddef      	ble.n	8009190 <free_event_list+0x8>
  }
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000a28 	.word	0x20000a28
 80091bc:	20000a20 	.word	0x20000a20

080091c0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80091d0:	4a18      	ldr	r2, [pc, #96]	; (8009234 <hci_init+0x74>)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80091d6:	4818      	ldr	r0, [pc, #96]	; (8009238 <hci_init+0x78>)
 80091d8:	f000 f9e4 	bl	80095a4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80091dc:	4817      	ldr	r0, [pc, #92]	; (800923c <hci_init+0x7c>)
 80091de:	f000 f9e1 	bl	80095a4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80091e2:	f7f9 f8f5 	bl	80023d0 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
 80091ea:	e00c      	b.n	8009206 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	228c      	movs	r2, #140	; 0x8c
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	4a12      	ldr	r2, [pc, #72]	; (8009240 <hci_init+0x80>)
 80091f6:	4413      	add	r3, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	480f      	ldr	r0, [pc, #60]	; (8009238 <hci_init+0x78>)
 80091fc:	f000 fa26 	bl	800964c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	3301      	adds	r3, #1
 8009204:	73fb      	strb	r3, [r7, #15]
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d9ef      	bls.n	80091ec <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <hci_init+0x74>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <hci_init+0x5c>
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <hci_init+0x74>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2000      	movs	r0, #0
 800921a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <hci_init+0x74>)
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <hci_init+0x6a>
 8009224:	4b03      	ldr	r3, [pc, #12]	; (8009234 <hci_init+0x74>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	4798      	blx	r3
}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200004ac 	.word	0x200004ac
 8009238:	20000a20 	.word	0x20000a20
 800923c:	20000a28 	.word	0x20000a28
 8009240:	200001f0 	.word	0x200001f0

08009244 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a0b      	ldr	r2, [pc, #44]	; (8009280 <hci_register_io_bus+0x3c>)
 8009252:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4a09      	ldr	r2, [pc, #36]	; (8009280 <hci_register_io_bus+0x3c>)
 800925a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	4a07      	ldr	r2, [pc, #28]	; (8009280 <hci_register_io_bus+0x3c>)
 8009262:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	4a05      	ldr	r2, [pc, #20]	; (8009280 <hci_register_io_bus+0x3c>)
 800926a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4a03      	ldr	r2, [pc, #12]	; (8009280 <hci_register_io_bus+0x3c>)
 8009272:	6093      	str	r3, [r2, #8]
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	200004ac 	.word	0x200004ac

08009284 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08e      	sub	sp, #56	; 0x38
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	885b      	ldrh	r3, [r3, #2]
 8009294:	b21b      	sxth	r3, r3
 8009296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800929a:	b21a      	sxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	029b      	lsls	r3, r3, #10
 80092a2:	b21b      	sxth	r3, r3
 80092a4:	4313      	orrs	r3, r2
 80092a6:	b21b      	sxth	r3, r3
 80092a8:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80092ae:	f107 0308 	add.w	r3, r7, #8
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f976 	bl	80095a4 <list_init_head>

  free_event_list();
 80092b8:	f7ff ff66 	bl	8009188 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8818      	ldrh	r0, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8859      	ldrh	r1, [r3, #2]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f7ff feff 	bl	80090d0 <send_cmd>
  
  if (async)
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <hci_send_req+0x58>
  {
    return 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	e0e2      	b.n	80094a2 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80092dc:	f7fa fa0e 	bl	80036fc <HAL_GetTick>
 80092e0:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80092e2:	f7fa fa0b 	bl	80036fc <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f0:	f200 80b3 	bhi.w	800945a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80092f4:	486d      	ldr	r0, [pc, #436]	; (80094ac <hci_send_req+0x228>)
 80092f6:	f000 f965 	bl	80095c4 <list_is_empty>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d000      	beq.n	8009302 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009300:	e7ef      	b.n	80092e2 <hci_send_req+0x5e>
      {
        break;
 8009302:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009304:	f107 0310 	add.w	r3, r7, #16
 8009308:	4619      	mov	r1, r3
 800930a:	4868      	ldr	r0, [pc, #416]	; (80094ac <hci_send_req+0x228>)
 800930c:	f000 f9e1 	bl	80096d2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3308      	adds	r3, #8
 8009314:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2b04      	cmp	r3, #4
 800931c:	d17a      	bne.n	8009414 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	3301      	adds	r3, #1
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	3308      	adds	r3, #8
 8009328:	3303      	adds	r3, #3
 800932a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009332:	3b03      	subs	r3, #3
 8009334:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b0f      	cmp	r3, #15
 800933c:	d00a      	beq.n	8009354 <hci_send_req+0xd0>
 800933e:	2b0f      	cmp	r3, #15
 8009340:	dc02      	bgt.n	8009348 <hci_send_req+0xc4>
 8009342:	2b0e      	cmp	r3, #14
 8009344:	d028      	beq.n	8009398 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009346:	e06a      	b.n	800941e <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8009348:	2b10      	cmp	r3, #16
 800934a:	f000 8088 	beq.w	800945e <hci_send_req+0x1da>
 800934e:	2b3e      	cmp	r3, #62	; 0x3e
 8009350:	d042      	beq.n	80093d8 <hci_send_req+0x154>
        break;
 8009352:	e064      	b.n	800941e <hci_send_req+0x19a>
        cs = (void *) ptr;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	885b      	ldrh	r3, [r3, #2]
 800935c:	b29b      	uxth	r3, r3
 800935e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009360:	429a      	cmp	r2, r3
 8009362:	d17e      	bne.n	8009462 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	2b0f      	cmp	r3, #15
 800936a:	d004      	beq.n	8009376 <hci_send_req+0xf2>
          if (cs->status) {
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d051      	beq.n	8009418 <hci_send_req+0x194>
            goto failed;
 8009374:	e078      	b.n	8009468 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	429a      	cmp	r2, r3
 800937e:	bf28      	it	cs
 8009380:	461a      	movcs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6918      	ldr	r0, [r3, #16]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	461a      	mov	r2, r3
 8009390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009392:	f000 fa39 	bl	8009808 <memcpy>
        goto done;
 8009396:	e078      	b.n	800948a <hci_send_req+0x206>
        cc = (void *) ptr;
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d15d      	bne.n	8009466 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	3303      	adds	r3, #3
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	3b03      	subs	r3, #3
 80093b4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695a      	ldr	r2, [r3, #20]
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	429a      	cmp	r2, r3
 80093be:	bf28      	it	cs
 80093c0:	461a      	movcs	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6918      	ldr	r0, [r3, #16]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	461a      	mov	r2, r3
 80093d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d2:	f000 fa19 	bl	8009808 <memcpy>
        goto done;
 80093d6:	e058      	b.n	800948a <hci_send_req+0x206>
        me = (void *) ptr;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d118      	bne.n	800941c <hci_send_req+0x198>
        len -= 1;
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	695a      	ldr	r2, [r3, #20]
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	bf28      	it	cs
 80093fa:	461a      	movcs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6918      	ldr	r0, [r3, #16]
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	1c59      	adds	r1, r3, #1
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	461a      	mov	r2, r3
 800940e:	f000 f9fb 	bl	8009808 <memcpy>
        goto done;
 8009412:	e03a      	b.n	800948a <hci_send_req+0x206>
      }
    }
 8009414:	bf00      	nop
 8009416:	e002      	b.n	800941e <hci_send_req+0x19a>
          break;
 8009418:	bf00      	nop
 800941a:	e000      	b.n	800941e <hci_send_req+0x19a>
          break;
 800941c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800941e:	4824      	ldr	r0, [pc, #144]	; (80094b0 <hci_send_req+0x22c>)
 8009420:	f000 f8d0 	bl	80095c4 <list_is_empty>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00d      	beq.n	8009446 <hci_send_req+0x1c2>
 800942a:	4820      	ldr	r0, [pc, #128]	; (80094ac <hci_send_req+0x228>)
 800942c:	f000 f8ca 	bl	80095c4 <list_is_empty>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	4619      	mov	r1, r3
 800943a:	481d      	ldr	r0, [pc, #116]	; (80094b0 <hci_send_req+0x22c>)
 800943c:	f000 f906 	bl	800964c <list_insert_tail>
      hciReadPacket=NULL;
 8009440:	2300      	movs	r3, #0
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	e008      	b.n	8009458 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	f107 0308 	add.w	r3, r7, #8
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f8fc 	bl	800964c <list_insert_tail>
      hciReadPacket=NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	613b      	str	r3, [r7, #16]
  {
 8009458:	e740      	b.n	80092dc <hci_send_req+0x58>
        goto failed;
 800945a:	bf00      	nop
 800945c:	e004      	b.n	8009468 <hci_send_req+0x1e4>
        goto failed;
 800945e:	bf00      	nop
 8009460:	e002      	b.n	8009468 <hci_send_req+0x1e4>
          goto failed;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <hci_send_req+0x1e4>
          goto failed;
 8009466:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4619      	mov	r1, r3
 8009472:	480f      	ldr	r0, [pc, #60]	; (80094b0 <hci_send_req+0x22c>)
 8009474:	f000 f8c6 	bl	8009604 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009478:	f107 0308 	add.w	r3, r7, #8
 800947c:	4619      	mov	r1, r3
 800947e:	480b      	ldr	r0, [pc, #44]	; (80094ac <hci_send_req+0x228>)
 8009480:	f7ff fe66 	bl	8009150 <move_list>

  return -1;
 8009484:	f04f 33ff 	mov.w	r3, #4294967295
 8009488:	e00b      	b.n	80094a2 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	4619      	mov	r1, r3
 800948e:	4808      	ldr	r0, [pc, #32]	; (80094b0 <hci_send_req+0x22c>)
 8009490:	f000 f8b8 	bl	8009604 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009494:	f107 0308 	add.w	r3, r7, #8
 8009498:	4619      	mov	r1, r3
 800949a:	4804      	ldr	r0, [pc, #16]	; (80094ac <hci_send_req+0x228>)
 800949c:	f7ff fe58 	bl	8009150 <move_list>

  return 0;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3738      	adds	r7, #56	; 0x38
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000a28 	.word	0x20000a28
 80094b0:	20000a20 	.word	0x20000a20

080094b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80094be:	e013      	b.n	80094e8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80094c0:	1d3b      	adds	r3, r7, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	480d      	ldr	r0, [pc, #52]	; (80094fc <hci_user_evt_proc+0x48>)
 80094c6:	f000 f904 	bl	80096d2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <hci_user_evt_proc+0x4c>)
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80094d2:	4b0b      	ldr	r3, [pc, #44]	; (8009500 <hci_user_evt_proc+0x4c>)
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	3208      	adds	r2, #8
 80094da:	4610      	mov	r0, r2
 80094dc:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4619      	mov	r1, r3
 80094e2:	4808      	ldr	r0, [pc, #32]	; (8009504 <hci_user_evt_proc+0x50>)
 80094e4:	f000 f8b2 	bl	800964c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80094e8:	4804      	ldr	r0, [pc, #16]	; (80094fc <hci_user_evt_proc+0x48>)
 80094ea:	f000 f86b 	bl	80095c4 <list_is_empty>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0e5      	beq.n	80094c0 <hci_user_evt_proc+0xc>
  }
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000a28 	.word	0x20000a28
 8009500:	200004ac 	.word	0x200004ac
 8009504:	20000a20 	.word	0x20000a20

08009508 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009518:	481f      	ldr	r0, [pc, #124]	; (8009598 <hci_notify_asynch_evt+0x90>)
 800951a:	f000 f853 	bl	80095c4 <list_is_empty>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d132      	bne.n	800958a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009524:	f107 030c 	add.w	r3, r7, #12
 8009528:	4619      	mov	r1, r3
 800952a:	481b      	ldr	r0, [pc, #108]	; (8009598 <hci_notify_asynch_evt+0x90>)
 800952c:	f000 f8d1 	bl	80096d2 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009530:	4b1a      	ldr	r3, [pc, #104]	; (800959c <hci_notify_asynch_evt+0x94>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d02a      	beq.n	800958e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009538:	4b18      	ldr	r3, [pc, #96]	; (800959c <hci_notify_asynch_evt+0x94>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	3208      	adds	r2, #8
 8009540:	2180      	movs	r1, #128	; 0x80
 8009542:	4610      	mov	r0, r2
 8009544:	4798      	blx	r3
 8009546:	4603      	mov	r3, r0
 8009548:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800954a:	7cfb      	ldrb	r3, [r7, #19]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d016      	beq.n	800957e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	7cfa      	ldrb	r2, [r7, #19]
 8009554:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff fd98 	bl	8009090 <verify_packet>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d105      	bne.n	8009572 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4619      	mov	r1, r3
 800956a:	480d      	ldr	r0, [pc, #52]	; (80095a0 <hci_notify_asynch_evt+0x98>)
 800956c:	f000 f86e 	bl	800964c <list_insert_tail>
 8009570:	e00d      	b.n	800958e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4619      	mov	r1, r3
 8009576:	4808      	ldr	r0, [pc, #32]	; (8009598 <hci_notify_asynch_evt+0x90>)
 8009578:	f000 f844 	bl	8009604 <list_insert_head>
 800957c:	e007      	b.n	800958e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4619      	mov	r1, r3
 8009582:	4805      	ldr	r0, [pc, #20]	; (8009598 <hci_notify_asynch_evt+0x90>)
 8009584:	f000 f83e 	bl	8009604 <list_insert_head>
 8009588:	e001      	b.n	800958e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800958a:	2301      	movs	r3, #1
 800958c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800958e:	697b      	ldr	r3, [r7, #20]

}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000a20 	.word	0x20000a20
 800959c:	200004ac 	.word	0x200004ac
 80095a0:	20000a28 	.word	0x20000a28

080095a4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095cc:	f3ef 8310 	mrs	r3, PRIMASK
 80095d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80095d2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80095d6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d102      	bne.n	80095e8 <list_is_empty+0x24>
  {
    return_value = 1;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]
 80095e6:	e001      	b.n	80095ec <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	75fb      	strb	r3, [r7, #23]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800960e:	f3ef 8310 	mrs	r3, PRIMASK
 8009612:	60fb      	str	r3, [r7, #12]
  return(result);
 8009614:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009618:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009656:	f3ef 8310 	mrs	r3, PRIMASK
 800965a:	60fb      	str	r3, [r7, #12]
  return(result);
 800965c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800965e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009660:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009688:	bf00      	nop
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800969c:	f3ef 8310 	mrs	r3, PRIMASK
 80096a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80096a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6852      	ldr	r2, [r2, #4]
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096dc:	f3ef 8310 	mrs	r3, PRIMASK
 80096e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80096e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096e6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff ffcd 	bl	8009694 <list_remove_node>
  (*node)->next = NULL;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2200      	movs	r2, #0
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009714:	bf00      	nop
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009726:	f3ef 8310 	mrs	r3, PRIMASK
 800972a:	60fb      	str	r3, [r7, #12]
  return(result);
 800972c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800972e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009730:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ffa8 	bl	8009694 <list_remove_node>
  (*node)->next = NULL;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2200      	movs	r2, #0
 8009752:	605a      	str	r2, [r3, #4]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800975e:	bf00      	nop
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009766:	b480      	push	{r7}
 8009768:	b089      	sub	sp, #36	; 0x24
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009772:	f3ef 8310 	mrs	r3, PRIMASK
 8009776:	613b      	str	r3, [r7, #16]
  return(result);
 8009778:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800977a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800977c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009784:	e005      	b.n	8009792 <list_get_size+0x2c>
  {
    size++;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	3301      	adds	r3, #1
 800978a:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	429a      	cmp	r2, r3
 8009798:	d1f5      	bne.n	8009786 <list_get_size+0x20>
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80097a4:	69fb      	ldr	r3, [r7, #28]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3724      	adds	r7, #36	; 0x24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
	...

080097b4 <__errno>:
 80097b4:	4b01      	ldr	r3, [pc, #4]	; (80097bc <__errno+0x8>)
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000028 	.word	0x20000028

080097c0 <__libc_init_array>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4e0d      	ldr	r6, [pc, #52]	; (80097f8 <__libc_init_array+0x38>)
 80097c4:	2500      	movs	r5, #0
 80097c6:	4c0d      	ldr	r4, [pc, #52]	; (80097fc <__libc_init_array+0x3c>)
 80097c8:	1ba4      	subs	r4, r4, r6
 80097ca:	10a4      	asrs	r4, r4, #2
 80097cc:	42a5      	cmp	r5, r4
 80097ce:	d109      	bne.n	80097e4 <__libc_init_array+0x24>
 80097d0:	4e0b      	ldr	r6, [pc, #44]	; (8009800 <__libc_init_array+0x40>)
 80097d2:	2500      	movs	r5, #0
 80097d4:	4c0b      	ldr	r4, [pc, #44]	; (8009804 <__libc_init_array+0x44>)
 80097d6:	f000 f8f7 	bl	80099c8 <_init>
 80097da:	1ba4      	subs	r4, r4, r6
 80097dc:	10a4      	asrs	r4, r4, #2
 80097de:	42a5      	cmp	r5, r4
 80097e0:	d105      	bne.n	80097ee <__libc_init_array+0x2e>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097e8:	3501      	adds	r5, #1
 80097ea:	4798      	blx	r3
 80097ec:	e7ee      	b.n	80097cc <__libc_init_array+0xc>
 80097ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097f2:	3501      	adds	r5, #1
 80097f4:	4798      	blx	r3
 80097f6:	e7f2      	b.n	80097de <__libc_init_array+0x1e>
 80097f8:	08009a8c 	.word	0x08009a8c
 80097fc:	08009a8c 	.word	0x08009a8c
 8009800:	08009a8c 	.word	0x08009a8c
 8009804:	08009a90 	.word	0x08009a90

08009808 <memcpy>:
 8009808:	1e43      	subs	r3, r0, #1
 800980a:	440a      	add	r2, r1
 800980c:	b510      	push	{r4, lr}
 800980e:	4291      	cmp	r1, r2
 8009810:	d100      	bne.n	8009814 <memcpy+0xc>
 8009812:	bd10      	pop	{r4, pc}
 8009814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800981c:	e7f7      	b.n	800980e <memcpy+0x6>

0800981e <memset>:
 800981e:	4402      	add	r2, r0
 8009820:	4603      	mov	r3, r0
 8009822:	4293      	cmp	r3, r2
 8009824:	d100      	bne.n	8009828 <memset+0xa>
 8009826:	4770      	bx	lr
 8009828:	f803 1b01 	strb.w	r1, [r3], #1
 800982c:	e7f9      	b.n	8009822 <memset+0x4>
	...

08009830 <srand>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <srand+0x38>)
 8009834:	4605      	mov	r5, r0
 8009836:	681c      	ldr	r4, [r3, #0]
 8009838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800983a:	b97b      	cbnz	r3, 800985c <srand+0x2c>
 800983c:	2018      	movs	r0, #24
 800983e:	f000 f84f 	bl	80098e0 <malloc>
 8009842:	4a0a      	ldr	r2, [pc, #40]	; (800986c <srand+0x3c>)
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <srand+0x40>)
 8009846:	63a0      	str	r0, [r4, #56]	; 0x38
 8009848:	e9c0 2300 	strd	r2, r3, [r0]
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <srand+0x44>)
 800984e:	2201      	movs	r2, #1
 8009850:	6083      	str	r3, [r0, #8]
 8009852:	230b      	movs	r3, #11
 8009854:	8183      	strh	r3, [r0, #12]
 8009856:	2300      	movs	r3, #0
 8009858:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800985c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800985e:	2200      	movs	r2, #0
 8009860:	611d      	str	r5, [r3, #16]
 8009862:	615a      	str	r2, [r3, #20]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000028 	.word	0x20000028
 800986c:	abcd330e 	.word	0xabcd330e
 8009870:	e66d1234 	.word	0xe66d1234
 8009874:	0005deec 	.word	0x0005deec

08009878 <rand>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <rand+0x50>)
 800987c:	681c      	ldr	r4, [r3, #0]
 800987e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009880:	b97b      	cbnz	r3, 80098a2 <rand+0x2a>
 8009882:	2018      	movs	r0, #24
 8009884:	f000 f82c 	bl	80098e0 <malloc>
 8009888:	4a10      	ldr	r2, [pc, #64]	; (80098cc <rand+0x54>)
 800988a:	4b11      	ldr	r3, [pc, #68]	; (80098d0 <rand+0x58>)
 800988c:	63a0      	str	r0, [r4, #56]	; 0x38
 800988e:	e9c0 2300 	strd	r2, r3, [r0]
 8009892:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <rand+0x5c>)
 8009894:	2201      	movs	r2, #1
 8009896:	6083      	str	r3, [r0, #8]
 8009898:	230b      	movs	r3, #11
 800989a:	8183      	strh	r3, [r0, #12]
 800989c:	2300      	movs	r3, #0
 800989e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80098a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80098a4:	480c      	ldr	r0, [pc, #48]	; (80098d8 <rand+0x60>)
 80098a6:	690a      	ldr	r2, [r1, #16]
 80098a8:	694b      	ldr	r3, [r1, #20]
 80098aa:	4c0c      	ldr	r4, [pc, #48]	; (80098dc <rand+0x64>)
 80098ac:	4350      	muls	r0, r2
 80098ae:	fb04 0003 	mla	r0, r4, r3, r0
 80098b2:	fba2 2304 	umull	r2, r3, r2, r4
 80098b6:	4403      	add	r3, r0
 80098b8:	1c54      	adds	r4, r2, #1
 80098ba:	f143 0500 	adc.w	r5, r3, #0
 80098be:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80098c2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20000028 	.word	0x20000028
 80098cc:	abcd330e 	.word	0xabcd330e
 80098d0:	e66d1234 	.word	0xe66d1234
 80098d4:	0005deec 	.word	0x0005deec
 80098d8:	5851f42d 	.word	0x5851f42d
 80098dc:	4c957f2d 	.word	0x4c957f2d

080098e0 <malloc>:
 80098e0:	4b02      	ldr	r3, [pc, #8]	; (80098ec <malloc+0xc>)
 80098e2:	4601      	mov	r1, r0
 80098e4:	6818      	ldr	r0, [r3, #0]
 80098e6:	f000 b803 	b.w	80098f0 <_malloc_r>
 80098ea:	bf00      	nop
 80098ec:	20000028 	.word	0x20000028

080098f0 <_malloc_r>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	1ccd      	adds	r5, r1, #3
 80098f4:	4606      	mov	r6, r0
 80098f6:	f025 0503 	bic.w	r5, r5, #3
 80098fa:	3508      	adds	r5, #8
 80098fc:	2d0c      	cmp	r5, #12
 80098fe:	bf38      	it	cc
 8009900:	250c      	movcc	r5, #12
 8009902:	2d00      	cmp	r5, #0
 8009904:	db01      	blt.n	800990a <_malloc_r+0x1a>
 8009906:	42a9      	cmp	r1, r5
 8009908:	d903      	bls.n	8009912 <_malloc_r+0x22>
 800990a:	230c      	movs	r3, #12
 800990c:	6033      	str	r3, [r6, #0]
 800990e:	2000      	movs	r0, #0
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	f000 f857 	bl	80099c4 <__malloc_lock>
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <_malloc_r+0xac>)
 8009918:	6814      	ldr	r4, [r2, #0]
 800991a:	4621      	mov	r1, r4
 800991c:	b991      	cbnz	r1, 8009944 <_malloc_r+0x54>
 800991e:	4c20      	ldr	r4, [pc, #128]	; (80099a0 <_malloc_r+0xb0>)
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	b91b      	cbnz	r3, 800992c <_malloc_r+0x3c>
 8009924:	4630      	mov	r0, r6
 8009926:	f000 f83d 	bl	80099a4 <_sbrk_r>
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f000 f838 	bl	80099a4 <_sbrk_r>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d124      	bne.n	8009982 <_malloc_r+0x92>
 8009938:	230c      	movs	r3, #12
 800993a:	4630      	mov	r0, r6
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	f000 f842 	bl	80099c6 <__malloc_unlock>
 8009942:	e7e4      	b.n	800990e <_malloc_r+0x1e>
 8009944:	680b      	ldr	r3, [r1, #0]
 8009946:	1b5b      	subs	r3, r3, r5
 8009948:	d418      	bmi.n	800997c <_malloc_r+0x8c>
 800994a:	2b0b      	cmp	r3, #11
 800994c:	d90f      	bls.n	800996e <_malloc_r+0x7e>
 800994e:	18cc      	adds	r4, r1, r3
 8009950:	600b      	str	r3, [r1, #0]
 8009952:	50cd      	str	r5, [r1, r3]
 8009954:	4630      	mov	r0, r6
 8009956:	f000 f836 	bl	80099c6 <__malloc_unlock>
 800995a:	f104 000b 	add.w	r0, r4, #11
 800995e:	1d23      	adds	r3, r4, #4
 8009960:	f020 0007 	bic.w	r0, r0, #7
 8009964:	1ac3      	subs	r3, r0, r3
 8009966:	d0d3      	beq.n	8009910 <_malloc_r+0x20>
 8009968:	425a      	negs	r2, r3
 800996a:	50e2      	str	r2, [r4, r3]
 800996c:	e7d0      	b.n	8009910 <_malloc_r+0x20>
 800996e:	428c      	cmp	r4, r1
 8009970:	684b      	ldr	r3, [r1, #4]
 8009972:	bf1a      	itte	ne
 8009974:	6063      	strne	r3, [r4, #4]
 8009976:	460c      	movne	r4, r1
 8009978:	6013      	streq	r3, [r2, #0]
 800997a:	e7eb      	b.n	8009954 <_malloc_r+0x64>
 800997c:	460c      	mov	r4, r1
 800997e:	6849      	ldr	r1, [r1, #4]
 8009980:	e7cc      	b.n	800991c <_malloc_r+0x2c>
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d005      	beq.n	8009998 <_malloc_r+0xa8>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4630      	mov	r0, r6
 8009990:	f000 f808 	bl	80099a4 <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d0cf      	beq.n	8009938 <_malloc_r+0x48>
 8009998:	6025      	str	r5, [r4, #0]
 800999a:	e7db      	b.n	8009954 <_malloc_r+0x64>
 800999c:	200004cc 	.word	0x200004cc
 80099a0:	200004d0 	.word	0x200004d0

080099a4 <_sbrk_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	2300      	movs	r3, #0
 80099a8:	4c05      	ldr	r4, [pc, #20]	; (80099c0 <_sbrk_r+0x1c>)
 80099aa:	4605      	mov	r5, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	f7f9 fb16 	bl	8002fe0 <_sbrk>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_sbrk_r+0x1a>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	b103      	cbz	r3, 80099be <_sbrk_r+0x1a>
 80099bc:	602b      	str	r3, [r5, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	20000a30 	.word	0x20000a30

080099c4 <__malloc_lock>:
 80099c4:	4770      	bx	lr

080099c6 <__malloc_unlock>:
 80099c6:	4770      	bx	lr

080099c8 <_init>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr

080099d4 <_fini>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr
